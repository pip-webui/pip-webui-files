{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/index.ts","src/routing/BackDecorator.ts","src/routing/RedirectDecorator.ts","src/routing/RoutingEvents.ts","src/routing/index.ts","src/session/IdentityService.ts","src/session/SessionService.ts","src/session/index.ts","src/transactions/Transaction.ts","src/transactions/TransactionError.ts","src/transactions/TransactionService.ts","src/transactions/TransactionStrings.ts","src/transactions/index.ts","src/translate/TranslateDirective.ts","src/translate/TranslateFilter.ts","src/translate/TranslateService.ts","src/translate/Translation.ts","src/translate/index.ts","src/utilities/Codes.ts","src/utilities/Format.ts","src/utilities/PageResetService.ts","src/utilities/ScrollService.ts","src/utilities/SystemInfo.ts","src/utilities/Tags.ts","src/utilities/TimerService.ts","src/utilities/index.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","services","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","angular","__export","captureStateTranslations","$rootScope","$on","event","toState","toParams","fromState","fromParams","CurrentState","name","url","params","PreviousState","decorateBackStateService","$delegate","$window","goBack","history","back","goBackAndSelect","state","_","cloneDeep","extend","go","addBackStateDecorator","$provide","decorator","$inject","defineProperty","value","config","run","3","decorateRedirectStateProvider","redirect","RedirectedStates","addRedirectStateProviderDecorator","$timeout","isNull","preventDefault","transitionTo","location","addRedirectStateDecorator","hookRoutingEvents","$log","$state","RoutingVar","error","5","m","p","hasOwnProperty","./RedirectDecorator","./RoutingEvents","6","IdentityRootVar","IdentityChangedEvent","IdentityService","setRootVar","identity","_setRootVar","_identity","_rootScope","_log","prototype","$emit","debug","JSON","stringify","enumerable","configurable","IdentityProvider","_service","get","set","$get","provider","SessionRootVar","SessionOpenedEvent","SessionClosedEvent","SessionService","session","_session","isOpened","open","fullReset","partialReset","close","oldSession","SessionProvider","8","./SessionService","9","Transaction","scope","_scope","_id","_operation","_progress","_error","message","reset","busy","failed","empty","aborted","id","begin","operation","Date","getTime","toString","update","progress","Math","max","abort","10","TransactionError","decode","details","cause","stack_trace","data","statusText","status","11","TransactionService","_transactions","create","transaction","Transaction_1","service","12","$injector","pipTranslate","has","setTranslations","ENTERING","PROCESSING","LOADING","SAVING","configureTransactionStrings","13","./TransactionError","./TransactionService","./TransactionStrings","14","restrict","key1","key2","link","element","attrs","key","translate","text","html","directive","translateDirective","translateHtmlDirective","15","translateFilter","16","language","initTranslate","__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","__","constructor","LanguageRootVar","LanguageChangedEvent","TranslateService","translation","persist","$mdDateLocale","_persist","_translation","_window","_mdDateLocale","localStorage","getItem","save","changeLocale","locale","localeDate","moment","localeData","months","isArray","_months","format","shortMonths","_monthsShort","days","_weekdays","shortDays","_weekdaysMin","firstDayOfWeek","_week","dow","setItem","PageResetService_1","ResetPageEvent","use","translations","translateArray","keys","translateSet","keyProp","valueProp","translateObjects","items","translateWithPrefix","prefix","translateSetWithPrefix","translateSetWithPrefix2","_super","_this","TranslateProvider","Translation","./Translation","17","en","ru","es","pt","de","fr","_language","map","_translations","isUndefined","values","k","push","each","item","replace","toUpperCase","./TranslateFilter","./TranslateService","19","Codes","hash","result","charCodeAt","verification","random","substr","Format","cache","sample","maxLength","indexOf","substring","strRepeat","str","qty","getType","variable","slice","toLowerCase","fmt","match","parse_tree","arg_names","exec","_fmt","field_list","replacement_field","field_match","argv","tree_length","node_type","output","arg","cursor","sprintf","test","String","fromCharCode","parseInt","toExponential","parseFloat","toFixed","abs","pad_character","charAt","pad_length","pad","join","args","_i","arguments","parseFormat","21","hookResetEvents","pipPageReset","ResetAreaEvent","area","resetArea","ResetRootVar","ResetAreaRootVar","PageResetService","_timeout","performReset","scrollTo","parentElement","childElement","animationDuration","undefined","setTimeout","$","position","scrollTop","top","animate","ScrollService","SystemInfo","ua","navigator","userAgent","search","version","browserName","browser","split","osAll","osAndroid","err","isDesktop","platform","isMobile","isCordova","isSupported","supported","edge","chrome","browserVersion","Tags","normalizeOne","tag","trim","compressOne","equal","tag1","tag2","normalizeAll","tags","isString","compressAll","searchFields","field","entity","hashTags","concat","uniq","TimerEvent","timeout","DefaultEvents","TimerService","$interval","_started","_events","_interval","isStarted","addEvent","existingEvent","find","newEvent","startEvent","removeEvent","stopEvent","splice","clearEvents","stop","interval","cancel","ex","start"],"mappings":"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","file":"pip-webui-services.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿import './translate';\r\nimport './session';\r\nimport './transactions';\r\nimport './routing';\r\nimport './utilities';\r\n\r\nangular.module('pipServices', [\r\n    'pipTranslate',\r\n    'pipSession',\r\n    'pipTransaction',\r\n    'pipRouting',\r\n    'pipFormat',\r\n    'pipTimer',\r\n    'pipScroll',\r\n    'pipTags',\r\n    'pipCodes',\r\n    'pipSystemInfo',\r\n    'pipPageReset'\r\n]);\r\n\r\nexport * from './translate';\r\nexport * from './session';\r\nexport * from './transactions';\r\nexport * from './routing';\r\nexport * from './utilities';\r\n","export let CurrentState: any;\r\nexport let PreviousState: any;\r\n\r\n// Run function to set CurrentState and PreviousState global variables\r\nfunction captureStateTranslations($rootScope: ng.IRootScopeService) {\r\n    \"ngInject\";\r\n\r\n    $rootScope.$on('$stateChangeSuccess',\r\n        (event, toState, toParams, fromState, fromParams) => {\r\n            CurrentState = {\r\n                name: toState.name, \r\n                url: toState.url, \r\n                params: toParams\r\n            };\r\n\r\n            PreviousState = {\r\n                name: fromState.name, \r\n                url: fromState.url, \r\n                params: fromParams\r\n            };\r\n        }\r\n    );\r\n\r\n}\r\n\r\n// Decorator function to modify $state service by adding goBack and goBackAndSelect methods\r\nfunction decorateBackStateService($delegate: any, $window: ng.IWindowService): any {\r\n    \"ngInject\";\r\n\r\n    $delegate.goBack = goBack;\r\n    $delegate.goBackAndSelect = goBackAndSelect;\r\n\r\n    return $delegate;\r\n    //////////////////////////////////////////////////\r\n\r\n    function goBack(): void {\r\n        $window.history.back()\r\n    }\r\n\r\n    function goBackAndSelect(params: any): void {\r\n        // todo: define end fix PreviousState\r\n        if (PreviousState != null \r\n            && PreviousState.name != null) {\r\n\r\n            let state = _.cloneDeep(PreviousState);\r\n\r\n            // Override selected parameters\r\n            state.params = _.extend(state.params, params);\r\n\r\n            $delegate.go(state.name, state.params);\r\n        } else {\r\n            $window.history.back();\r\n        }\r\n    }\r\n}\r\n\r\n// Config function to decorate $state service\r\nfunction addBackStateDecorator($provide) {\r\n    $provide.decorator('$state', decorateBackStateService);\r\n}\r\n\r\nangular\r\n    .module('pipRouting')\r\n    .config(addBackStateDecorator)\r\n    .run(captureStateTranslations);\r\n    ","let RedirectedStates: any = {};\r\n\r\n// Decorator function to add $stateProvider redirect method\r\nfunction decorateRedirectStateProvider($delegate) {\r\n    \"ngInject\";\r\n\r\n    $delegate.redirect = redirect;\r\n\r\n    return $delegate;\r\n    /////////////////////////////////////////////\r\n\r\n    // Specify automatic redirect from one state to another\r\n    function redirect(fromState, toState) {\r\n        RedirectedStates[fromState] = toState;  \r\n        return this;\r\n    }\r\n}\r\n\r\n// Config function to decorate $state provider\r\nfunction addRedirectStateProviderDecorator($provide) {\r\n    \"ngInject\";\r\n\r\n    $provide.decorator('$state', decorateRedirectStateProvider);\r\n}\r\n\r\n// Decorator function to add redirect method to $state service\r\nfunction decorateRedirectStateService($delegate, $timeout) {\r\n    \"ngInject\";\r\n\r\n    $delegate.redirect = redirect;\r\n    \r\n    return $delegate;\r\n    ////////////////////////////////\r\n    \r\n    // Todo: Move this code directly to event handler?\r\n    // Todo: Nothing calls this code!!\r\n    function redirect(event, state, params) {\r\n        let toState = RedirectedStates[state.name];\r\n        if (_.isFunction(toState)) {\r\n            toState = toState(state.name, params);\r\n\r\n            if (_.isNull(toState))\r\n                throw new Error('Redirected toState cannot be null');\r\n        }\r\n\r\n        if (!!toState) {\r\n            $timeout(() => {\r\n                event.preventDefault();\r\n                $delegate.transitionTo(toState, params, {location: 'replace'});\r\n            });\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n// Config function to decorate $state service\r\nfunction addRedirectStateDecorator($provide) {\r\n    \"ngInject\";\r\n\r\n    $provide.decorator('$state', decorateRedirectStateService);\r\n}\r\n\r\nangular\r\n    .module('pipRouting')\r\n    .config(addRedirectStateProviderDecorator)\r\n    .config(addRedirectStateDecorator);\r\n    ","export let RoutingVar: string = \"$routing\";\r\n\r\nfunction hookRoutingEvents(\r\n    $rootScope: ng.IRootScopeService,\r\n    $log: ng.ILogService,\r\n    $state: ng.ui.IStateService\r\n) {\r\n    \"ngInject\";\r\n\r\n    $rootScope.$on('$stateChangeStart',\r\n        (event, toState, toParams, fromState, fromParams) => {\r\n            $rootScope[RoutingVar] = true;\r\n        }\r\n    );\r\n\r\n    $rootScope.$on('$stateChangeSuccess',\r\n        (event, toState, toParams, fromState, fromParams) => {\r\n            // Unset routing variable to disable page transition\r\n            $rootScope[RoutingVar] = false;                \r\n        }\r\n    );\r\n\r\n    // Intercept route error\r\n    $rootScope.$on('$stateChangeError',\r\n        (event, toState, toParams, fromState, fromParams, error) => {\r\n            // Unset routing variable to disable page transition\r\n            $rootScope[RoutingVar] = false;\r\n\r\n            $log.error('Error while switching route to ' + toState.name);\r\n            $log.error(error);\r\n        }\r\n    );\r\n\r\n}\r\n\r\nangular\r\n    .module('pipRouting')\r\n    .run(hookRoutingEvents);\r\n    ","angular.module('pipRouting', ['ui.router']);\r\n\r\nimport './BackDecorator';\r\nimport './RedirectDecorator';\r\nimport './RoutingEvents';\r\n\r\nexport * from './BackDecorator';\r\nexport * from './RoutingEvents';\r\n","import { IIdentityService, IIdentityProvider } from './IIdentityService';\r\n\r\nexport let IdentityRootVar = \"$identity\";\r\nexport let IdentityChangedEvent = \"pipIdentityChanged\";\r\n\r\nclass IdentityService implements IIdentityService {\r\n    private _identity: any;\r\n    private _setRootVar: boolean;\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n\r\n    public constructor(\r\n        setRootVar: boolean,\r\n        identity: any,\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ) {\r\n        this._setRootVar = setRootVar;\r\n        this._identity = identity;\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n\r\n        this.setRootVar();\r\n    }\r\n\r\n    private setRootVar(): void {\r\n        if (this._setRootVar)\r\n            this._rootScope[IdentityRootVar] = this._identity;\r\n    }\r\n\r\n    public get identity(): any {\r\n        return this._identity;\r\n    }\r\n\r\n    public set identity(value: any) {\r\n        this._identity = value;\r\n        this.setRootVar();\r\n        this._rootScope.$emit(IdentityChangedEvent, this._identity);\r\n\r\n        let identity: any = value || {};\r\n        this._log.debug(\"Changed identity to \" + JSON.stringify(identity));\r\n    }\r\n}\r\n\r\nclass IdentityProvider implements IdentityProvider {\r\n    private _setRootVar = true;\r\n    private _identity: any = null;\r\n    private _service: IdentityService = null;\r\n\r\n    public constructor() { }\r\n\r\n    public get setRootVar(): boolean {\r\n        return this._setRootVar;  \r\n    }\r\n\r\n    public set setRootVar(value: boolean) {\r\n        this._setRootVar = !!value;\r\n    }\r\n\r\n    public get identity(): any {\r\n        return this._identity;  \r\n    }\r\n\r\n    public set identity(value: any) {\r\n        this._identity = value;\r\n    }\r\n\r\n    public $get(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ): any {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null)\r\n            this._service = new IdentityService(this._setRootVar, this._identity, $rootScope, $log);\r\n\r\n        return this._service;\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module('pipSession')\r\n    .provider('pipIdentity', IdentityProvider);\r\n","import { ISessionService, ISessionProvider } from './ISessionService';\r\n\r\nexport const SessionRootVar = \"$session\";\r\nexport const SessionOpenedEvent = \"pipSessionOpened\";\r\nexport const SessionClosedEvent = \"pipSessionClosed\";\r\n\r\nclass SessionService implements ISessionService {\r\n    private _setRootVar: boolean;\r\n    private _session: any;\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n\r\n    public constructor(\r\n        setRootVar: boolean, \r\n        session: any, \r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ) {\r\n        this._setRootVar = setRootVar;\r\n        this._session = session;\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n\r\n        this.setRootVar();\r\n    }\r\n    \r\n    private setRootVar(): void {\r\n        if (this._setRootVar)\r\n            this._rootScope[SessionRootVar] = this._session;\r\n    }\r\n\r\n    public get session(): any {\r\n        return this._session;\r\n    }\r\n\r\n    public isOpened(): boolean {\r\n        return this._session != null;\r\n    }\r\n\r\n    public open(session: any, fullReset: boolean = false, partialReset: boolean = false) {\r\n        if (session == null)\r\n            throw new Error(\"Session cannot be null\");\r\n\r\n        this._session = session;\r\n        this.setRootVar();\r\n        this._rootScope.$emit(SessionOpenedEvent, session);\r\n\r\n        this._log.debug(\"Opened session \" + session);\r\n    }\r\n\r\n    public close(fullReset: boolean = false, partialReset: boolean = false) {\r\n        let oldSession = this._session;\r\n\r\n        this._session = null;\r\n        this.setRootVar();\r\n        this._rootScope.$emit(SessionClosedEvent, oldSession);\r\n\r\n        this._log.debug(\"Closed session \" + oldSession);\r\n    }\r\n}\r\n\r\nclass SessionProvider implements ISessionProvider {\r\n    private _setRootVar = true;\r\n    private _session: any = null;\r\n    private _service: SessionService = null;\r\n\r\n    public constructor() { }\r\n\r\n    public get setRootVar(): boolean {\r\n        return this._setRootVar;  \r\n    }\r\n\r\n    public set setRootVar(value: boolean) {\r\n        this._setRootVar = !!value;\r\n    }\r\n\r\n    public get session(): any {\r\n        return this._session;  \r\n    }\r\n\r\n    public set session(value: any) {\r\n        this._session = value;\r\n    }\r\n\r\n    public $get(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ): any {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null)\r\n            this._service = new SessionService(this._setRootVar, this._session, $rootScope, $log);\r\n\r\n        return this._service;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipSession')\r\n    .provider('pipSession', SessionProvider); \r\n","angular.module('pipSession', []);\r\n\r\nimport './IdentityService';\r\nimport './SessionService';\r\n\r\nexport * from './IIdentity';\r\nexport * from './IIdentityService';\r\nexport * from './IdentityService';\r\n\r\nexport * from './ISessionService';\r\nexport * from './SessionService';\r\n","import { TransactionError } from './TransactionError'\r\n\r\nexport class Transaction {\r\n    private _scope: string = null;\r\n    private _id: string = null;\r\n    private _operation: string = null;\r\n    private _error: TransactionError = new TransactionError();\r\n    private _progress: number = 0;\r\n\r\n    public constructor(scope: string) {\r\n        this._scope = scope;\r\n    }\r\n\r\n    public get scope(): string {\r\n        return this._scope;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    public get operation(): string {\r\n        return this._operation;\r\n    }\r\n\r\n    public get progress(): number {\r\n        return this._progress;\r\n    }\r\n\r\n    public get error(): TransactionError {\r\n        return this._error;\r\n    }\r\n\r\n    public get errorMessage(): string {\r\n        return this._error.message;\r\n    }\r\n\r\n    public reset(): void {\r\n        this._id = null;\r\n        this._operation = null;\r\n        this._progress = 0;\r\n        this._error.reset();\r\n    }\r\n\r\n    public busy(): boolean {\r\n        return this._id != null;\r\n    }\r\n\r\n    public failed(): boolean {\r\n        return !this._error.empty();\r\n    }\r\n\r\n    public aborted(id: string): boolean {\r\n        return this._id != id;\r\n    }\r\n\r\n    public begin(operation: string): string {\r\n        // Transaction is already running\r\n        if (this._id != null) return null;\r\n\r\n        this._id = new Date().getTime().toString();\r\n        this._operation = operation || 'PROCESSING'\r\n        this._error.reset();\r\n\r\n        return this._id;\r\n    }\r\n\r\n    public update(progress: number): void {\r\n        this._progress = Math.max(progress, 100);\r\n    }\r\n\r\n    public abort(): void {\r\n        this._id = null;\r\n        this._error.reset();\r\n    }\r\n\r\n    public end(error?: any): void {\r\n        this._error.decode(error);\r\n        this._id = null;\r\n    }\r\n}\r\n","export class TransactionError {\r\n    public code: string;\r\n    public message: string;\r\n    public details: any;\r\n    public cause: string;\r\n    public stack_trace: string;\r\n\r\n    public constructor(error?: any) {\r\n        if (error != null)\r\n            this.decode(error);\r\n    }\r\n\r\n    public reset(): void {\r\n        this.code = null;\r\n        this.message = null;\r\n        this.details = null;\r\n        this.cause = null;\r\n        this.stack_trace = null;\r\n    }\r\n\r\n    public empty(): boolean {\r\n        return this.message = null && this.code == null;\r\n    }\r\n\r\n    public decode(error: any): void {\r\n        this.reset();\r\n\r\n        if (error == null) return;\r\n\r\n        // Process regular messages\r\n        if (error.message) {\r\n            this.message = error.message;\r\n        }\r\n\r\n        // Process server application errors\r\n        if (error.data) {\r\n            if (error.data.code) { \r\n                // process server error codes here\r\n                this.message = this.message || 'ERROR_' + error.data.code;\r\n                this.code = this.code || error.data.code;\r\n            }\r\n\r\n            if (error.data.message) {\r\n                this.message = this.message || error.data.message;\r\n            }\r\n\r\n            this.message = this.message || error.data;\r\n            this.details = this.details || error.data;\r\n\r\n            this.cause = error.data.cause;\r\n            this.stack_trace = error.data.stack_trace;\r\n            this.details = error.data.details;            \r\n        }\r\n\r\n        // Process standard HTTP errors\r\n        if (error.statusText) {\r\n            this.message = this.message || error.statusText;\r\n        }\r\n        if (error.status) {\r\n            this.message = this.message || 'ERROR_' + error.status;\r\n            this.code = this.code || error.status;\r\n        }\r\n        \r\n        this.message = this.message || error;\r\n        this.details = this.details || error;\r\n    }\r\n}\r\n","import { Transaction } from './Transaction';\r\nimport { ITransactionService } from './ITransactionService';\r\n\r\nclass TransactionService implements ITransactionService {\r\n    private _transactions: Transaction = <Transaction>{};\r\n\r\n    public constructor() {}\r\n\r\n    public create(scope?: string): Transaction {\r\n        let transaction: Transaction = new Transaction(scope);\r\n        \r\n        if (scope != null)\r\n            this._transactions[scope] = transaction;\r\n\r\n        return transaction;\r\n    }\r\n\r\n    public get(scope?: string): Transaction {\r\n        let transaction: Transaction = scope != null ? <Transaction>this._transactions[scope] : null;\r\n\r\n        if (transaction == null) {\r\n            transaction = new Transaction(scope);\r\n            if (scope != null)\r\n                this._transactions[scope] = transaction;\r\n        }\r\n\r\n        return transaction;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipTransaction')\r\n    .service('pipTransaction', TransactionService);\r\n","import { ITranslateService } from '../translate/ITranslateService';\r\n\r\nfunction configureTransactionStrings($injector: ng.auto.IInjectorService) {\r\n    \"ngInject\";\r\n\r\n    let pipTranslate: ITranslateService = $injector.has('pipTranslateProvider') \r\n        ? <ITranslateService>$injector.get('pipTranslateProvider') : null;\r\n\r\n    if (pipTranslate) {\r\n        pipTranslate.setTranslations('en', {\r\n            'ENTERING': 'Entering...',\r\n            'PROCESSING': 'Processing...',\r\n            'LOADING': 'Loading...',\r\n            'SAVING': 'Saving...'\r\n        });\r\n\r\n        pipTranslate.setTranslations('ru', {\r\n            'ENTERING': 'Вход в систему...',\r\n            'PROCESSING': 'Обрабатывается...',\r\n            'LOADING': 'Загружается...',\r\n            'SAVING': 'Сохраняется...'\r\n        });   \r\n    }\r\n    \r\n}\r\n\r\nangular\r\n    .module('pipTransaction')\r\n    .config(configureTransactionStrings);\r\n","angular.module('pipTransaction', []);\r\n\r\nimport './TransactionStrings';\r\nimport './TransactionError';\r\nimport './Transaction';\r\nimport './TransactionService';\r\n\r\nexport * from './TransactionError';\r\nexport * from './Transaction';\r\nexport * from './ITransactionService';\r\n","import { ITranslateService } from '../translate/ITranslateService';\r\n\r\nfunction translateDirective(pipTranslate): ng.IDirective {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: 'EA',\r\n        scope: {\r\n            key1: '@pipTranslate',\r\n            key2: '@key'\r\n        },\r\n        link: (scope: any, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {\r\n            let key: string = scope.key1 || scope.key2;\r\n            let value: string = pipTranslate.translate(key);\r\n            element.text(value);\r\n        }\r\n    };\r\n}\r\n\r\nfunction translateHtmlDirective(pipTranslate: ITranslateService): ng.IDirective {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: 'EA',\r\n        scope: {\r\n            key1: '@pipTranslateHtml',\r\n            key2: '@key'\r\n        },\r\n        link: (scope: any, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {\r\n            let key: string = scope.key1 || scope.key2;\r\n            let value: string = pipTranslate.translate(key);\r\n            element.html(value);\r\n        }\r\n    };\r\n}\r\n\r\nangular\r\n    .module('pipTranslate')\r\n    .directive('pipTranslate', translateDirective)\r\n    .directive('pipTranslateHtml', translateHtmlDirective);\r\n","import { ITranslateService } from './ITranslateService';\r\n\r\nfunction translateFilter(pipTranslate: ITranslateService) {\r\n    \"ngInject\";\r\n\r\n    return function (key: string) {\r\n        return pipTranslate.translate(key) || key;\r\n    }\r\n}\r\n\r\nfunction optionalTranslateFilter($injector: ng.auto.IInjectorService) {\r\n    \"ngInject\";\r\n\r\n    let pipTranslate: ITranslateService = $injector.has('pipTranslate') \r\n        ? <ITranslateService>$injector.get('pipTranslate') : null;\r\n\r\n    return function (key: string) {\r\n        return pipTranslate  ? pipTranslate.translate(key) || key : key;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipTranslate')\r\n    .filter('translate', translateFilter);\r\n","﻿import { Translation } from './Translation';\r\nimport { ResetPageEvent } from '../utilities/PageResetService';\r\nimport { ITranslateService, ITranslateProvider } from './ITranslateService';\r\n\r\nexport let LanguageRootVar = \"$language\";\r\nexport let LanguageChangedEvent = \"pipLanguageChanged\";    \r\n\r\nclass TranslateService implements ITranslateService {\r\n    private _translation: Translation;\r\n    private _setRootVar: boolean;\r\n    private _persist: boolean;\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n    private _window: ng.IWindowService;\r\n    private _mdDateLocale: angular.material.IDateLocaleProvider;\r\n\r\n    public constructor(\r\n        translation: Translation,\r\n        setRootVar: boolean,\r\n        persist: boolean,\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService,\r\n        $window: ng.IWindowService,\r\n        $mdDateLocale: angular.material.IDateLocaleProvider,\r\n    ) {\r\n        this._setRootVar = setRootVar;\r\n        this._persist = persist;\r\n        this._translation = translation;\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n        this._window = $window;\r\n        this._mdDateLocale = $mdDateLocale;\r\n\r\n        if (this._persist && this._window.localStorage)\r\n            this._translation.language = this._window.localStorage.getItem('language') || this._translation.language;\r\n\r\n        this._log.debug(\"Set language to \" + this._translation.language);\r\n\r\n        this.save();\r\n    }\r\n\r\n    private changeLocale(locale: string) {\r\n        if (!locale) return;\r\n\r\n        // var localeDate: moment.MomentLanguageData;\r\n        var localeDate: any;\r\n\r\n        moment.locale(locale);\r\n        localeDate = moment.localeData();\r\n\r\n        this._mdDateLocale.months = angular.isArray(localeDate._months) ? localeDate._months : localeDate._months.format;\r\n        this._mdDateLocale.shortMonths = angular.isArray(localeDate._monthsShort) ? localeDate._monthsShort : localeDate._monthsShort.format;\r\n        this._mdDateLocale.days = angular.isArray(localeDate._weekdays) ? localeDate._weekdays : localeDate._weekdays.format;\r\n        this._mdDateLocale.shortDays = localeDate._weekdaysMin;\r\n        this._mdDateLocale.firstDayOfWeek = localeDate._week.dow;\r\n    }\r\n\r\n    private save(): void {\r\n        if (this._setRootVar)\r\n            this._rootScope[LanguageRootVar] = this._translation.language;\r\n\r\n        if (this._persist && this._window.localStorage != null)\r\n            this._window.localStorage.setItem('language', this._translation.language);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this._translation.language;\r\n    }\r\n\r\n    public set language(value: string) {\r\n        if (value != this._translation.language) {\r\n            this._translation.language = value;\r\n            \r\n            this._log.debug(\"Changing language to \" + value);\r\n\r\n            this.changeLocale(this._translation.language);\r\n            this.save();   \r\n\r\n            this._rootScope.$emit(LanguageChangedEvent, value);\r\n            this._rootScope.$emit(ResetPageEvent);\r\n        }\r\n    }\r\n\r\n    public use(language: string): string {\r\n        if (language != null)\r\n            this.language = language;\r\n        return this.language;\r\n    }\r\n\r\n    public setTranslations(language: string, translations: any): void {\r\n        return this._translation.setTranslations(language, translations);\r\n    }\r\n\r\n    public translations(language: string, translations: any): void {\r\n        return this._translation.setTranslations(language, translations);\r\n    }\r\n\r\n    public translate(key: string): string {\r\n        return this._translation.translate(key);\r\n    }\r\n\r\n    public translateArray(keys: string[]): string[] {\r\n        return this._translation.translateArray(keys);\r\n    }\r\n    \r\n    public translateSet(keys: string[], keyProp: string, valueProp: string): any[] {\r\n        return this._translation.translateSet(keys, keyProp, valueProp);\r\n    }\r\n\r\n    public translateObjects(items: any[], keyProp: string, valueProp: string): any[] {\r\n        return this._translation.translateObjects(items, keyProp, valueProp);\r\n    }\r\n\r\n    public translateWithPrefix(prefix: string, key: string) {\r\n        return this._translation.translateWithPrefix(prefix, key);\r\n    }\r\n\r\n    public translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        return this._translation.translateSetWithPrefix(prefix, keys, keyProp, valueProp);\r\n    }\r\n\r\n    public translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        return this._translation.translateSetWithPrefix2(prefix, keys, keyProp, valueProp);\r\n    }\r\n}\r\n\r\nclass TranslateProvider extends Translation implements ITranslateProvider {\r\n    private _translation: Translation;\r\n    private _setRootVar: boolean = true;\r\n    private _persist: boolean = true;\r\n    private _service: TranslateService;\r\n    \r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public get setRootVar(): boolean {\r\n        return this._setRootVar;  \r\n    }\r\n\r\n    public set setRootVar(value: boolean) {\r\n        this._setRootVar = !!value;\r\n    }\r\n\r\n    public get persist(): boolean {\r\n        return this._persist;  \r\n    }\r\n\r\n    public set persist(value: boolean) {\r\n        this._persist = !!value;\r\n    }\r\n\r\n    public $get(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService, \r\n        $window: ng.IWindowService,\r\n        $mdDateLocale: angular.material.IDateLocaleProvider\r\n    ): any {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null) \r\n            this._service = new TranslateService(this, this._setRootVar, this._persist, $rootScope, $log, $window, $mdDateLocale);\r\n\r\n        return this._service;\r\n    }\r\n}\r\n\r\nfunction initTranslate(pipTranslate: ITranslateService) {\r\n    pipTranslate.language;\r\n}\r\n\r\nangular\r\n    .module('pipTranslate')\r\n    .provider('pipTranslate', TranslateProvider)\r\n    .run(initTranslate);\r\n","export class Translation {\r\n    protected _language: string = 'en';\r\n    protected _translations = {\r\n        en: {\r\n            'en': 'English',\r\n            'ru': 'Russian',\r\n            'es': 'Spanish',\r\n            'pt': 'Portuguese',\r\n            'de': 'German',\r\n            'fr': 'French'\r\n        },\r\n        ru: {\r\n            'en': 'Английский',\r\n            'ru': 'Русский',\r\n            'es': 'Испанский',\r\n            'pt': 'Португальский',\r\n            'de': 'Немецкий',\r\n            'fr': 'Французский'\r\n        }\r\n    };\r\n\r\n    public constructor() {}\r\n\r\n    public get language(): string { return this._language; }\r\n    public set language(value: string) { this._language = value; }\r\n\r\n    public use(language: string): string {\r\n        if (language != null)\r\n            this._language = language;\r\n        return this._language;\r\n    }\r\n\r\n    // Set translation strings for specific language\r\n    public setTranslations(language: string, translations: any): void {\r\n        let map = this._translations[language] || {};\r\n        this._translations[language] = _.extend(map, translations);\r\n    }\r\n\r\n    // Yet another method to set translation strings for specific language\r\n    public translations(language: string, translations: any): void {\r\n        this.setTranslations(language, translations);\r\n    }\r\n\r\n    // Translate a string by key using set language\r\n    public translate(key: string): string {\r\n        if (_.isNull(key) || _.isUndefined(key)) return '';\r\n\r\n        let translations = this._translations[this._language] || {};\r\n        return translations[key] || key;\r\n    }\r\n\r\n    // Translate an array of strings\r\n    public translateArray(keys: string[]): string[] {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        let values: string[] = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (k: string) {\r\n            let key = k || '';\r\n            values.push(translations[key] || key);\r\n        });\r\n\r\n        return values;\r\n    }\r\n\r\n    // Translate an array of strings into array of objects (set)\r\n    public translateSet(keys: string[], keyProp: string, valueProp: string): any[] {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        keyProp = keyProp || 'id';\r\n        valueProp = valueProp || 'name';\r\n\r\n        let values: any[] = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (key: string) {\r\n            let value: any = {};\r\n            key = key || '';\r\n\r\n            value[keyProp] = key;\r\n            value[valueProp] = translations[key] || key;\r\n\r\n            values.push(value);\r\n        });\r\n\r\n        return values;\r\n    }\r\n\r\n    // Translate a collection of objects\r\n    public translateObjects(items: any[], keyProp: string, valueProp: string): any[] {\r\n        if (_.isNull(items) || items.length == 0) return [];\r\n\r\n        keyProp = keyProp || 'name';\r\n        valueProp = valueProp || 'nameLocal';\r\n\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(items, function (item: any) {\r\n            let key = item[keyProp] || '';\r\n\r\n            item[valueProp] = translations[key] || key;\r\n        });\r\n\r\n        return items;\r\n    }\r\n\r\n    // Translate a string by key  with prefix using set language todo\r\n    public translateWithPrefix(prefix: string, key: string) {\r\n        prefix = prefix ? prefix + '_' : '';\r\n        key = (prefix + key).replace(/ /g, '_').toUpperCase();\r\n        if (key == null) return '';\r\n        let translations = this._translations[this._language] || {};\r\n        return translations[key] || key;\r\n    };\r\n\r\n    public translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        prefix = prefix ? prefix.replace(/ /g, '_').toUpperCase() : '';\r\n        keyProp = keyProp || 'id';\r\n        valueProp = valueProp || 'name';\r\n\r\n        let values = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (key: string) {\r\n            let value: any = {}; \r\n            key = key || '';\r\n\r\n            value[keyProp] = key;\r\n            value[valueProp] = translations[prefix + '_' + key] || key;\r\n\r\n            values.push(value);\r\n        });\r\n\r\n        return values;\r\n    }\r\n\r\n    // Translate an array of strings, apply uppercase and replace ' ' => '_'\r\n    public translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        keyProp = keyProp || 'id';\r\n        valueProp = valueProp || 'name';\r\n        prefix = prefix ? prefix.replace(/ /g, '_').toUpperCase() + '_': '';\r\n\r\n        let values = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (key: string) {\r\n            let value: any = {};\r\n            key = key || '';\r\n\r\n            value[keyProp] = key;\r\n            value[valueProp] = translations[prefix + key.replace(/ /g, '_').toUpperCase()]\r\n                || (prefix + key.replace(/ /g, '_').toUpperCase());\r\n\r\n            values.push(value);\r\n        });\r\n\r\n        return values;\r\n    }\r\n}\r\n","angular.module('pipTranslate', []);\r\n\r\nimport './Translation';\r\nimport './TranslateService';\r\nimport './TranslateFilter';\r\nimport './TranslateDirective';\r\n\r\nexport * from './Translation';\r\nexport * from './ITranslateService';\r\nexport * from './TranslateService';\r\n","import { ICodes } from './ICodes';\r\n\r\nclass Codes implements ICodes {\r\n    // Simple version of string hashcode\r\n    public hash(value: string): number {\r\n        if (value == null) return 0;\r\n        \r\n        let result: number = 0;\r\n        for (let i = 0; i < value.length; i++)\r\n            result += value.charCodeAt(i);\r\n\r\n        return result;\r\n    }\r\n\r\n    // Generates random big number for verification codes\r\n    public verification(): string {\r\n        return Math.random().toString(36).substr(2, 10).toUpperCase(); // remove `0.`\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipCodes', [])\r\n    .service('pipCodes', Codes);\r\n","import { IFormat } from './IFormat';\r\n\r\nclass Format implements IFormat {\r\n    // Cached for parsed formats\r\n    private cache = {};\r\n\r\n    // Creates a sample line from a text\r\n    public sample(value: string, maxLength: number): string {\r\n        if (!value || value == '') {\r\n            return '';\r\n        }\r\n\r\n        var length: number = value.indexOf('\\n');\r\n        length = length >= 0 ? length : value.length;\r\n        length = length < maxLength ? value.length : maxLength;\r\n\r\n        return value.substring(0, length);\r\n    }\r\n\r\n    private strRepeat(str: string, qty: number): string {\r\n        if (qty < 1) { \r\n            return '';\r\n        }\r\n        var result: string = '';\r\n        while (qty > 0) {\r\n            if (qty & 1) result += str;\r\n            qty >>= 1, str += str;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private getType(variable): string {\r\n        return toString.call(variable).slice(8, -1).toLowerCase();\r\n    }\r\n\r\n    private parseFormat(fmt: string): any {\r\n        let _fmt: string = fmt, match = [], parse_tree = [], arg_names: number = 0;\r\n        while (_fmt) {\r\n            if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\r\n                parse_tree.push(match[0]);\r\n            }\r\n            else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\r\n                parse_tree.push('%');\r\n            }\r\n            else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\r\n                if (match[2]) {\r\n                    arg_names |= 1;\r\n                    let field_list: string[] = [], replacement_field: string = match[2], field_match: string[] = [];\r\n                    if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\r\n                        field_list.push(field_match[1]);\r\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\r\n                            if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\r\n                                field_list.push(field_match[1]);\r\n                            }\r\n                            else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\r\n                                field_list.push(field_match[1]);\r\n                            }\r\n                            else {\r\n                                throw new Error('Unknown error');\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new Error('Unknown error');\r\n                    }\r\n                    match[2] = field_list;\r\n                }\r\n                else {\r\n                    arg_names |= 2;\r\n                }\r\n                if (arg_names === 3) {\r\n                    throw new Error('Mixing positional and named placeholders is not (yet) supported');\r\n                }\r\n                parse_tree.push(match);\r\n            }\r\n            else {\r\n                throw new Error('Unknown error');\r\n            }\r\n            _fmt = _fmt.substring(match[0].length);\r\n        }\r\n        return parse_tree;\r\n    }\r\n\r\n    private format(parse_tree: any, argv: any): string {\r\n        let cursor: number = 0; \r\n        let tree_length: number = parse_tree.length; \r\n        let output = [];\r\n\r\n        for (let i = 0; i < tree_length; i++) {\r\n            let node_type = this.getType(parse_tree[i]);\r\n            if (node_type === 'string') {\r\n                output.push(parse_tree[i]);\r\n            }\r\n            else if (node_type === 'array') {\r\n                let match = parse_tree[i]; // convenience purposes only\r\n                let arg: any;\r\n                if (match[2]) { // keyword argument\r\n                    arg = argv[cursor];\r\n                    for (let k = 0; k < match[2].length; k++) {\r\n                        if (!arg.hasOwnProperty(match[2][k])) {\r\n                            throw new Error(this.sprintf('Property \"%s\" does not exist', match[2][k]));\r\n                        }\r\n                        arg = arg[match[2][k]];\r\n                    }\r\n                } else if (match[1]) { // positional argument (explicit)\r\n                    arg = argv[match[1]];\r\n                }\r\n                else { // positional argument (implicit)\r\n                    arg = argv[cursor++];\r\n                }\r\n\r\n                if (/[^s]/.test(match[8]) && (this.getType(arg) != 'number')) {\r\n                    throw new Error(this.sprintf('Expecting number but found %s', this.getType(arg)));\r\n                }\r\n                switch (match[8]) {\r\n                    case 'b': arg = arg.toString(2); break;\r\n                    case 'c': arg = String.fromCharCode(arg); break;\r\n                    case 'd': arg = parseInt(arg, 10); break;\r\n                    case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\r\n                    case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\r\n                    case 'o': arg = arg.toString(8); break;\r\n                    case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\r\n                    case 'u': arg = Math.abs(arg); break;\r\n                    case 'x': arg = arg.toString(16); break;\r\n                    case 'X': arg = arg.toString(16).toUpperCase(); break;\r\n                }\r\n                arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);                \r\n                let pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\r\n                let pad_length = match[6] - String(arg).length;\r\n                let pad = match[6] ? this.strRepeat(pad_character, pad_length) : '';\r\n                output.push(match[5] ? arg + pad : pad + arg);\r\n            }\r\n        }\r\n        return output.join('');\r\n    }\r\n    \r\n    public sprintf(message: string, ...args: any[]): string {\r\n        if (!this.cache.hasOwnProperty(message))\r\n            this.cache[message] = this.parseFormat(message);\r\n\r\n        return this.format(this.cache[message], args);\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('pipFormat', [])\r\n    .service('pipFormat', Format);\r\n","import { IPageResetService } from './IPageResetService';\r\n\r\n\r\nexport let ResetPageEvent: string = \"pipResetPage\";\r\nexport let ResetAreaEvent: string = \"pipResetArea\";\r\n\r\nexport let ResetRootVar: string = \"$reset\";\r\nexport let ResetAreaRootVar: string = \"$resetArea\";\r\n\r\n\r\nclass PageResetService implements IPageResetService {\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n    private _timeout: ng.ITimeoutService;\r\n\r\n    public constructor(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService, \r\n        $timeout: ng.ITimeoutService\r\n    ) {\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n        this._timeout = $timeout;\r\n\r\n        $rootScope[ResetRootVar] = false;\r\n        $rootScope[ResetAreaRootVar] = null;\r\n    }\r\n\r\n    public reset(): void {\r\n        this._log.debug(\"Resetting the entire page\");\r\n        this.performReset(null);\r\n    }\r\n\r\n    public resetArea(area: string): void {\r\n        this._log.debug(\"Resetting the area \" + area);\r\n        this.performReset(area);\r\n    }\r\n\r\n    private performReset(area?: string): void {\r\n        this._rootScope[ResetRootVar] = area == null;\r\n        this._rootScope[ResetAreaRootVar] = area;\r\n\r\n        this._timeout(() => {\r\n            this._rootScope[ResetRootVar] = false;\r\n            this._rootScope[ResetAreaRootVar] = null;\r\n        }, 0);\r\n    }\r\n}\r\n\r\n\r\nfunction hookResetEvents(\r\n    $rootScope: ng.IRootScopeService, \r\n    pipPageReset: IPageResetService\r\n) {\r\n    $rootScope.$on(ResetPageEvent, () => { pipPageReset.reset(); });\r\n    $rootScope.$on(ResetAreaEvent, (event, area) => { pipPageReset.resetArea(area); });\r\n}\r\n\r\n\r\nangular.module('pipPageReset', [])\r\n    .service('pipPageReset', PageResetService)\r\n    .run(hookResetEvents);\r\n","import { IScrollService } from './IScrollService';\r\n\r\n\r\nclass ScrollService implements IScrollService {\r\n\r\n    public scrollTo(parentElement, childElement, animationDuration): void {\r\n        if (!parentElement || !childElement) return;\r\n        if (animationDuration == undefined) animationDuration = 300;\r\n\r\n        setTimeout(function () {\r\n            if (!$(childElement).position()) return;\r\n            var modDiff= Math.abs($(parentElement).scrollTop() - $(childElement).position().top);\r\n            if (modDiff < 20) return;\r\n            var scrollTo = $(parentElement).scrollTop() + ($(childElement).position().top - 20);\r\n            if (animationDuration > 0)\r\n                $(parentElement).animate({\r\n                    scrollTop: scrollTo + 'px'\r\n                }, animationDuration);\r\n        }, 100);\r\n    }\r\n\r\n}\r\n\r\n\r\nangular\r\n    .module('pipScroll', [])\r\n    .service('pipScroll', ScrollService);\r\n","import { ISystemInfo } from './ISystemInfo';\r\n\r\n\r\nclass SystemInfo implements ISystemInfo {\r\n    private _window: ng.IWindowService;\r\n\r\n    public constructor($window: ng.IWindowService) {\r\n        \"ngInject\";\r\n\r\n        this._window = $window;\r\n    }\r\n\r\n    // todo add support for iPhone\r\n    public get browserName(): string {\r\n        let ua = this._window.navigator.userAgent;\r\n\r\n        if (ua.search(/Edge/) > -1) return \"edge\";\r\n        if (ua.search(/MSIE/) > -1) return \"ie\";\r\n        if (ua.search(/Trident/) > -1) return \"ie\";\r\n        if (ua.search(/Firefox/) > -1) return \"firefox\";\r\n        if (ua.search(/Opera/) > -1) return \"opera\";\r\n        if (ua.search(/OPR/) > -1) return \"opera\";\r\n        if (ua.search(/YaBrowser/) > -1) return \"yabrowser\";\r\n        if (ua.search(/Chrome/) > -1) return \"chrome\";\r\n        if (ua.search(/Safari/) > -1) return \"safari\";\r\n        if (ua.search(/Maxthon/) > -1) return \"maxthon\";\r\n        \r\n        return \"unknown\";\r\n    }\r\n\r\n    public get browserVersion(): string {\r\n        let version;\r\n        let ua = this._window.navigator.userAgent;\r\n        let browser = this.browserName;\r\n\r\n        switch (browser) {\r\n            case \"edge\":\r\n                version = (ua.split(\"Edge\")[1]).split(\"/\")[1];\r\n                break;\r\n            case \"ie\":\r\n                version = (ua.split(\"MSIE \")[1]).split(\";\")[0];\r\n                break;\r\n            case \"ie11\":\r\n                browser = \"ie\";\r\n                version = (ua.split(\"; rv:\")[1]).split(\")\")[0];\r\n                break;\r\n            case \"firefox\":\r\n                version = ua.split(\"Firefox/\")[1];\r\n                break;\r\n            case \"opera\":\r\n                version = ua.split(\"Version/\")[1];\r\n                break;\r\n            case \"operaWebkit\":\r\n                version = ua.split(\"OPR/\")[1];\r\n                break;\r\n            case \"yabrowser\":\r\n                version = (ua.split(\"YaBrowser/\")[1]).split(\" \")[0];\r\n                break;\r\n            case \"chrome\":\r\n                version = (ua.split(\"Chrome/\")[1]).split(\" \")[0];\r\n                break;\r\n            case \"safari\":\r\n                version = (ua.split(\"Version/\")[1]).split(\" \")[0];\r\n                break;\r\n            case \"maxthon\":\r\n                version = ua.split(\"Maxthon/\")[1];\r\n                break;\r\n        }\r\n\r\n        return version;\r\n    }\r\n    \r\n    public get platform(): string {\r\n        let ua = this._window.navigator.userAgent;\r\n\r\n        if (/iphone|ipad|ipod|android|blackberry|mini|windows\\sce|palm/i.test(ua.toLowerCase())) \r\n            return 'mobile';\r\n\r\n        return 'desktop';\r\n    }\r\n\r\n    public get os(): string {\r\n        let ua = this._window.navigator.userAgent;\r\n\r\n        try {\r\n            let osAll = (/(windows|mac|android|linux|blackberry|sunos|solaris|iphone)/.exec(ua.toLowerCase()) || [ua])[0].replace('sunos', 'solaris');\r\n            let osAndroid = (/(android)/.exec(ua.toLowerCase()) || '');\r\n            return osAndroid && (osAndroid == 'android' || (osAndroid[0] == 'android')) ? 'android' : osAll;\r\n        } catch (err) {\r\n            return 'unknown'\r\n        }\r\n    }\r\n\r\n    public isDesktop(): boolean {\r\n        return this.platform == 'desktop';\r\n    }\r\n\r\n    public isMobile(): boolean {\r\n        return this.platform == 'mobile';\r\n    }\r\n\r\n    // Todo: complete implementation\r\n    public isCordova(): boolean {\r\n        return false;\r\n    }\r\n\r\n    // Todo: Move to errors\r\n    public isSupported(supported?: any): boolean {\r\n        if (!supported) \r\n            supported = {\r\n                edge: 11,\r\n                ie: 11,\r\n                firefox: 43, //4, for testing\r\n                opera: 35,\r\n                chrome: 47\r\n            };\r\n\r\n        let browser = this.browserName;\r\n        let version = this.browserVersion;\r\n        version = version.split(\".\")[0]\r\n\r\n        if (browser && supported[browser] && version >= supported[browser]) \r\n            return true;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('pipSystemInfo', [])\r\n    .service('pipSystemInfo', SystemInfo);\r\n","import { ITags } from './ITags';\r\n\r\nclass Tags implements ITags {\r\n\r\n    public normalizeOne(tag: string): string {\r\n        return tag \r\n            ? _.trim(tag.replace(/(_|#)+/g, ' '))\r\n            : null;\r\n    }\r\n\r\n    public compressOne(tag: string): string {\r\n        return tag\r\n            ? tag.replace(/( |_|#)/g, '').toLowerCase()\r\n            : null;\r\n    }\r\n\r\n    public equal(tag1: string, tag2: string): boolean {\r\n        if (tag1 == null && tag2 == null)\r\n            return true;\r\n        if (tag1 == null || tag2 == null)\r\n            return false;\r\n        return this.compressOne(tag1) == this.compressOne(tag2);\r\n    }\r\n\r\n    public normalizeAll(tags: any): string[] {\r\n        if (_.isString(tags))\r\n            tags = tags.split(/( |,|;)+/);\r\n\r\n        tags = _.map(tags, (tag: string) => this.normalizeOne(tag));\r\n\r\n        return tags;\r\n    }\r\n\r\n    public compressAll(tags: any): string[] {\r\n        if (_.isString(tags))\r\n            tags = tags.split(/( |,|;)+/);\r\n\r\n        tags = _.map(tags, (tag: string) => this.compressOne(tag));\r\n\r\n        return tags;\r\n    }\r\n\r\n    public extract(entity: any, searchFields?: string[]): string[] {\r\n        let tags = this.normalizeAll(entity.tags);\r\n\r\n        _.each(searchFields, (field) => {\r\n            let text = entity[field] || '';\r\n\r\n            if (text != '') {\r\n                let hashTags = text.match(/#\\w+/g);\r\n                tags = tags.concat(this.normalizeAll(hashTags));\r\n            }\r\n        });\r\n\r\n        return _.uniq(tags);\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('pipTags', [])\r\n    .service('pipTags', Tags);\r\n","import { ITimerService } from './ITimerService';\r\n\r\nclass TimerEvent {\r\n    public event: string;\r\n    public timeout: number;\r\n    public interval: any;\r\n\r\n    public constructor(event: string, timeout: number) {\r\n        this.event = event;\r\n        this.timeout = timeout;\r\n    }\r\n}\r\n\r\n\r\nlet DefaultEvents: TimerEvent[] = [\r\n    new TimerEvent('pipAutoPullChanges', 60000), // 1 min\r\n    new TimerEvent('pipAutoUpdatePage', 15000), // 15 sec\r\n    new TimerEvent('pipAutoUpdateCollection', 300000) // 5 min\r\n];\r\n\r\n\r\nclass TimerService implements ITimerService {\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n    private _interval: ng.IIntervalService;        \r\n    private _started = false;\r\n    private _events: TimerEvent[] = _.cloneDeep(DefaultEvents);\r\n\r\n    public constructor(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService, \r\n        $interval: ng.IIntervalService\r\n    ) {\r\n        \"ngInject\";\r\n\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n        this._interval = $interval;\r\n    }\r\n\r\n    public isStarted(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    public addEvent(event: string, timeout: number): void {\r\n        var existingEvent = _.find(this._events, (e) => e.event == event);\r\n        if (existingEvent != null) return;\r\n\r\n        let newEvent = <TimerEvent> {\r\n            event: event,\r\n            timeout: timeout\r\n        };\r\n        this._events.push(newEvent);\r\n\r\n        if (this._started)\r\n            this.startEvent(newEvent);\r\n    }\r\n\r\n    public removeEvent(event: string): void {\r\n        for (let i = this._events.length - 1; i >= 0; i--) {\r\n            let existingEvent = this._events[i];\r\n            if (existingEvent.event == event) {\r\n                this.stopEvent(existingEvent);\r\n                this._events.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    public clearEvents(): void {\r\n        this.stop();\r\n        this._events = [];\r\n    }\r\n\r\n    private startEvent(event: TimerEvent): void {\r\n        event.interval = this._interval(\r\n            () => { \r\n                this._log.debug('Generated timer event ' + event.event); \r\n                this._rootScope.$emit(event.event)\r\n            },\r\n            event.timeout\r\n        )\r\n    }\r\n\r\n    private stopEvent(event: TimerEvent): void {\r\n        if (event.interval != null) {\r\n            try {\r\n                this._interval.cancel(event.interval);\r\n            } catch (ex) {\r\n                // Do nothing\r\n            }\r\n            event.interval = null;\r\n        }\r\n    }\r\n\r\n    public start(): void {\r\n        if (this._started) return;\r\n\r\n        _.each(this._events, (event) => {\r\n            this.startEvent(event);\r\n        });\r\n\r\n        this._started = true;\r\n    }\r\n\r\n    public stop(): void {\r\n        _.each(this._events, (event) => {\r\n            this.stopEvent(event);\r\n        });\r\n\r\n        this._started = false;\r\n    }\r\n}\r\n\r\n\r\nangular.module('pipTimer', [])\r\n    .service('pipTimer', TimerService);\r\n","import './Format';\r\nimport './TimerService';\r\nimport './ScrollService';\r\nimport './Tags';\r\nimport './Codes';\r\nimport './SystemInfo';\r\nimport './PageResetService';\r\n\r\nexport * from './IFormat';\r\nexport * from './ITimerService';\r\nexport * from './IScrollService';\r\nexport * from './ITags';\r\nexport * from './ICodes';\r\nexport * from './ISystemInfo';\r\nexport * from './IPageResetService';"]}