{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/index.ts","src/routing/BackDecorator.ts","src/routing/RedirectDecorator.ts","src/routing/RoutingEvents.ts","src/routing/index.ts","src/session/IdentityService.ts","src/session/SessionService.ts","src/session/index.ts","src/transactions/Transaction.ts","src/transactions/TransactionError.ts","src/transactions/TransactionService.ts","src/transactions/TransactionStrings.ts","src/transactions/index.ts","src/translate/TranslateDirective.ts","src/translate/TranslateFilter.ts","src/translate/TranslateService.ts","src/translate/Translation.ts","src/translate/index.ts","src/utilities/Codes.ts","src/utilities/Format.ts","src/utilities/PageResetService.ts","src/utilities/ScrollService.ts","src/utilities/SystemInfo.ts","src/utilities/Tags.ts","src/utilities/TimerService.ts","src/utilities/index.ts"],"names":[],"mappings":"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","file":"pip-webui-services.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿import './translate';\r\nimport './session';\r\nimport './transactions';\r\nimport './routing';\r\nimport './utilities';\r\n\r\nangular.module('pipServices', [\r\n    'pipTranslate',\r\n    'pipSession',\r\n    'pipTransaction',\r\n    'pipRouting',\r\n    'pipFormat',\r\n    'pipTimer',\r\n    'pipScroll',\r\n    'pipTags',\r\n    'pipCodes',\r\n    'pipSystemInfo',\r\n    'pipPageReset'\r\n]);\r\n\r\nexport * from './translate';\r\nexport * from './session';\r\nexport * from './transactions';\r\nexport * from './routing';\r\nexport * from './utilities';\r\n","export let CurrentState: any;\r\nexport let PreviousState: any;\r\n\r\n// Run function to set CurrentState and PreviousState global variables\r\nfunction captureStateTranslations($rootScope: ng.IRootScopeService) {\r\n    \"ngInject\";\r\n\r\n    $rootScope.$on('$stateChangeSuccess',\r\n        (event, toState, toParams, fromState, fromParams) => {\r\n            CurrentState = {\r\n                name: toState.name, \r\n                url: toState.url, \r\n                params: toParams\r\n            };\r\n\r\n            PreviousState = {\r\n                name: fromState.name, \r\n                url: fromState.url, \r\n                params: fromParams\r\n            };\r\n        }\r\n    );\r\n\r\n}\r\n\r\n// Decorator function to modify $state service by adding goBack and goBackAndSelect methods\r\nfunction decorateBackStateService($delegate: any, $window: ng.IWindowService): any {\r\n    \"ngInject\";\r\n\r\n    $delegate.goBack = goBack;\r\n    $delegate.goBackAndSelect = goBackAndSelect;\r\n\r\n    return $delegate;\r\n    //////////////////////////////////////////////////\r\n\r\n    function goBack(): void {\r\n        $window.history.back()\r\n    }\r\n\r\n    function goBackAndSelect(params: any): void {\r\n        // todo: define end fix PreviousState\r\n        if (PreviousState != null \r\n            && PreviousState.name != null) {\r\n\r\n            let state = _.cloneDeep(PreviousState);\r\n\r\n            // Override selected parameters\r\n            state.params = _.extend(state.params, params);\r\n\r\n            $delegate.go(state.name, state.params);\r\n        } else {\r\n            $window.history.back();\r\n        }\r\n    }\r\n}\r\n\r\n// Config function to decorate $state service\r\nfunction addBackStateDecorator($provide) {\r\n    $provide.decorator('$state', decorateBackStateService);\r\n}\r\n\r\nangular\r\n    .module('pipRouting')\r\n    .config(addBackStateDecorator)\r\n    .run(captureStateTranslations);\r\n    ","let RedirectedStates: any = {};\r\n\r\n// Decorator function to add $stateProvider redirect method\r\nfunction decorateRedirectStateProvider($delegate) {\r\n    \"ngInject\";\r\n\r\n    $delegate.redirect = redirect;\r\n\r\n    return $delegate;\r\n    /////////////////////////////////////////////\r\n\r\n    // Specify automatic redirect from one state to another\r\n    function redirect(fromState, toState) {\r\n        RedirectedStates[fromState] = toState;  \r\n        return this;\r\n    }\r\n}\r\n\r\n// Config function to decorate $state provider\r\nfunction addRedirectStateProviderDecorator($provide) {\r\n    \"ngInject\";\r\n\r\n    $provide.decorator('$state', decorateRedirectStateProvider);\r\n}\r\n\r\n// Decorator function to add redirect method to $state service\r\nfunction decorateRedirectStateService($delegate, $timeout) {\r\n    \"ngInject\";\r\n\r\n    $delegate.redirect = redirect;\r\n    \r\n    return $delegate;\r\n    ////////////////////////////////\r\n    \r\n    // Todo: Move this code directly to event handler?\r\n    // Todo: Nothing calls this code!!\r\n    function redirect(event, state, params) {\r\n        let toState = RedirectedStates[state.name];\r\n        if (_.isFunction(toState)) {\r\n            toState = toState(state.name, params);\r\n\r\n            if (_.isNull(toState))\r\n                throw new Error('Redirected toState cannot be null');\r\n        }\r\n\r\n        if (!!toState) {\r\n            $timeout(() => {\r\n                event.preventDefault();\r\n                $delegate.transitionTo(toState, params, {location: 'replace'});\r\n            });\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n// Config function to decorate $state service\r\nfunction addRedirectStateDecorator($provide) {\r\n    \"ngInject\";\r\n\r\n    $provide.decorator('$state', decorateRedirectStateService);\r\n}\r\n\r\nangular\r\n    .module('pipRouting')\r\n    .config(addRedirectStateProviderDecorator)\r\n    .config(addRedirectStateDecorator);\r\n    ","export let RoutingVar: string = \"$routing\";\r\n\r\nfunction hookRoutingEvents(\r\n    $rootScope: ng.IRootScopeService,\r\n    $log: ng.ILogService,\r\n    $state: ng.ui.IStateService\r\n) {\r\n    \"ngInject\";\r\n\r\n    $rootScope.$on('$stateChangeStart',\r\n        (event, toState, toParams, fromState, fromParams) => {\r\n            $rootScope[RoutingVar] = true;\r\n        }\r\n    );\r\n\r\n    $rootScope.$on('$stateChangeSuccess',\r\n        (event, toState, toParams, fromState, fromParams) => {\r\n            // Unset routing variable to disable page transition\r\n            $rootScope[RoutingVar] = false;                \r\n        }\r\n    );\r\n\r\n    // Intercept route error\r\n    $rootScope.$on('$stateChangeError',\r\n        (event, toState, toParams, fromState, fromParams, error) => {\r\n            // Unset routing variable to disable page transition\r\n            $rootScope[RoutingVar] = false;\r\n\r\n            $log.error('Error while switching route to ' + toState.name);\r\n            $log.error(error);\r\n        }\r\n    );\r\n\r\n}\r\n\r\nangular\r\n    .module('pipRouting')\r\n    .run(hookRoutingEvents);\r\n    ","angular.module('pipRouting', ['ui.router']);\r\n\r\nimport './BackDecorator';\r\nimport './RedirectDecorator';\r\nimport './RoutingEvents';\r\n\r\nexport * from './BackDecorator';\r\nexport * from './RoutingEvents';\r\n","import { IIdentityService, IIdentityProvider } from './IIdentityService';\r\n\r\nexport let IdentityRootVar = \"$identity\";\r\nexport let IdentityChangedEvent = \"pipIdentityChanged\";\r\n\r\nclass IdentityService implements IIdentityService {\r\n    private _identity: any;\r\n    private _setRootVar: boolean;\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n\r\n    public constructor(\r\n        setRootVar: boolean,\r\n        identity: any,\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ) {\r\n        this._setRootVar = setRootVar;\r\n        this._identity = identity;\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n\r\n        this.setRootVar();\r\n    }\r\n\r\n    private setRootVar(): void {\r\n        if (this._setRootVar)\r\n            this._rootScope[IdentityRootVar] = this._identity;\r\n    }\r\n\r\n    public get identity(): any {\r\n        return this._identity;\r\n    }\r\n\r\n    public set identity(value: any) {\r\n        this._identity = value;\r\n        this.setRootVar();\r\n        this._rootScope.$emit(IdentityChangedEvent, this._identity);\r\n\r\n        let identity: any = value || {};\r\n        this._log.debug(\"Changed identity to \" + JSON.stringify(identity));\r\n    }\r\n}\r\n\r\nclass IdentityProvider implements IdentityProvider {\r\n    private _setRootVar = true;\r\n    private _identity: any = null;\r\n    private _service: IdentityService = null;\r\n\r\n    public constructor() { }\r\n\r\n    public get setRootVar(): boolean {\r\n        return this._setRootVar;  \r\n    }\r\n\r\n    public set setRootVar(value: boolean) {\r\n        this._setRootVar = !!value;\r\n    }\r\n\r\n    public get identity(): any {\r\n        return this._identity;  \r\n    }\r\n\r\n    public set identity(value: any) {\r\n        this._identity = value;\r\n    }\r\n\r\n    public $get(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ): any {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null)\r\n            this._service = new IdentityService(this._setRootVar, this._identity, $rootScope, $log);\r\n\r\n        return this._service;\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module('pipSession')\r\n    .provider('pipIdentity', IdentityProvider);\r\n","import { ISessionService, ISessionProvider } from './ISessionService';\r\n\r\nexport const SessionRootVar = \"$session\";\r\nexport const SessionOpenedEvent = \"pipSessionOpened\";\r\nexport const SessionClosedEvent = \"pipSessionClosed\";\r\n\r\nclass SessionService implements ISessionService {\r\n    private _setRootVar: boolean;\r\n    private _session: any;\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n\r\n    public constructor(\r\n        setRootVar: boolean, \r\n        session: any, \r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ) {\r\n        this._setRootVar = setRootVar;\r\n        this._session = session;\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n\r\n        this.setRootVar();\r\n    }\r\n    \r\n    private setRootVar(): void {\r\n        if (this._setRootVar)\r\n            this._rootScope[SessionRootVar] = this._session;\r\n    }\r\n\r\n    public get session(): any {\r\n        return this._session;\r\n    }\r\n\r\n    public isOpened(): boolean {\r\n        return this._session != null;\r\n    }\r\n\r\n    public open(session: any, fullReset: boolean = false, partialReset: boolean = false) {\r\n        if (session == null)\r\n            throw new Error(\"Session cannot be null\");\r\n\r\n        this._session = session;\r\n        this.setRootVar();\r\n        this._rootScope.$emit(SessionOpenedEvent, session);\r\n\r\n        this._log.debug(\"Opened session \" + session);\r\n    }\r\n\r\n    public close(fullReset: boolean = false, partialReset: boolean = false) {\r\n        let oldSession = this._session;\r\n\r\n        this._session = null;\r\n        this.setRootVar();\r\n        this._rootScope.$emit(SessionClosedEvent, oldSession);\r\n\r\n        this._log.debug(\"Closed session \" + oldSession);\r\n    }\r\n}\r\n\r\nclass SessionProvider implements ISessionProvider {\r\n    private _setRootVar = true;\r\n    private _session: any = null;\r\n    private _service: SessionService = null;\r\n\r\n    public constructor() { }\r\n\r\n    public get setRootVar(): boolean {\r\n        return this._setRootVar;  \r\n    }\r\n\r\n    public set setRootVar(value: boolean) {\r\n        this._setRootVar = !!value;\r\n    }\r\n\r\n    public get session(): any {\r\n        return this._session;  \r\n    }\r\n\r\n    public set session(value: any) {\r\n        this._session = value;\r\n    }\r\n\r\n    public $get(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ): any {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null)\r\n            this._service = new SessionService(this._setRootVar, this._session, $rootScope, $log);\r\n\r\n        return this._service;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipSession')\r\n    .provider('pipSession', SessionProvider); \r\n","angular.module('pipSession', []);\r\n\r\nimport './IdentityService';\r\nimport './SessionService';\r\n\r\nexport * from './IIdentity';\r\nexport * from './IIdentityService';\r\nexport * from './IdentityService';\r\n\r\nexport * from './ISessionService';\r\nexport * from './SessionService';\r\n","import { TransactionError } from './TransactionError'\r\n\r\nexport class Transaction {\r\n    private _scope: string = null;\r\n    private _id: string = null;\r\n    private _operation: string = null;\r\n    private _error: TransactionError = new TransactionError();\r\n    private _progress: number = 0;\r\n\r\n    public constructor(scope: string) {\r\n        this._scope = scope;\r\n    }\r\n\r\n    public get scope(): string {\r\n        return this._scope;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    public get operation(): string {\r\n        return this._operation;\r\n    }\r\n\r\n    public get progress(): number {\r\n        return this._progress;\r\n    }\r\n\r\n    public get error(): TransactionError {\r\n        return this._error;\r\n    }\r\n\r\n    public get errorMessage(): string {\r\n        return this._error.message;\r\n    }\r\n\r\n    public reset(): void {\r\n        this._id = null;\r\n        this._operation = null;\r\n        this._progress = 0;\r\n        this._error.reset();\r\n    }\r\n\r\n    public busy(): boolean {\r\n        return this._id != null;\r\n    }\r\n\r\n    public failed(): boolean {\r\n        return !this._error.empty();\r\n    }\r\n\r\n    public aborted(id: string): boolean {\r\n        return this._id != id;\r\n    }\r\n\r\n    public begin(operation: string): string {\r\n        // Transaction is already running\r\n        if (this._id != null) return null;\r\n\r\n        this._id = new Date().getTime().toString();\r\n        this._operation = operation || 'PROCESSING'\r\n        this._error.reset();\r\n\r\n        return this._id;\r\n    }\r\n\r\n    public update(progress: number): void {\r\n        this._progress = Math.max(progress, 100);\r\n    }\r\n\r\n    public abort(): void {\r\n        this._id = null;\r\n        this._error.reset();\r\n    }\r\n\r\n    public end(error?: any): void {\r\n        this._error.decode(error);\r\n        this._id = null;\r\n    }\r\n}\r\n","export class TransactionError {\r\n    public code: string;\r\n    public message: string;\r\n    public details: any;\r\n    public cause: string;\r\n    public stack_trace: string;\r\n\r\n    public constructor(error?: any) {\r\n        if (error != null)\r\n            this.decode(error);\r\n    }\r\n\r\n    public reset(): void {\r\n        this.code = null;\r\n        this.message = null;\r\n        this.details = null;\r\n        this.cause = null;\r\n        this.stack_trace = null;\r\n    }\r\n\r\n    public empty(): boolean {\r\n        return this.message = null && this.code == null;\r\n    }\r\n\r\n    public decode(error: any): void {\r\n        this.reset();\r\n\r\n        if (error == null) return;\r\n\r\n        // Process regular messages\r\n        if (error.message) {\r\n            this.message = error.message;\r\n        }\r\n\r\n        // Process server application errors\r\n        if (error.data) {\r\n            if (error.data.code) { \r\n                // process server error codes here\r\n                this.message = this.message || 'ERROR_' + error.data.code;\r\n                this.code = this.code || error.data.code;\r\n            }\r\n\r\n            if (error.data.message) {\r\n                this.message = this.message || error.data.message;\r\n            }\r\n\r\n            this.message = this.message || error.data;\r\n            this.details = this.details || error.data;\r\n\r\n            this.cause = error.data.cause;\r\n            this.stack_trace = error.data.stack_trace;\r\n            this.details = error.data.details;            \r\n        }\r\n\r\n        // Process standard HTTP errors\r\n        if (error.statusText) {\r\n            this.message = this.message || error.statusText;\r\n        }\r\n        if (error.status) {\r\n            this.message = this.message || 'ERROR_' + error.status;\r\n            this.code = this.code || error.status;\r\n        }\r\n        \r\n        this.message = this.message || error;\r\n        this.details = this.details || error;\r\n    }\r\n}\r\n","import { Transaction } from './Transaction';\r\nimport { ITransactionService } from './ITransactionService';\r\n\r\nclass TransactionService implements ITransactionService {\r\n    private _transactions: Transaction = <Transaction>{};\r\n\r\n    public constructor() {}\r\n\r\n    public create(scope?: string): Transaction {\r\n        let transaction: Transaction = new Transaction(scope);\r\n        \r\n        if (scope != null)\r\n            this._transactions[scope] = transaction;\r\n\r\n        return transaction;\r\n    }\r\n\r\n    public get(scope?: string): Transaction {\r\n        let transaction: Transaction = scope != null ? <Transaction>this._transactions[scope] : null;\r\n\r\n        if (transaction == null) {\r\n            transaction = new Transaction(scope);\r\n            if (scope != null)\r\n                this._transactions[scope] = transaction;\r\n        }\r\n\r\n        return transaction;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipTransaction')\r\n    .service('pipTransaction', TransactionService);\r\n","import { ITranslateService } from '../translate/ITranslateService';\r\n\r\nfunction configureTransactionStrings($injector: ng.auto.IInjectorService) {\r\n    \"ngInject\";\r\n\r\n    let pipTranslate: ITranslateService = $injector.has('pipTranslateProvider') \r\n        ? <ITranslateService>$injector.get('pipTranslateProvider') : null;\r\n\r\n    if (pipTranslate) {\r\n        pipTranslate.setTranslations('en', {\r\n            'ENTERING': 'Entering...',\r\n            'PROCESSING': 'Processing...',\r\n            'LOADING': 'Loading...',\r\n            'SAVING': 'Saving...'\r\n        });\r\n\r\n        pipTranslate.setTranslations('ru', {\r\n            'ENTERING': 'Вход в систему...',\r\n            'PROCESSING': 'Обрабатывается...',\r\n            'LOADING': 'Загружается...',\r\n            'SAVING': 'Сохраняется...'\r\n        });   \r\n    }\r\n    \r\n}\r\n\r\nangular\r\n    .module('pipTransaction')\r\n    .config(configureTransactionStrings);\r\n","angular.module('pipTransaction', []);\r\n\r\nimport './TransactionStrings';\r\nimport './TransactionError';\r\nimport './Transaction';\r\nimport './TransactionService';\r\n\r\nexport * from './TransactionError';\r\nexport * from './Transaction';\r\nexport * from './ITransactionService';\r\n","import { ITranslateService } from '../translate/ITranslateService';\r\n\r\nfunction translateDirective(pipTranslate): ng.IDirective {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: 'EA',\r\n        scope: {\r\n            key1: '@pipTranslate',\r\n            key2: '@key'\r\n        },\r\n        link: (scope: any, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {\r\n            let key: string = scope.key1 || scope.key2;\r\n            let value: string = pipTranslate.translate(key);\r\n            element.text(value);\r\n        }\r\n    };\r\n}\r\n\r\nfunction translateHtmlDirective(pipTranslate: ITranslateService): ng.IDirective {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: 'EA',\r\n        scope: {\r\n            key1: '@pipTranslateHtml',\r\n            key2: '@key'\r\n        },\r\n        link: (scope: any, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {\r\n            let key: string = scope.key1 || scope.key2;\r\n            let value: string = pipTranslate.translate(key);\r\n            element.html(value);\r\n        }\r\n    };\r\n}\r\n\r\nangular\r\n    .module('pipTranslate')\r\n    .directive('pipTranslate', translateDirective)\r\n    .directive('pipTranslateHtml', translateHtmlDirective);\r\n","import { ITranslateService } from './ITranslateService';\r\n\r\nfunction translateFilter(pipTranslate: ITranslateService) {\r\n    \"ngInject\";\r\n\r\n    return function (key: string) {\r\n        return pipTranslate.translate(key) || key;\r\n    }\r\n}\r\n\r\nfunction optionalTranslateFilter($injector: ng.auto.IInjectorService) {\r\n    \"ngInject\";\r\n\r\n    let pipTranslate: ITranslateService = $injector.has('pipTranslate') \r\n        ? <ITranslateService>$injector.get('pipTranslate') : null;\r\n\r\n    return function (key: string) {\r\n        return pipTranslate  ? pipTranslate.translate(key) || key : key;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipTranslate')\r\n    .filter('translate', translateFilter);\r\n","﻿import { Translation } from './Translation';\r\nimport { ResetPageEvent } from '../utilities/PageResetService';\r\nimport { ITranslateService, ITranslateProvider } from './ITranslateService';\r\n\r\nexport let LanguageRootVar = \"$language\";\r\nexport let LanguageChangedEvent = \"pipLanguageChanged\";    \r\n\r\nclass TranslateService implements ITranslateService {\r\n    private _translation: Translation;\r\n    private _setRootVar: boolean;\r\n    private _persist: boolean;\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n    private _window: ng.IWindowService;\r\n    private _mdDateLocale: angular.material.IDateLocaleProvider;\r\n\r\n    public constructor(\r\n        translation: Translation,\r\n        setRootVar: boolean,\r\n        persist: boolean,\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService,\r\n        $window: ng.IWindowService,\r\n        $mdDateLocale: angular.material.IDateLocaleProvider,\r\n    ) {\r\n        this._setRootVar = setRootVar;\r\n        this._persist = persist;\r\n        this._translation = translation;\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n        this._window = $window;\r\n        this._mdDateLocale = $mdDateLocale;\r\n\r\n        if (this._persist && this._window.localStorage)\r\n            this._translation.language = this._window.localStorage.getItem('language') || this._translation.language;\r\n\r\n        this._log.debug(\"Set language to \" + this._translation.language);\r\n\r\n        this.save();\r\n    }\r\n\r\n    private changeLocale(locale: string) {\r\n        if (!locale) return;\r\n\r\n        // var localeDate: moment.MomentLanguageData;\r\n        var localeDate: any;\r\n\r\n        moment.locale(locale);\r\n        localeDate = moment.localeData();\r\n\r\n        this._mdDateLocale.months = angular.isArray(localeDate._months) ? localeDate._months : localeDate._months.format;\r\n        this._mdDateLocale.shortMonths = angular.isArray(localeDate._monthsShort) ? localeDate._monthsShort : localeDate._monthsShort.format;\r\n        this._mdDateLocale.days = angular.isArray(localeDate._weekdays) ? localeDate._weekdays : localeDate._weekdays.format;\r\n        this._mdDateLocale.shortDays = localeDate._weekdaysMin;\r\n        this._mdDateLocale.firstDayOfWeek = localeDate._week.dow;\r\n    }\r\n\r\n    private save(): void {\r\n        if (this._setRootVar)\r\n            this._rootScope[LanguageRootVar] = this._translation.language;\r\n\r\n        if (this._persist && this._window.localStorage != null)\r\n            this._window.localStorage.setItem('language', this._translation.language);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this._translation.language;\r\n    }\r\n\r\n    public set language(value: string) {\r\n        if (value != this._translation.language) {\r\n            this._translation.language = value;\r\n            \r\n            this._log.debug(\"Changing language to \" + value);\r\n\r\n            this.changeLocale(this._translation.language);\r\n            this.save();   \r\n\r\n            this._rootScope.$emit(LanguageChangedEvent, value);\r\n            this._rootScope.$emit(ResetPageEvent);\r\n        }\r\n    }\r\n\r\n    public use(language: string): string {\r\n        if (language != null)\r\n            this.language = language;\r\n        return this.language;\r\n    }\r\n\r\n    public setTranslations(language: string, translations: any): void {\r\n        return this._translation.setTranslations(language, translations);\r\n    }\r\n\r\n    public translations(language: string, translations: any): void {\r\n        return this._translation.setTranslations(language, translations);\r\n    }\r\n\r\n    public translate(key: string): string {\r\n        return this._translation.translate(key);\r\n    }\r\n\r\n    public translateArray(keys: string[]): string[] {\r\n        return this._translation.translateArray(keys);\r\n    }\r\n    \r\n    public translateSet(keys: string[], keyProp: string, valueProp: string): any[] {\r\n        return this._translation.translateSet(keys, keyProp, valueProp);\r\n    }\r\n\r\n    public translateObjects(items: any[], keyProp: string, valueProp: string): any[] {\r\n        return this._translation.translateObjects(items, keyProp, valueProp);\r\n    }\r\n\r\n    public translateWithPrefix(prefix: string, key: string) {\r\n        return this._translation.translateWithPrefix(prefix, key);\r\n    }\r\n\r\n    public translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        return this._translation.translateSetWithPrefix(prefix, keys, keyProp, valueProp);\r\n    }\r\n\r\n    public translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        return this._translation.translateSetWithPrefix2(prefix, keys, keyProp, valueProp);\r\n    }\r\n}\r\n\r\nclass TranslateProvider extends Translation implements ITranslateProvider {\r\n    private _translation: Translation;\r\n    private _setRootVar: boolean = true;\r\n    private _persist: boolean = true;\r\n    private _service: TranslateService;\r\n    \r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public get setRootVar(): boolean {\r\n        return this._setRootVar;  \r\n    }\r\n\r\n    public set setRootVar(value: boolean) {\r\n        this._setRootVar = !!value;\r\n    }\r\n\r\n    public get persist(): boolean {\r\n        return this._persist;  \r\n    }\r\n\r\n    public set persist(value: boolean) {\r\n        this._persist = !!value;\r\n    }\r\n\r\n    public $get(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService, \r\n        $window: ng.IWindowService,\r\n        $mdDateLocale: angular.material.IDateLocaleProvider\r\n    ): any {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null) \r\n            this._service = new TranslateService(this, this._setRootVar, this._persist, $rootScope, $log, $window, $mdDateLocale);\r\n\r\n        return this._service;\r\n    }\r\n}\r\n\r\nfunction initTranslate(pipTranslate: ITranslateService) {\r\n    pipTranslate.language;\r\n}\r\n\r\nangular\r\n    .module('pipTranslate')\r\n    .provider('pipTranslate', TranslateProvider)\r\n    .run(initTranslate);\r\n","export class Translation {\r\n    protected _language: string = 'en';\r\n    protected _translations = {\r\n        en: {\r\n            'en': 'English',\r\n            'ru': 'Russian',\r\n            'es': 'Spanish',\r\n            'pt': 'Portuguese',\r\n            'de': 'German',\r\n            'fr': 'French'\r\n        },\r\n        ru: {\r\n            'en': 'Английский',\r\n            'ru': 'Русский',\r\n            'es': 'Испанский',\r\n            'pt': 'Португальский',\r\n            'de': 'Немецкий',\r\n            'fr': 'Французский'\r\n        }\r\n    };\r\n\r\n    public constructor() {}\r\n\r\n    public get language(): string { return this._language; }\r\n    public set language(value: string) { this._language = value; }\r\n\r\n    public use(language: string): string {\r\n        if (language != null)\r\n            this._language = language;\r\n        return this._language;\r\n    }\r\n\r\n    // Set translation strings for specific language\r\n    public setTranslations(language: string, translations: any): void {\r\n        let map = this._translations[language] || {};\r\n        this._translations[language] = _.extend(map, translations);\r\n    }\r\n\r\n    // Yet another method to set translation strings for specific language\r\n    public translations(language: string, translations: any): void {\r\n        this.setTranslations(language, translations);\r\n    }\r\n\r\n    // Translate a string by key using set language\r\n    public translate(key: string): string {\r\n        if (_.isNull(key) || _.isUndefined(key)) return '';\r\n\r\n        let translations = this._translations[this._language] || {};\r\n        return translations[key] || key;\r\n    }\r\n\r\n    // Translate an array of strings\r\n    public translateArray(keys: string[]): string[] {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        let values: string[] = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (k: string) {\r\n            let key = k || '';\r\n            values.push(translations[key] || key);\r\n        });\r\n\r\n        return values;\r\n    }\r\n\r\n    // Translate an array of strings into array of objects (set)\r\n    public translateSet(keys: string[], keyProp: string, valueProp: string): any[] {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        keyProp = keyProp || 'id';\r\n        valueProp = valueProp || 'name';\r\n\r\n        let values: any[] = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (key: string) {\r\n            let value: any = {};\r\n            key = key || '';\r\n\r\n            value[keyProp] = key;\r\n            value[valueProp] = translations[key] || key;\r\n\r\n            values.push(value);\r\n        });\r\n\r\n        return values;\r\n    }\r\n\r\n    // Translate a collection of objects\r\n    public translateObjects(items: any[], keyProp: string, valueProp: string): any[] {\r\n        if (_.isNull(items) || items.length == 0) return [];\r\n\r\n        keyProp = keyProp || 'name';\r\n        valueProp = valueProp || 'nameLocal';\r\n\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(items, function (item: any) {\r\n            let key = item[keyProp] || '';\r\n\r\n            item[valueProp] = translations[key] || key;\r\n        });\r\n\r\n        return items;\r\n    }\r\n\r\n    // Translate a string by key  with prefix using set language todo\r\n    public translateWithPrefix(prefix: string, key: string) {\r\n        prefix = prefix ? prefix + '_' : '';\r\n        key = (prefix + key).replace(/ /g, '_').toUpperCase();\r\n        if (key == null) return '';\r\n        let translations = this._translations[this._language] || {};\r\n        return translations[key] || key;\r\n    };\r\n\r\n    public translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        prefix = prefix ? prefix.replace(/ /g, '_').toUpperCase() : '';\r\n        keyProp = keyProp || 'id';\r\n        valueProp = valueProp || 'name';\r\n\r\n        let values = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (key: string) {\r\n            let value: any = {}; \r\n            key = key || '';\r\n\r\n            value[keyProp] = key;\r\n            value[valueProp] = translations[prefix + '_' + key] || key;\r\n\r\n            values.push(value);\r\n        });\r\n\r\n        return values;\r\n    }\r\n\r\n    // Translate an array of strings, apply uppercase and replace ' ' => '_'\r\n    public translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        keyProp = keyProp || 'id';\r\n        valueProp = valueProp || 'name';\r\n        prefix = prefix ? prefix.replace(/ /g, '_').toUpperCase() + '_': '';\r\n\r\n        let values = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (key: string) {\r\n            let value: any = {};\r\n            key = key || '';\r\n\r\n            value[keyProp] = key;\r\n            value[valueProp] = translations[prefix + key.replace(/ /g, '_').toUpperCase()]\r\n                || (prefix + key.replace(/ /g, '_').toUpperCase());\r\n\r\n            values.push(value);\r\n        });\r\n\r\n        return values;\r\n    }\r\n}\r\n","angular.module('pipTranslate', []);\r\n\r\nimport './Translation';\r\nimport './TranslateService';\r\nimport './TranslateFilter';\r\nimport './TranslateDirective';\r\n\r\nexport * from './Translation';\r\nexport * from './ITranslateService';\r\nexport * from './TranslateService';\r\n","import { ICodes } from './ICodes';\r\n\r\nclass Codes implements ICodes {\r\n    // Simple version of string hashcode\r\n    public hash(value: string): number {\r\n        if (value == null) return 0;\r\n        \r\n        let result: number = 0;\r\n        for (let i = 0; i < value.length; i++)\r\n            result += value.charCodeAt(i);\r\n\r\n        return result;\r\n    }\r\n\r\n    // Generates random big number for verification codes\r\n    public verification(): string {\r\n        return Math.random().toString(36).substr(2, 10).toUpperCase(); // remove `0.`\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipCodes', [])\r\n    .service('pipCodes', Codes);\r\n","import { IFormat } from './IFormat';\r\n\r\nclass Format implements IFormat {\r\n    // Cached for parsed formats\r\n    private cache = {};\r\n\r\n    // Creates a sample line from a text\r\n    public sample(value: string, maxLength: number): string {\r\n        if (!value || value == '') {\r\n            return '';\r\n        }\r\n\r\n        var length: number = value.indexOf('\\n');\r\n        length = length >= 0 ? length : value.length;\r\n        length = length < maxLength ? value.length : maxLength;\r\n\r\n        return value.substring(0, length);\r\n    }\r\n\r\n    private strRepeat(str: string, qty: number): string {\r\n        if (qty < 1) { \r\n            return '';\r\n        }\r\n        var result: string = '';\r\n        while (qty > 0) {\r\n            if (qty & 1) result += str;\r\n            qty >>= 1, str += str;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private getType(variable): string {\r\n        return toString.call(variable).slice(8, -1).toLowerCase();\r\n    }\r\n\r\n    private parseFormat(fmt: string): any {\r\n        let _fmt: string = fmt, match = [], parse_tree = [], arg_names: number = 0;\r\n        while (_fmt) {\r\n            if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\r\n                parse_tree.push(match[0]);\r\n            }\r\n            else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\r\n                parse_tree.push('%');\r\n            }\r\n            else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\r\n                if (match[2]) {\r\n                    arg_names |= 1;\r\n                    let field_list: string[] = [], replacement_field: string = match[2], field_match: string[] = [];\r\n                    if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\r\n                        field_list.push(field_match[1]);\r\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\r\n                            if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\r\n                                field_list.push(field_match[1]);\r\n                            }\r\n                            else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\r\n                                field_list.push(field_match[1]);\r\n                            }\r\n                            else {\r\n                                throw new Error('Unknown error');\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new Error('Unknown error');\r\n                    }\r\n                    match[2] = field_list;\r\n                }\r\n                else {\r\n                    arg_names |= 2;\r\n                }\r\n                if (arg_names === 3) {\r\n                    throw new Error('Mixing positional and named placeholders is not (yet) supported');\r\n                }\r\n                parse_tree.push(match);\r\n            }\r\n            else {\r\n                throw new Error('Unknown error');\r\n            }\r\n            _fmt = _fmt.substring(match[0].length);\r\n        }\r\n        return parse_tree;\r\n    }\r\n\r\n    private format(parse_tree: any, argv: any): string {\r\n        let cursor: number = 0; \r\n        let tree_length: number = parse_tree.length; \r\n        let output = [];\r\n\r\n        for (let i = 0; i < tree_length; i++) {\r\n            let node_type = this.getType(parse_tree[i]);\r\n            if (node_type === 'string') {\r\n                output.push(parse_tree[i]);\r\n            }\r\n            else if (node_type === 'array') {\r\n                let match = parse_tree[i]; // convenience purposes only\r\n                let arg: any;\r\n                if (match[2]) { // keyword argument\r\n                    arg = argv[cursor];\r\n                    for (let k = 0; k < match[2].length; k++) {\r\n                        if (!arg.hasOwnProperty(match[2][k])) {\r\n                            throw new Error(this.sprintf('Property \"%s\" does not exist', match[2][k]));\r\n                        }\r\n                        arg = arg[match[2][k]];\r\n                    }\r\n                } else if (match[1]) { // positional argument (explicit)\r\n                    arg = argv[match[1]];\r\n                }\r\n                else { // positional argument (implicit)\r\n                    arg = argv[cursor++];\r\n                }\r\n\r\n                if (/[^s]/.test(match[8]) && (this.getType(arg) != 'number')) {\r\n                    throw new Error(this.sprintf('Expecting number but found %s', this.getType(arg)));\r\n                }\r\n                switch (match[8]) {\r\n                    case 'b': arg = arg.toString(2); break;\r\n                    case 'c': arg = String.fromCharCode(arg); break;\r\n                    case 'd': arg = parseInt(arg, 10); break;\r\n                    case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\r\n                    case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\r\n                    case 'o': arg = arg.toString(8); break;\r\n                    case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\r\n                    case 'u': arg = Math.abs(arg); break;\r\n                    case 'x': arg = arg.toString(16); break;\r\n                    case 'X': arg = arg.toString(16).toUpperCase(); break;\r\n                }\r\n                arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);                \r\n                let pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\r\n                let pad_length = match[6] - String(arg).length;\r\n                let pad = match[6] ? this.strRepeat(pad_character, pad_length) : '';\r\n                output.push(match[5] ? arg + pad : pad + arg);\r\n            }\r\n        }\r\n        return output.join('');\r\n    }\r\n    \r\n    public sprintf(message: string, ...args: any[]): string {\r\n        if (!this.cache.hasOwnProperty(message))\r\n            this.cache[message] = this.parseFormat(message);\r\n\r\n        return this.format(this.cache[message], args);\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('pipFormat', [])\r\n    .service('pipFormat', Format);\r\n","import { IPageResetService } from './IPageResetService';\r\n\r\n\r\nexport let ResetPageEvent: string = \"pipResetPage\";\r\nexport let ResetAreaEvent: string = \"pipResetArea\";\r\n\r\nexport let ResetRootVar: string = \"$reset\";\r\nexport let ResetAreaRootVar: string = \"$resetArea\";\r\n\r\n\r\nclass PageResetService implements IPageResetService {\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n    private _timeout: ng.ITimeoutService;\r\n\r\n    public constructor(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService, \r\n        $timeout: ng.ITimeoutService\r\n    ) {\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n        this._timeout = $timeout;\r\n\r\n        $rootScope[ResetRootVar] = false;\r\n        $rootScope[ResetAreaRootVar] = null;\r\n    }\r\n\r\n    public reset(): void {\r\n        this._log.debug(\"Resetting the entire page\");\r\n        this.performReset(null);\r\n    }\r\n\r\n    public resetArea(area: string): void {\r\n        this._log.debug(\"Resetting the area \" + area);\r\n        this.performReset(area);\r\n    }\r\n\r\n    private performReset(area?: string): void {\r\n        this._rootScope[ResetRootVar] = area == null;\r\n        this._rootScope[ResetAreaRootVar] = area;\r\n\r\n        this._timeout(() => {\r\n            this._rootScope[ResetRootVar] = false;\r\n            this._rootScope[ResetAreaRootVar] = null;\r\n        }, 0);\r\n    }\r\n}\r\n\r\n\r\nfunction hookResetEvents(\r\n    $rootScope: ng.IRootScopeService, \r\n    pipPageReset: IPageResetService\r\n) {\r\n    $rootScope.$on(ResetPageEvent, () => { pipPageReset.reset(); });\r\n    $rootScope.$on(ResetAreaEvent, (event, area) => { pipPageReset.resetArea(area); });\r\n}\r\n\r\n\r\nangular.module('pipPageReset', [])\r\n    .service('pipPageReset', PageResetService)\r\n    .run(hookResetEvents);\r\n","import { IScrollService } from './IScrollService';\r\n\r\n\r\nclass ScrollService implements IScrollService {\r\n\r\n    public scrollTo(parentElement, childElement, animationDuration): void {\r\n        if (!parentElement || !childElement) return;\r\n        if (animationDuration == undefined) animationDuration = 300;\r\n\r\n        setTimeout(function () {\r\n            if (!$(childElement).position()) return;\r\n            var modDiff= Math.abs($(parentElement).scrollTop() - $(childElement).position().top);\r\n            if (modDiff < 20) return;\r\n            var scrollTo = $(parentElement).scrollTop() + ($(childElement).position().top - 20);\r\n            if (animationDuration > 0)\r\n                $(parentElement).animate({\r\n                    scrollTop: scrollTo + 'px'\r\n                }, animationDuration);\r\n        }, 100);\r\n    }\r\n\r\n}\r\n\r\n\r\nangular\r\n    .module('pipScroll', [])\r\n    .service('pipScroll', ScrollService);\r\n","import { ISystemInfo } from './ISystemInfo';\r\n\r\n\r\nclass SystemInfo implements ISystemInfo {\r\n    private _window: ng.IWindowService;\r\n\r\n    public constructor($window: ng.IWindowService) {\r\n        \"ngInject\";\r\n\r\n        this._window = $window;\r\n    }\r\n\r\n    // todo add support for iPhone\r\n    public get browserName(): string {\r\n        let ua = this._window.navigator.userAgent;\r\n\r\n        if (ua.search(/Edge/) > -1) return \"edge\";\r\n        if (ua.search(/MSIE/) > -1) return \"ie\";\r\n        if (ua.search(/Trident/) > -1) return \"ie\";\r\n        if (ua.search(/Firefox/) > -1) return \"firefox\";\r\n        if (ua.search(/Opera/) > -1) return \"opera\";\r\n        if (ua.search(/OPR/) > -1) return \"opera\";\r\n        if (ua.search(/YaBrowser/) > -1) return \"yabrowser\";\r\n        if (ua.search(/Chrome/) > -1) return \"chrome\";\r\n        if (ua.search(/Safari/) > -1) return \"safari\";\r\n        if (ua.search(/Maxthon/) > -1) return \"maxthon\";\r\n        \r\n        return \"unknown\";\r\n    }\r\n\r\n    public get browserVersion(): string {\r\n        let version;\r\n        let ua = this._window.navigator.userAgent;\r\n        let browser = this.browserName;\r\n\r\n        switch (browser) {\r\n            case \"edge\":\r\n                version = (ua.split(\"Edge\")[1]).split(\"/\")[1];\r\n                break;\r\n            case \"ie\":\r\n                version = (ua.split(\"MSIE \")[1]).split(\";\")[0];\r\n                break;\r\n            case \"ie11\":\r\n                browser = \"ie\";\r\n                version = (ua.split(\"; rv:\")[1]).split(\")\")[0];\r\n                break;\r\n            case \"firefox\":\r\n                version = ua.split(\"Firefox/\")[1];\r\n                break;\r\n            case \"opera\":\r\n                version = ua.split(\"Version/\")[1];\r\n                break;\r\n            case \"operaWebkit\":\r\n                version = ua.split(\"OPR/\")[1];\r\n                break;\r\n            case \"yabrowser\":\r\n                version = (ua.split(\"YaBrowser/\")[1]).split(\" \")[0];\r\n                break;\r\n            case \"chrome\":\r\n                version = (ua.split(\"Chrome/\")[1]).split(\" \")[0];\r\n                break;\r\n            case \"safari\":\r\n                version = (ua.split(\"Version/\")[1]).split(\" \")[0];\r\n                break;\r\n            case \"maxthon\":\r\n                version = ua.split(\"Maxthon/\")[1];\r\n                break;\r\n        }\r\n\r\n        return version;\r\n    }\r\n    \r\n    public get platform(): string {\r\n        let ua = this._window.navigator.userAgent;\r\n\r\n        if (/iphone|ipad|ipod|android|blackberry|mini|windows\\sce|palm/i.test(ua.toLowerCase())) \r\n            return 'mobile';\r\n\r\n        return 'desktop';\r\n    }\r\n\r\n    public get os(): string {\r\n        let ua = this._window.navigator.userAgent;\r\n\r\n        try {\r\n            let osAll = (/(windows|mac|android|linux|blackberry|sunos|solaris|iphone)/.exec(ua.toLowerCase()) || [ua])[0].replace('sunos', 'solaris');\r\n            let osAndroid = (/(android)/.exec(ua.toLowerCase()) || '');\r\n            return osAndroid && (osAndroid == 'android' || (osAndroid[0] == 'android')) ? 'android' : osAll;\r\n        } catch (err) {\r\n            return 'unknown'\r\n        }\r\n    }\r\n\r\n    public isDesktop(): boolean {\r\n        return this.platform == 'desktop';\r\n    }\r\n\r\n    public isMobile(): boolean {\r\n        return this.platform == 'mobile';\r\n    }\r\n\r\n    // Todo: complete implementation\r\n    public isCordova(): boolean {\r\n        return false;\r\n    }\r\n\r\n    // Todo: Move to errors\r\n    public isSupported(supported?: any): boolean {\r\n        if (!supported) \r\n            supported = {\r\n                edge: 11,\r\n                ie: 11,\r\n                firefox: 43, //4, for testing\r\n                opera: 35,\r\n                chrome: 47\r\n            };\r\n\r\n        let browser = this.browserName;\r\n        let version = this.browserVersion;\r\n        version = version.split(\".\")[0]\r\n\r\n        if (browser && supported[browser] && version >= supported[browser]) \r\n            return true;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('pipSystemInfo', [])\r\n    .service('pipSystemInfo', SystemInfo);\r\n","import { ITags } from './ITags';\r\n\r\nclass Tags implements ITags {\r\n\r\n    public normalizeOne(tag: string): string {\r\n        return tag \r\n            ? _.trim(tag.replace(/(_|#)+/g, ' '))\r\n            : null;\r\n    }\r\n\r\n    public compressOne(tag: string): string {\r\n        return tag\r\n            ? tag.replace(/( |_|#)/g, '').toLowerCase()\r\n            : null;\r\n    }\r\n\r\n    public equal(tag1: string, tag2: string): boolean {\r\n        if (tag1 == null && tag2 == null)\r\n            return true;\r\n        if (tag1 == null || tag2 == null)\r\n            return false;\r\n        return this.compressOne(tag1) == this.compressOne(tag2);\r\n    }\r\n\r\n    public normalizeAll(tags: any): string[] {\r\n        if (_.isString(tags))\r\n            tags = tags.split(/( |,|;)+/);\r\n\r\n        tags = _.map(tags, (tag: string) => this.normalizeOne(tag));\r\n\r\n        return tags;\r\n    }\r\n\r\n    public compressAll(tags: any): string[] {\r\n        if (_.isString(tags))\r\n            tags = tags.split(/( |,|;)+/);\r\n\r\n        tags = _.map(tags, (tag: string) => this.compressOne(tag));\r\n\r\n        return tags;\r\n    }\r\n\r\n    public extract(entity: any, searchFields?: string[]): string[] {\r\n        let tags = this.normalizeAll(entity.tags);\r\n\r\n        _.each(searchFields, (field) => {\r\n            let text = entity[field] || '';\r\n\r\n            if (text != '') {\r\n                let hashTags = text.match(/#\\w+/g);\r\n                tags = tags.concat(this.normalizeAll(hashTags));\r\n            }\r\n        });\r\n\r\n        return _.uniq(tags);\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('pipTags', [])\r\n    .service('pipTags', Tags);\r\n","import { ITimerService } from './ITimerService';\r\n\r\nclass TimerEvent {\r\n    public event: string;\r\n    public timeout: number;\r\n    public interval: any;\r\n\r\n    public constructor(event: string, timeout: number) {\r\n        this.event = event;\r\n        this.timeout = timeout;\r\n    }\r\n}\r\n\r\n\r\nlet DefaultEvents: TimerEvent[] = [\r\n    new TimerEvent('pipAutoPullChanges', 60000), // 1 min\r\n    new TimerEvent('pipAutoUpdatePage', 15000), // 15 sec\r\n    new TimerEvent('pipAutoUpdateCollection', 300000) // 5 min\r\n];\r\n\r\n\r\nclass TimerService implements ITimerService {\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n    private _interval: ng.IIntervalService;        \r\n    private _started = false;\r\n    private _events: TimerEvent[] = _.cloneDeep(DefaultEvents);\r\n\r\n    public constructor(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService, \r\n        $interval: ng.IIntervalService\r\n    ) {\r\n        \"ngInject\";\r\n\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n        this._interval = $interval;\r\n    }\r\n\r\n    public isStarted(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    public addEvent(event: string, timeout: number): void {\r\n        var existingEvent = _.find(this._events, (e) => e.event == event);\r\n        if (existingEvent != null) return;\r\n\r\n        let newEvent = <TimerEvent> {\r\n            event: event,\r\n            timeout: timeout\r\n        };\r\n        this._events.push(newEvent);\r\n\r\n        if (this._started)\r\n            this.startEvent(newEvent);\r\n    }\r\n\r\n    public removeEvent(event: string): void {\r\n        for (let i = this._events.length - 1; i >= 0; i--) {\r\n            let existingEvent = this._events[i];\r\n            if (existingEvent.event == event) {\r\n                this.stopEvent(existingEvent);\r\n                this._events.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    public clearEvents(): void {\r\n        this.stop();\r\n        this._events = [];\r\n    }\r\n\r\n    private startEvent(event: TimerEvent): void {\r\n        event.interval = this._interval(\r\n            () => { \r\n                this._log.debug('Generated timer event ' + event.event); \r\n                this._rootScope.$emit(event.event)\r\n            },\r\n            event.timeout\r\n        )\r\n    }\r\n\r\n    private stopEvent(event: TimerEvent): void {\r\n        if (event.interval != null) {\r\n            try {\r\n                this._interval.cancel(event.interval);\r\n            } catch (ex) {\r\n                // Do nothing\r\n            }\r\n            event.interval = null;\r\n        }\r\n    }\r\n\r\n    public start(): void {\r\n        if (this._started) return;\r\n\r\n        _.each(this._events, (event) => {\r\n            this.startEvent(event);\r\n        });\r\n\r\n        this._started = true;\r\n    }\r\n\r\n    public stop(): void {\r\n        _.each(this._events, (event) => {\r\n            this.stopEvent(event);\r\n        });\r\n\r\n        this._started = false;\r\n    }\r\n}\r\n\r\n\r\nangular.module('pipTimer', [])\r\n    .service('pipTimer', TimerService);\r\n","import './Format';\r\nimport './TimerService';\r\nimport './ScrollService';\r\nimport './Tags';\r\nimport './Codes';\r\nimport './SystemInfo';\r\nimport './PageResetService';\r\n\r\nexport * from './IFormat';\r\nexport * from './ITimerService';\r\nexport * from './IScrollService';\r\nexport * from './ITags';\r\nexport * from './ICodes';\r\nexport * from './ISystemInfo';\r\nexport * from './IPageResetService';"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvaW5kZXgudHMiLCJzcmMvcm91dGluZy9CYWNrRGVjb3JhdG9yLnRzIiwic3JjL3JvdXRpbmcvUmVkaXJlY3REZWNvcmF0b3IudHMiLCJzcmMvcm91dGluZy9Sb3V0aW5nRXZlbnRzLnRzIiwic3JjL3JvdXRpbmcvaW5kZXgudHMiLCJzcmMvc2Vzc2lvbi9JZGVudGl0eVNlcnZpY2UudHMiLCJzcmMvc2Vzc2lvbi9TZXNzaW9uU2VydmljZS50cyIsInNyYy9zZXNzaW9uL2luZGV4LnRzIiwic3JjL3RyYW5zYWN0aW9ucy9UcmFuc2FjdGlvbi50cyIsInNyYy90cmFuc2FjdGlvbnMvVHJhbnNhY3Rpb25FcnJvci50cyIsInNyYy90cmFuc2FjdGlvbnMvVHJhbnNhY3Rpb25TZXJ2aWNlLnRzIiwic3JjL3RyYW5zYWN0aW9ucy9UcmFuc2FjdGlvblN0cmluZ3MudHMiLCJzcmMvdHJhbnNhY3Rpb25zL2luZGV4LnRzIiwic3JjL3RyYW5zbGF0ZS9UcmFuc2xhdGVEaXJlY3RpdmUudHMiLCJzcmMvdHJhbnNsYXRlL1RyYW5zbGF0ZUZpbHRlci50cyIsInNyYy90cmFuc2xhdGUvVHJhbnNsYXRlU2VydmljZS50cyIsInNyYy90cmFuc2xhdGUvVHJhbnNsYXRpb24udHMiLCJzcmMvdHJhbnNsYXRlL2luZGV4LnRzIiwic3JjL3V0aWxpdGllcy9Db2Rlcy50cyIsInNyYy91dGlsaXRpZXMvRm9ybWF0LnRzIiwic3JjL3V0aWxpdGllcy9QYWdlUmVzZXRTZXJ2aWNlLnRzIiwic3JjL3V0aWxpdGllcy9TY3JvbGxTZXJ2aWNlLnRzIiwic3JjL3V0aWxpdGllcy9TeXN0ZW1JbmZvLnRzIiwic3JjL3V0aWxpdGllcy9UYWdzLnRzIiwic3JjL3V0aWxpdGllcy9UaW1lclNlcnZpY2UudHMiLCJzcmMvdXRpbGl0aWVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7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b250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwi77u/aW1wb3J0ICcuL3RyYW5zbGF0ZSc7XHJcbmltcG9ydCAnLi9zZXNzaW9uJztcclxuaW1wb3J0ICcuL3RyYW5zYWN0aW9ucyc7XHJcbmltcG9ydCAnLi9yb3V0aW5nJztcclxuaW1wb3J0ICcuL3V0aWxpdGllcyc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgncGlwU2VydmljZXMnLCBbXHJcbiAgICAncGlwVHJhbnNsYXRlJyxcclxuICAgICdwaXBTZXNzaW9uJyxcclxuICAgICdwaXBUcmFuc2FjdGlvbicsXHJcbiAgICAncGlwUm91dGluZycsXHJcbiAgICAncGlwRm9ybWF0JyxcclxuICAgICdwaXBUaW1lcicsXHJcbiAgICAncGlwU2Nyb2xsJyxcclxuICAgICdwaXBUYWdzJyxcclxuICAgICdwaXBDb2RlcycsXHJcbiAgICAncGlwU3lzdGVtSW5mbycsXHJcbiAgICAncGlwUGFnZVJlc2V0J1xyXG5dKTtcclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNsYXRlJztcclxuZXhwb3J0ICogZnJvbSAnLi9zZXNzaW9uJztcclxuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbnMnO1xyXG5leHBvcnQgKiBmcm9tICcuL3JvdXRpbmcnO1xyXG5leHBvcnQgKiBmcm9tICcuL3V0aWxpdGllcyc7XHJcbiIsImV4cG9ydCBsZXQgQ3VycmVudFN0YXRlOiBhbnk7XHJcbmV4cG9ydCBsZXQgUHJldmlvdXNTdGF0ZTogYW55O1xyXG5cclxuLy8gUnVuIGZ1bmN0aW9uIHRvIHNldCBDdXJyZW50U3RhdGUgYW5kIFByZXZpb3VzU3RhdGUgZ2xvYmFsIHZhcmlhYmxlc1xyXG5mdW5jdGlvbiBjYXB0dXJlU3RhdGVUcmFuc2xhdGlvbnMoJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UpIHtcclxuICAgIFwibmdJbmplY3RcIjtcclxuXHJcbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsXHJcbiAgICAgICAgKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgIEN1cnJlbnRTdGF0ZSA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHRvU3RhdGUubmFtZSwgXHJcbiAgICAgICAgICAgICAgICB1cmw6IHRvU3RhdGUudXJsLCBcclxuICAgICAgICAgICAgICAgIHBhcmFtczogdG9QYXJhbXNcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIFByZXZpb3VzU3RhdGUgPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBmcm9tU3RhdGUubmFtZSwgXHJcbiAgICAgICAgICAgICAgICB1cmw6IGZyb21TdGF0ZS51cmwsIFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBmcm9tUGFyYW1zXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuXHJcbn1cclxuXHJcbi8vIERlY29yYXRvciBmdW5jdGlvbiB0byBtb2RpZnkgJHN0YXRlIHNlcnZpY2UgYnkgYWRkaW5nIGdvQmFjayBhbmQgZ29CYWNrQW5kU2VsZWN0IG1ldGhvZHNcclxuZnVuY3Rpb24gZGVjb3JhdGVCYWNrU3RhdGVTZXJ2aWNlKCRkZWxlZ2F0ZTogYW55LCAkd2luZG93OiBuZy5JV2luZG93U2VydmljZSk6IGFueSB7XHJcbiAgICBcIm5nSW5qZWN0XCI7XHJcblxyXG4gICAgJGRlbGVnYXRlLmdvQmFjayA9IGdvQmFjaztcclxuICAgICRkZWxlZ2F0ZS5nb0JhY2tBbmRTZWxlY3QgPSBnb0JhY2tBbmRTZWxlY3Q7XHJcblxyXG4gICAgcmV0dXJuICRkZWxlZ2F0ZTtcclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgZnVuY3Rpb24gZ29CYWNrKCk6IHZvaWQge1xyXG4gICAgICAgICR3aW5kb3cuaGlzdG9yeS5iYWNrKClcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnb0JhY2tBbmRTZWxlY3QocGFyYW1zOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICAvLyB0b2RvOiBkZWZpbmUgZW5kIGZpeCBQcmV2aW91c1N0YXRlXHJcbiAgICAgICAgaWYgKFByZXZpb3VzU3RhdGUgIT0gbnVsbCBcclxuICAgICAgICAgICAgJiYgUHJldmlvdXNTdGF0ZS5uYW1lICE9IG51bGwpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IF8uY2xvbmVEZWVwKFByZXZpb3VzU3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gT3ZlcnJpZGUgc2VsZWN0ZWQgcGFyYW1ldGVyc1xyXG4gICAgICAgICAgICBzdGF0ZS5wYXJhbXMgPSBfLmV4dGVuZChzdGF0ZS5wYXJhbXMsIHBhcmFtcyk7XHJcblxyXG4gICAgICAgICAgICAkZGVsZWdhdGUuZ28oc3RhdGUubmFtZSwgc3RhdGUucGFyYW1zKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkd2luZG93Lmhpc3RvcnkuYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8gQ29uZmlnIGZ1bmN0aW9uIHRvIGRlY29yYXRlICRzdGF0ZSBzZXJ2aWNlXHJcbmZ1bmN0aW9uIGFkZEJhY2tTdGF0ZURlY29yYXRvcigkcHJvdmlkZSkge1xyXG4gICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckc3RhdGUnLCBkZWNvcmF0ZUJhY2tTdGF0ZVNlcnZpY2UpO1xyXG59XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdwaXBSb3V0aW5nJylcclxuICAgIC5jb25maWcoYWRkQmFja1N0YXRlRGVjb3JhdG9yKVxyXG4gICAgLnJ1bihjYXB0dXJlU3RhdGVUcmFuc2xhdGlvbnMpO1xyXG4gICAgIiwibGV0IFJlZGlyZWN0ZWRTdGF0ZXM6IGFueSA9IHt9O1xyXG5cclxuLy8gRGVjb3JhdG9yIGZ1bmN0aW9uIHRvIGFkZCAkc3RhdGVQcm92aWRlciByZWRpcmVjdCBtZXRob2RcclxuZnVuY3Rpb24gZGVjb3JhdGVSZWRpcmVjdFN0YXRlUHJvdmlkZXIoJGRlbGVnYXRlKSB7XHJcbiAgICBcIm5nSW5qZWN0XCI7XHJcblxyXG4gICAgJGRlbGVnYXRlLnJlZGlyZWN0ID0gcmVkaXJlY3Q7XHJcblxyXG4gICAgcmV0dXJuICRkZWxlZ2F0ZTtcclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIC8vIFNwZWNpZnkgYXV0b21hdGljIHJlZGlyZWN0IGZyb20gb25lIHN0YXRlIHRvIGFub3RoZXJcclxuICAgIGZ1bmN0aW9uIHJlZGlyZWN0KGZyb21TdGF0ZSwgdG9TdGF0ZSkge1xyXG4gICAgICAgIFJlZGlyZWN0ZWRTdGF0ZXNbZnJvbVN0YXRlXSA9IHRvU3RhdGU7ICBcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ29uZmlnIGZ1bmN0aW9uIHRvIGRlY29yYXRlICRzdGF0ZSBwcm92aWRlclxyXG5mdW5jdGlvbiBhZGRSZWRpcmVjdFN0YXRlUHJvdmlkZXJEZWNvcmF0b3IoJHByb3ZpZGUpIHtcclxuICAgIFwibmdJbmplY3RcIjtcclxuXHJcbiAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRzdGF0ZScsIGRlY29yYXRlUmVkaXJlY3RTdGF0ZVByb3ZpZGVyKTtcclxufVxyXG5cclxuLy8gRGVjb3JhdG9yIGZ1bmN0aW9uIHRvIGFkZCByZWRpcmVjdCBtZXRob2QgdG8gJHN0YXRlIHNlcnZpY2VcclxuZnVuY3Rpb24gZGVjb3JhdGVSZWRpcmVjdFN0YXRlU2VydmljZSgkZGVsZWdhdGUsICR0aW1lb3V0KSB7XHJcbiAgICBcIm5nSW5qZWN0XCI7XHJcblxyXG4gICAgJGRlbGVnYXRlLnJlZGlyZWN0ID0gcmVkaXJlY3Q7XHJcbiAgICBcclxuICAgIHJldHVybiAkZGVsZWdhdGU7XHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgXHJcbiAgICAvLyBUb2RvOiBNb3ZlIHRoaXMgY29kZSBkaXJlY3RseSB0byBldmVudCBoYW5kbGVyP1xyXG4gICAgLy8gVG9kbzogTm90aGluZyBjYWxscyB0aGlzIGNvZGUhIVxyXG4gICAgZnVuY3Rpb24gcmVkaXJlY3QoZXZlbnQsIHN0YXRlLCBwYXJhbXMpIHtcclxuICAgICAgICBsZXQgdG9TdGF0ZSA9IFJlZGlyZWN0ZWRTdGF0ZXNbc3RhdGUubmFtZV07XHJcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbih0b1N0YXRlKSkge1xyXG4gICAgICAgICAgICB0b1N0YXRlID0gdG9TdGF0ZShzdGF0ZS5uYW1lLCBwYXJhbXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uaXNOdWxsKHRvU3RhdGUpKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWRpcmVjdGVkIHRvU3RhdGUgY2Fubm90IGJlIG51bGwnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghIXRvU3RhdGUpIHtcclxuICAgICAgICAgICAgJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICRkZWxlZ2F0ZS50cmFuc2l0aW9uVG8odG9TdGF0ZSwgcGFyYW1zLCB7bG9jYXRpb246ICdyZXBsYWNlJ30pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDb25maWcgZnVuY3Rpb24gdG8gZGVjb3JhdGUgJHN0YXRlIHNlcnZpY2VcclxuZnVuY3Rpb24gYWRkUmVkaXJlY3RTdGF0ZURlY29yYXRvcigkcHJvdmlkZSkge1xyXG4gICAgXCJuZ0luamVjdFwiO1xyXG5cclxuICAgICRwcm92aWRlLmRlY29yYXRvcignJHN0YXRlJywgZGVjb3JhdGVSZWRpcmVjdFN0YXRlU2VydmljZSk7XHJcbn1cclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ3BpcFJvdXRpbmcnKVxyXG4gICAgLmNvbmZpZyhhZGRSZWRpcmVjdFN0YXRlUHJvdmlkZXJEZWNvcmF0b3IpXHJcbiAgICAuY29uZmlnKGFkZFJlZGlyZWN0U3RhdGVEZWNvcmF0b3IpO1xyXG4gICAgIiwiZXhwb3J0IGxldCBSb3V0aW5nVmFyOiBzdHJpbmcgPSBcIiRyb3V0aW5nXCI7XHJcblxyXG5mdW5jdGlvbiBob29rUm91dGluZ0V2ZW50cyhcclxuICAgICRyb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlLFxyXG4gICAgJGxvZzogbmcuSUxvZ1NlcnZpY2UsXHJcbiAgICAkc3RhdGU6IG5nLnVpLklTdGF0ZVNlcnZpY2VcclxuKSB7XHJcbiAgICBcIm5nSW5qZWN0XCI7XHJcblxyXG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JyxcclxuICAgICAgICAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpID0+IHtcclxuICAgICAgICAgICAgJHJvb3RTY29wZVtSb3V0aW5nVmFyXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsXHJcbiAgICAgICAgKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFVuc2V0IHJvdXRpbmcgdmFyaWFibGUgdG8gZGlzYWJsZSBwYWdlIHRyYW5zaXRpb25cclxuICAgICAgICAgICAgJHJvb3RTY29wZVtSb3V0aW5nVmFyXSA9IGZhbHNlOyAgICAgICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIC8vIEludGVyY2VwdCByb3V0ZSBlcnJvclxyXG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZUVycm9yJyxcclxuICAgICAgICAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFVuc2V0IHJvdXRpbmcgdmFyaWFibGUgdG8gZGlzYWJsZSBwYWdlIHRyYW5zaXRpb25cclxuICAgICAgICAgICAgJHJvb3RTY29wZVtSb3V0aW5nVmFyXSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgJGxvZy5lcnJvcignRXJyb3Igd2hpbGUgc3dpdGNoaW5nIHJvdXRlIHRvICcgKyB0b1N0YXRlLm5hbWUpO1xyXG4gICAgICAgICAgICAkbG9nLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICApO1xyXG5cclxufVxyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgncGlwUm91dGluZycpXHJcbiAgICAucnVuKGhvb2tSb3V0aW5nRXZlbnRzKTtcclxuICAgICIsImFuZ3VsYXIubW9kdWxlKCdwaXBSb3V0aW5nJywgWyd1aS5yb3V0ZXInXSk7XHJcblxyXG5pbXBvcnQgJy4vQmFja0RlY29yYXRvcic7XHJcbmltcG9ydCAnLi9SZWRpcmVjdERlY29yYXRvcic7XHJcbmltcG9ydCAnLi9Sb3V0aW5nRXZlbnRzJztcclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vQmFja0RlY29yYXRvcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vUm91dGluZ0V2ZW50cyc7XHJcbiIsImltcG9ydCB7IElJZGVudGl0eVNlcnZpY2UsIElJZGVudGl0eVByb3ZpZGVyIH0gZnJvbSAnLi9JSWRlbnRpdHlTZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBsZXQgSWRlbnRpdHlSb290VmFyID0gXCIkaWRlbnRpdHlcIjtcclxuZXhwb3J0IGxldCBJZGVudGl0eUNoYW5nZWRFdmVudCA9IFwicGlwSWRlbnRpdHlDaGFuZ2VkXCI7XHJcblxyXG5jbGFzcyBJZGVudGl0eVNlcnZpY2UgaW1wbGVtZW50cyBJSWRlbnRpdHlTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgX2lkZW50aXR5OiBhbnk7XHJcbiAgICBwcml2YXRlIF9zZXRSb290VmFyOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZTtcclxuICAgIHByaXZhdGUgX2xvZzogbmcuSUxvZ1NlcnZpY2U7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHNldFJvb3RWYXI6IGJvb2xlYW4sXHJcbiAgICAgICAgaWRlbnRpdHk6IGFueSxcclxuICAgICAgICAkcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZSxcclxuICAgICAgICAkbG9nOiBuZy5JTG9nU2VydmljZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0Um9vdFZhciA9IHNldFJvb3RWYXI7XHJcbiAgICAgICAgdGhpcy5faWRlbnRpdHkgPSBpZGVudGl0eTtcclxuICAgICAgICB0aGlzLl9yb290U2NvcGUgPSAkcm9vdFNjb3BlO1xyXG4gICAgICAgIHRoaXMuX2xvZyA9ICRsb2c7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0Um9vdFZhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Um9vdFZhcigpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fc2V0Um9vdFZhcilcclxuICAgICAgICAgICAgdGhpcy5fcm9vdFNjb3BlW0lkZW50aXR5Um9vdFZhcl0gPSB0aGlzLl9pZGVudGl0eTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGlkZW50aXR5KCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkZW50aXR5O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgaWRlbnRpdHkodmFsdWU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuX2lkZW50aXR5ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5zZXRSb290VmFyKCk7XHJcbiAgICAgICAgdGhpcy5fcm9vdFNjb3BlLiRlbWl0KElkZW50aXR5Q2hhbmdlZEV2ZW50LCB0aGlzLl9pZGVudGl0eSk7XHJcblxyXG4gICAgICAgIGxldCBpZGVudGl0eTogYW55ID0gdmFsdWUgfHwge307XHJcbiAgICAgICAgdGhpcy5fbG9nLmRlYnVnKFwiQ2hhbmdlZCBpZGVudGl0eSB0byBcIiArIEpTT04uc3RyaW5naWZ5KGlkZW50aXR5KSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIElkZW50aXR5UHJvdmlkZXIgaW1wbGVtZW50cyBJZGVudGl0eVByb3ZpZGVyIHtcclxuICAgIHByaXZhdGUgX3NldFJvb3RWYXIgPSB0cnVlO1xyXG4gICAgcHJpdmF0ZSBfaWRlbnRpdHk6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9zZXJ2aWNlOiBJZGVudGl0eVNlcnZpY2UgPSBudWxsO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc2V0Um9vdFZhcigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0Um9vdFZhcjsgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc2V0Um9vdFZhcih2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3NldFJvb3RWYXIgPSAhIXZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgaWRlbnRpdHkoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWRlbnRpdHk7ICBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGlkZW50aXR5KHZhbHVlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9pZGVudGl0eSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyAkZ2V0KFxyXG4gICAgICAgICRyb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlLFxyXG4gICAgICAgICRsb2c6IG5nLklMb2dTZXJ2aWNlXHJcbiAgICApOiBhbnkge1xyXG4gICAgICAgIFwibmdJbmplY3RcIjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3NlcnZpY2UgPT0gbnVsbClcclxuICAgICAgICAgICAgdGhpcy5fc2VydmljZSA9IG5ldyBJZGVudGl0eVNlcnZpY2UodGhpcy5fc2V0Um9vdFZhciwgdGhpcy5faWRlbnRpdHksICRyb290U2NvcGUsICRsb2cpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fc2VydmljZTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ3BpcFNlc3Npb24nKVxyXG4gICAgLnByb3ZpZGVyKCdwaXBJZGVudGl0eScsIElkZW50aXR5UHJvdmlkZXIpO1xyXG4iLCJpbXBvcnQgeyBJU2Vzc2lvblNlcnZpY2UsIElTZXNzaW9uUHJvdmlkZXIgfSBmcm9tICcuL0lTZXNzaW9uU2VydmljZSc7XHJcblxyXG5leHBvcnQgY29uc3QgU2Vzc2lvblJvb3RWYXIgPSBcIiRzZXNzaW9uXCI7XHJcbmV4cG9ydCBjb25zdCBTZXNzaW9uT3BlbmVkRXZlbnQgPSBcInBpcFNlc3Npb25PcGVuZWRcIjtcclxuZXhwb3J0IGNvbnN0IFNlc3Npb25DbG9zZWRFdmVudCA9IFwicGlwU2Vzc2lvbkNsb3NlZFwiO1xyXG5cclxuY2xhc3MgU2Vzc2lvblNlcnZpY2UgaW1wbGVtZW50cyBJU2Vzc2lvblNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBfc2V0Um9vdFZhcjogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX3Nlc3Npb246IGFueTtcclxuICAgIHByaXZhdGUgX3Jvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2U7XHJcbiAgICBwcml2YXRlIF9sb2c6IG5nLklMb2dTZXJ2aWNlO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgICAgICBzZXRSb290VmFyOiBib29sZWFuLCBcclxuICAgICAgICBzZXNzaW9uOiBhbnksIFxyXG4gICAgICAgICRyb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlLFxyXG4gICAgICAgICRsb2c6IG5nLklMb2dTZXJ2aWNlXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLl9zZXRSb290VmFyID0gc2V0Um9vdFZhcjtcclxuICAgICAgICB0aGlzLl9zZXNzaW9uID0gc2Vzc2lvbjtcclxuICAgICAgICB0aGlzLl9yb290U2NvcGUgPSAkcm9vdFNjb3BlO1xyXG4gICAgICAgIHRoaXMuX2xvZyA9ICRsb2c7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0Um9vdFZhcigpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcml2YXRlIHNldFJvb3RWYXIoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NldFJvb3RWYXIpXHJcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RTY29wZVtTZXNzaW9uUm9vdFZhcl0gPSB0aGlzLl9zZXNzaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc2Vzc2lvbigpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXNzaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc09wZW5lZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2Vzc2lvbiAhPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvcGVuKHNlc3Npb246IGFueSwgZnVsbFJlc2V0OiBib29sZWFuID0gZmFsc2UsIHBhcnRpYWxSZXNldDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKHNlc3Npb24gPT0gbnVsbClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2Vzc2lvbiBjYW5ub3QgYmUgbnVsbFwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fc2Vzc2lvbiA9IHNlc3Npb247XHJcbiAgICAgICAgdGhpcy5zZXRSb290VmFyKCk7XHJcbiAgICAgICAgdGhpcy5fcm9vdFNjb3BlLiRlbWl0KFNlc3Npb25PcGVuZWRFdmVudCwgc2Vzc2lvbik7XHJcblxyXG4gICAgICAgIHRoaXMuX2xvZy5kZWJ1ZyhcIk9wZW5lZCBzZXNzaW9uIFwiICsgc2Vzc2lvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsb3NlKGZ1bGxSZXNldDogYm9vbGVhbiA9IGZhbHNlLCBwYXJ0aWFsUmVzZXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIGxldCBvbGRTZXNzaW9uID0gdGhpcy5fc2Vzc2lvbjtcclxuXHJcbiAgICAgICAgdGhpcy5fc2Vzc2lvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zZXRSb290VmFyKCk7XHJcbiAgICAgICAgdGhpcy5fcm9vdFNjb3BlLiRlbWl0KFNlc3Npb25DbG9zZWRFdmVudCwgb2xkU2Vzc2lvbik7XHJcblxyXG4gICAgICAgIHRoaXMuX2xvZy5kZWJ1ZyhcIkNsb3NlZCBzZXNzaW9uIFwiICsgb2xkU2Vzc2lvbik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFNlc3Npb25Qcm92aWRlciBpbXBsZW1lbnRzIElTZXNzaW9uUHJvdmlkZXIge1xyXG4gICAgcHJpdmF0ZSBfc2V0Um9vdFZhciA9IHRydWU7XHJcbiAgICBwcml2YXRlIF9zZXNzaW9uOiBhbnkgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfc2VydmljZTogU2Vzc2lvblNlcnZpY2UgPSBudWxsO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc2V0Um9vdFZhcigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0Um9vdFZhcjsgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc2V0Um9vdFZhcih2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3NldFJvb3RWYXIgPSAhIXZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc2Vzc2lvbigpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXNzaW9uOyAgXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzZXNzaW9uKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9zZXNzaW9uID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljICRnZXQoXHJcbiAgICAgICAgJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UsXHJcbiAgICAgICAgJGxvZzogbmcuSUxvZ1NlcnZpY2VcclxuICAgICk6IGFueSB7XHJcbiAgICAgICAgXCJuZ0luamVjdFwiO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fc2VydmljZSA9PSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLl9zZXJ2aWNlID0gbmV3IFNlc3Npb25TZXJ2aWNlKHRoaXMuX3NldFJvb3RWYXIsIHRoaXMuX3Nlc3Npb24sICRyb290U2NvcGUsICRsb2cpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fc2VydmljZTtcclxuICAgIH1cclxufVxyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgncGlwU2Vzc2lvbicpXHJcbiAgICAucHJvdmlkZXIoJ3BpcFNlc3Npb24nLCBTZXNzaW9uUHJvdmlkZXIpOyBcclxuIiwiYW5ndWxhci5tb2R1bGUoJ3BpcFNlc3Npb24nLCBbXSk7XHJcblxyXG5pbXBvcnQgJy4vSWRlbnRpdHlTZXJ2aWNlJztcclxuaW1wb3J0ICcuL1Nlc3Npb25TZXJ2aWNlJztcclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vSUlkZW50aXR5JztcclxuZXhwb3J0ICogZnJvbSAnLi9JSWRlbnRpdHlTZXJ2aWNlJztcclxuZXhwb3J0ICogZnJvbSAnLi9JZGVudGl0eVNlcnZpY2UnO1xyXG5cclxuZXhwb3J0ICogZnJvbSAnLi9JU2Vzc2lvblNlcnZpY2UnO1xyXG5leHBvcnQgKiBmcm9tICcuL1Nlc3Npb25TZXJ2aWNlJztcclxuIiwiaW1wb3J0IHsgVHJhbnNhY3Rpb25FcnJvciB9IGZyb20gJy4vVHJhbnNhY3Rpb25FcnJvcidcclxuXHJcbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbiB7XHJcbiAgICBwcml2YXRlIF9zY29wZTogc3RyaW5nID0gbnVsbDtcclxuICAgIHByaXZhdGUgX2lkOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfb3BlcmF0aW9uOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfZXJyb3I6IFRyYW5zYWN0aW9uRXJyb3IgPSBuZXcgVHJhbnNhY3Rpb25FcnJvcigpO1xyXG4gICAgcHJpdmF0ZSBfcHJvZ3Jlc3M6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHNjb3BlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9zY29wZSA9IHNjb3BlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc2NvcGUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2NvcGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBpZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IG9wZXJhdGlvbigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcGVyYXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBwcm9ncmVzcygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9ncmVzcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGVycm9yKCk6IFRyYW5zYWN0aW9uRXJyb3Ige1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGVycm9yTWVzc2FnZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvci5tZXNzYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9pZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fb3BlcmF0aW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9wcm9ncmVzcyA9IDA7XHJcbiAgICAgICAgdGhpcy5fZXJyb3IucmVzZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYnVzeSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQgIT0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmFpbGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5fZXJyb3IuZW1wdHkoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWJvcnRlZChpZDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkICE9IGlkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiZWdpbihvcGVyYXRpb246IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgLy8gVHJhbnNhY3Rpb24gaXMgYWxyZWFkeSBydW5uaW5nXHJcbiAgICAgICAgaWYgKHRoaXMuX2lkICE9IG51bGwpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLl9pZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy5fb3BlcmF0aW9uID0gb3BlcmF0aW9uIHx8ICdQUk9DRVNTSU5HJ1xyXG4gICAgICAgIHRoaXMuX2Vycm9yLnJlc2V0KCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKHByb2dyZXNzOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9wcm9ncmVzcyA9IE1hdGgubWF4KHByb2dyZXNzLCAxMDApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYm9ydCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9pZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fZXJyb3IucmVzZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5kKGVycm9yPzogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZXJyb3IuZGVjb2RlKGVycm9yKTtcclxuICAgICAgICB0aGlzLl9pZCA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uRXJyb3Ige1xyXG4gICAgcHVibGljIGNvZGU6IHN0cmluZztcclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgZGV0YWlsczogYW55O1xyXG4gICAgcHVibGljIGNhdXNlOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgc3RhY2tfdHJhY2U6IHN0cmluZztcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZXJyb3I/OiBhbnkpIHtcclxuICAgICAgICBpZiAoZXJyb3IgIT0gbnVsbClcclxuICAgICAgICAgICAgdGhpcy5kZWNvZGUoZXJyb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNhdXNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN0YWNrX3RyYWNlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZSA9IG51bGwgJiYgdGhpcy5jb2RlID09IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlY29kZShlcnJvcjogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG5cclxuICAgICAgICBpZiAoZXJyb3IgPT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBQcm9jZXNzIHJlZ3VsYXIgbWVzc2FnZXNcclxuICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUHJvY2VzcyBzZXJ2ZXIgYXBwbGljYXRpb24gZXJyb3JzXHJcbiAgICAgICAgaWYgKGVycm9yLmRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yLmRhdGEuY29kZSkgeyBcclxuICAgICAgICAgICAgICAgIC8vIHByb2Nlc3Mgc2VydmVyIGVycm9yIGNvZGVzIGhlcmVcclxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSB8fCAnRVJST1JfJyArIGVycm9yLmRhdGEuY29kZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29kZSA9IHRoaXMuY29kZSB8fCBlcnJvci5kYXRhLmNvZGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChlcnJvci5kYXRhLm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSB8fCBlcnJvci5kYXRhLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSB8fCBlcnJvci5kYXRhO1xyXG4gICAgICAgICAgICB0aGlzLmRldGFpbHMgPSB0aGlzLmRldGFpbHMgfHwgZXJyb3IuZGF0YTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2F1c2UgPSBlcnJvci5kYXRhLmNhdXNlO1xyXG4gICAgICAgICAgICB0aGlzLnN0YWNrX3RyYWNlID0gZXJyb3IuZGF0YS5zdGFja190cmFjZTtcclxuICAgICAgICAgICAgdGhpcy5kZXRhaWxzID0gZXJyb3IuZGF0YS5kZXRhaWxzOyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUHJvY2VzcyBzdGFuZGFyZCBIVFRQIGVycm9yc1xyXG4gICAgICAgIGlmIChlcnJvci5zdGF0dXNUZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSB8fCBlcnJvci5zdGF0dXNUZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSB8fCAnRVJST1JfJyArIGVycm9yLnN0YXR1cztcclxuICAgICAgICAgICAgdGhpcy5jb2RlID0gdGhpcy5jb2RlIHx8IGVycm9yLnN0YXR1cztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5tZXNzYWdlIHx8IGVycm9yO1xyXG4gICAgICAgIHRoaXMuZGV0YWlscyA9IHRoaXMuZGV0YWlscyB8fCBlcnJvcjtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4vVHJhbnNhY3Rpb24nO1xyXG5pbXBvcnQgeyBJVHJhbnNhY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9JVHJhbnNhY3Rpb25TZXJ2aWNlJztcclxuXHJcbmNsYXNzIFRyYW5zYWN0aW9uU2VydmljZSBpbXBsZW1lbnRzIElUcmFuc2FjdGlvblNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBfdHJhbnNhY3Rpb25zOiBUcmFuc2FjdGlvbiA9IDxUcmFuc2FjdGlvbj57fTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGUoc2NvcGU/OiBzdHJpbmcpOiBUcmFuc2FjdGlvbiB7XHJcbiAgICAgICAgbGV0IHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbihzY29wZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHNjb3BlICE9IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zYWN0aW9uc1tzY29wZV0gPSB0cmFuc2FjdGlvbjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQoc2NvcGU/OiBzdHJpbmcpOiBUcmFuc2FjdGlvbiB7XHJcbiAgICAgICAgbGV0IHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiA9IHNjb3BlICE9IG51bGwgPyA8VHJhbnNhY3Rpb24+dGhpcy5fdHJhbnNhY3Rpb25zW3Njb3BlXSA6IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0cmFuc2FjdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKHNjb3BlKTtcclxuICAgICAgICAgICAgaWYgKHNjb3BlICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2FjdGlvbnNbc2NvcGVdID0gdHJhbnNhY3Rpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb247XHJcbiAgICB9XHJcbn1cclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ3BpcFRyYW5zYWN0aW9uJylcclxuICAgIC5zZXJ2aWNlKCdwaXBUcmFuc2FjdGlvbicsIFRyYW5zYWN0aW9uU2VydmljZSk7XHJcbiIsImltcG9ydCB7IElUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vdHJhbnNsYXRlL0lUcmFuc2xhdGVTZXJ2aWNlJztcclxuXHJcbmZ1bmN0aW9uIGNvbmZpZ3VyZVRyYW5zYWN0aW9uU3RyaW5ncygkaW5qZWN0b3I6IG5nLmF1dG8uSUluamVjdG9yU2VydmljZSkge1xyXG4gICAgXCJuZ0luamVjdFwiO1xyXG5cclxuICAgIGxldCBwaXBUcmFuc2xhdGU6IElUcmFuc2xhdGVTZXJ2aWNlID0gJGluamVjdG9yLmhhcygncGlwVHJhbnNsYXRlUHJvdmlkZXInKSBcclxuICAgICAgICA/IDxJVHJhbnNsYXRlU2VydmljZT4kaW5qZWN0b3IuZ2V0KCdwaXBUcmFuc2xhdGVQcm92aWRlcicpIDogbnVsbDtcclxuXHJcbiAgICBpZiAocGlwVHJhbnNsYXRlKSB7XHJcbiAgICAgICAgcGlwVHJhbnNsYXRlLnNldFRyYW5zbGF0aW9ucygnZW4nLCB7XHJcbiAgICAgICAgICAgICdFTlRFUklORyc6ICdFbnRlcmluZy4uLicsXHJcbiAgICAgICAgICAgICdQUk9DRVNTSU5HJzogJ1Byb2Nlc3NpbmcuLi4nLFxyXG4gICAgICAgICAgICAnTE9BRElORyc6ICdMb2FkaW5nLi4uJyxcclxuICAgICAgICAgICAgJ1NBVklORyc6ICdTYXZpbmcuLi4nXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHBpcFRyYW5zbGF0ZS5zZXRUcmFuc2xhdGlvbnMoJ3J1Jywge1xyXG4gICAgICAgICAgICAnRU5URVJJTkcnOiAn0JLRhdC+0LQg0LIg0YHQuNGB0YLQtdC80YMuLi4nLFxyXG4gICAgICAgICAgICAnUFJPQ0VTU0lORyc6ICfQntCx0YDQsNCx0LDRgtGL0LLQsNC10YLRgdGPLi4uJyxcclxuICAgICAgICAgICAgJ0xPQURJTkcnOiAn0JfQsNCz0YDRg9C20LDQtdGC0YHRjy4uLicsXHJcbiAgICAgICAgICAgICdTQVZJTkcnOiAn0KHQvtGF0YDQsNC90Y/QtdGC0YHRjy4uLidcclxuICAgICAgICB9KTsgICBcclxuICAgIH1cclxuICAgIFxyXG59XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdwaXBUcmFuc2FjdGlvbicpXHJcbiAgICAuY29uZmlnKGNvbmZpZ3VyZVRyYW5zYWN0aW9uU3RyaW5ncyk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdwaXBUcmFuc2FjdGlvbicsIFtdKTtcclxuXHJcbmltcG9ydCAnLi9UcmFuc2FjdGlvblN0cmluZ3MnO1xyXG5pbXBvcnQgJy4vVHJhbnNhY3Rpb25FcnJvcic7XHJcbmltcG9ydCAnLi9UcmFuc2FjdGlvbic7XHJcbmltcG9ydCAnLi9UcmFuc2FjdGlvblNlcnZpY2UnO1xyXG5cclxuZXhwb3J0ICogZnJvbSAnLi9UcmFuc2FjdGlvbkVycm9yJztcclxuZXhwb3J0ICogZnJvbSAnLi9UcmFuc2FjdGlvbic7XHJcbmV4cG9ydCAqIGZyb20gJy4vSVRyYW5zYWN0aW9uU2VydmljZSc7XHJcbiIsImltcG9ydCB7IElUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vdHJhbnNsYXRlL0lUcmFuc2xhdGVTZXJ2aWNlJztcclxuXHJcbmZ1bmN0aW9uIHRyYW5zbGF0ZURpcmVjdGl2ZShwaXBUcmFuc2xhdGUpOiBuZy5JRGlyZWN0aXZlIHtcclxuICAgIFwibmdJbmplY3RcIjtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgICAgIGtleTE6ICdAcGlwVHJhbnNsYXRlJyxcclxuICAgICAgICAgICAga2V5MjogJ0BrZXknXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaW5rOiAoc2NvcGU6IGFueSwgZWxlbWVudDogbmcuSUF1Z21lbnRlZEpRdWVyeSwgYXR0cnM6IG5nLklBdHRyaWJ1dGVzKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBrZXk6IHN0cmluZyA9IHNjb3BlLmtleTEgfHwgc2NvcGUua2V5MjtcclxuICAgICAgICAgICAgbGV0IHZhbHVlOiBzdHJpbmcgPSBwaXBUcmFuc2xhdGUudHJhbnNsYXRlKGtleSk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudGV4dCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gdHJhbnNsYXRlSHRtbERpcmVjdGl2ZShwaXBUcmFuc2xhdGU6IElUcmFuc2xhdGVTZXJ2aWNlKTogbmcuSURpcmVjdGl2ZSB7XHJcbiAgICBcIm5nSW5qZWN0XCI7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0VBJyxcclxuICAgICAgICBzY29wZToge1xyXG4gICAgICAgICAgICBrZXkxOiAnQHBpcFRyYW5zbGF0ZUh0bWwnLFxyXG4gICAgICAgICAgICBrZXkyOiAnQGtleSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpbms6IChzY29wZTogYW55LCBlbGVtZW50OiBuZy5JQXVnbWVudGVkSlF1ZXJ5LCBhdHRyczogbmcuSUF0dHJpYnV0ZXMpID0+IHtcclxuICAgICAgICAgICAgbGV0IGtleTogc3RyaW5nID0gc2NvcGUua2V5MSB8fCBzY29wZS5rZXkyO1xyXG4gICAgICAgICAgICBsZXQgdmFsdWU6IHN0cmluZyA9IHBpcFRyYW5zbGF0ZS50cmFuc2xhdGUoa2V5KTtcclxuICAgICAgICAgICAgZWxlbWVudC5odG1sKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5hbmd1bGFyXHJcbiAgICAubW9kdWxlKCdwaXBUcmFuc2xhdGUnKVxyXG4gICAgLmRpcmVjdGl2ZSgncGlwVHJhbnNsYXRlJywgdHJhbnNsYXRlRGlyZWN0aXZlKVxyXG4gICAgLmRpcmVjdGl2ZSgncGlwVHJhbnNsYXRlSHRtbCcsIHRyYW5zbGF0ZUh0bWxEaXJlY3RpdmUpO1xyXG4iLCJpbXBvcnQgeyBJVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJy4vSVRyYW5zbGF0ZVNlcnZpY2UnO1xyXG5cclxuZnVuY3Rpb24gdHJhbnNsYXRlRmlsdGVyKHBpcFRyYW5zbGF0ZTogSVRyYW5zbGF0ZVNlcnZpY2UpIHtcclxuICAgIFwibmdJbmplY3RcIjtcclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHBpcFRyYW5zbGF0ZS50cmFuc2xhdGUoa2V5KSB8fCBrZXk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9wdGlvbmFsVHJhbnNsYXRlRmlsdGVyKCRpbmplY3RvcjogbmcuYXV0by5JSW5qZWN0b3JTZXJ2aWNlKSB7XHJcbiAgICBcIm5nSW5qZWN0XCI7XHJcblxyXG4gICAgbGV0IHBpcFRyYW5zbGF0ZTogSVRyYW5zbGF0ZVNlcnZpY2UgPSAkaW5qZWN0b3IuaGFzKCdwaXBUcmFuc2xhdGUnKSBcclxuICAgICAgICA/IDxJVHJhbnNsYXRlU2VydmljZT4kaW5qZWN0b3IuZ2V0KCdwaXBUcmFuc2xhdGUnKSA6IG51bGw7XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXk6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiBwaXBUcmFuc2xhdGUgID8gcGlwVHJhbnNsYXRlLnRyYW5zbGF0ZShrZXkpIHx8IGtleSA6IGtleTtcclxuICAgIH1cclxufVxyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgncGlwVHJhbnNsYXRlJylcclxuICAgIC5maWx0ZXIoJ3RyYW5zbGF0ZScsIHRyYW5zbGF0ZUZpbHRlcik7XHJcbiIsIu+7v2ltcG9ydCB7IFRyYW5zbGF0aW9uIH0gZnJvbSAnLi9UcmFuc2xhdGlvbic7XHJcbmltcG9ydCB7IFJlc2V0UGFnZUV2ZW50IH0gZnJvbSAnLi4vdXRpbGl0aWVzL1BhZ2VSZXNldFNlcnZpY2UnO1xyXG5pbXBvcnQgeyBJVHJhbnNsYXRlU2VydmljZSwgSVRyYW5zbGF0ZVByb3ZpZGVyIH0gZnJvbSAnLi9JVHJhbnNsYXRlU2VydmljZSc7XHJcblxyXG5leHBvcnQgbGV0IExhbmd1YWdlUm9vdFZhciA9IFwiJGxhbmd1YWdlXCI7XHJcbmV4cG9ydCBsZXQgTGFuZ3VhZ2VDaGFuZ2VkRXZlbnQgPSBcInBpcExhbmd1YWdlQ2hhbmdlZFwiOyAgICBcclxuXHJcbmNsYXNzIFRyYW5zbGF0ZVNlcnZpY2UgaW1wbGVtZW50cyBJVHJhbnNsYXRlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIF90cmFuc2xhdGlvbjogVHJhbnNsYXRpb247XHJcbiAgICBwcml2YXRlIF9zZXRSb290VmFyOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfcGVyc2lzdDogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX3Jvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2U7XHJcbiAgICBwcml2YXRlIF9sb2c6IG5nLklMb2dTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBfd2luZG93OiBuZy5JV2luZG93U2VydmljZTtcclxuICAgIHByaXZhdGUgX21kRGF0ZUxvY2FsZTogYW5ndWxhci5tYXRlcmlhbC5JRGF0ZUxvY2FsZVByb3ZpZGVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgICAgICB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb24sXHJcbiAgICAgICAgc2V0Um9vdFZhcjogYm9vbGVhbixcclxuICAgICAgICBwZXJzaXN0OiBib29sZWFuLFxyXG4gICAgICAgICRyb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlLFxyXG4gICAgICAgICRsb2c6IG5nLklMb2dTZXJ2aWNlLFxyXG4gICAgICAgICR3aW5kb3c6IG5nLklXaW5kb3dTZXJ2aWNlLFxyXG4gICAgICAgICRtZERhdGVMb2NhbGU6IGFuZ3VsYXIubWF0ZXJpYWwuSURhdGVMb2NhbGVQcm92aWRlcixcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuX3NldFJvb3RWYXIgPSBzZXRSb290VmFyO1xyXG4gICAgICAgIHRoaXMuX3BlcnNpc3QgPSBwZXJzaXN0O1xyXG4gICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uID0gdHJhbnNsYXRpb247XHJcbiAgICAgICAgdGhpcy5fcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcclxuICAgICAgICB0aGlzLl9sb2cgPSAkbG9nO1xyXG4gICAgICAgIHRoaXMuX3dpbmRvdyA9ICR3aW5kb3c7XHJcbiAgICAgICAgdGhpcy5fbWREYXRlTG9jYWxlID0gJG1kRGF0ZUxvY2FsZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3BlcnNpc3QgJiYgdGhpcy5fd2luZG93LmxvY2FsU3RvcmFnZSlcclxuICAgICAgICAgICAgdGhpcy5fdHJhbnNsYXRpb24ubGFuZ3VhZ2UgPSB0aGlzLl93aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlJykgfHwgdGhpcy5fdHJhbnNsYXRpb24ubGFuZ3VhZ2U7XHJcblxyXG4gICAgICAgIHRoaXMuX2xvZy5kZWJ1ZyhcIlNldCBsYW5ndWFnZSB0byBcIiArIHRoaXMuX3RyYW5zbGF0aW9uLmxhbmd1YWdlKTtcclxuXHJcbiAgICAgICAgdGhpcy5zYXZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGFuZ2VMb2NhbGUobG9jYWxlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoIWxvY2FsZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyB2YXIgbG9jYWxlRGF0ZTogbW9tZW50Lk1vbWVudExhbmd1YWdlRGF0YTtcclxuICAgICAgICB2YXIgbG9jYWxlRGF0ZTogYW55O1xyXG5cclxuICAgICAgICBtb21lbnQubG9jYWxlKGxvY2FsZSk7XHJcbiAgICAgICAgbG9jYWxlRGF0ZSA9IG1vbWVudC5sb2NhbGVEYXRhKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX21kRGF0ZUxvY2FsZS5tb250aHMgPSBhbmd1bGFyLmlzQXJyYXkobG9jYWxlRGF0ZS5fbW9udGhzKSA/IGxvY2FsZURhdGUuX21vbnRocyA6IGxvY2FsZURhdGUuX21vbnRocy5mb3JtYXQ7XHJcbiAgICAgICAgdGhpcy5fbWREYXRlTG9jYWxlLnNob3J0TW9udGhzID0gYW5ndWxhci5pc0FycmF5KGxvY2FsZURhdGUuX21vbnRoc1Nob3J0KSA/IGxvY2FsZURhdGUuX21vbnRoc1Nob3J0IDogbG9jYWxlRGF0ZS5fbW9udGhzU2hvcnQuZm9ybWF0O1xyXG4gICAgICAgIHRoaXMuX21kRGF0ZUxvY2FsZS5kYXlzID0gYW5ndWxhci5pc0FycmF5KGxvY2FsZURhdGUuX3dlZWtkYXlzKSA/IGxvY2FsZURhdGUuX3dlZWtkYXlzIDogbG9jYWxlRGF0ZS5fd2Vla2RheXMuZm9ybWF0O1xyXG4gICAgICAgIHRoaXMuX21kRGF0ZUxvY2FsZS5zaG9ydERheXMgPSBsb2NhbGVEYXRlLl93ZWVrZGF5c01pbjtcclxuICAgICAgICB0aGlzLl9tZERhdGVMb2NhbGUuZmlyc3REYXlPZldlZWsgPSBsb2NhbGVEYXRlLl93ZWVrLmRvdztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNhdmUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NldFJvb3RWYXIpXHJcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RTY29wZVtMYW5ndWFnZVJvb3RWYXJdID0gdGhpcy5fdHJhbnNsYXRpb24ubGFuZ3VhZ2U7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9wZXJzaXN0ICYmIHRoaXMuX3dpbmRvdy5sb2NhbFN0b3JhZ2UgIT0gbnVsbClcclxuICAgICAgICAgICAgdGhpcy5fd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsYW5ndWFnZScsIHRoaXMuX3RyYW5zbGF0aW9uLmxhbmd1YWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGxhbmd1YWdlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0aW9uLmxhbmd1YWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbGFuZ3VhZ2UodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPSB0aGlzLl90cmFuc2xhdGlvbi5sYW5ndWFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLl90cmFuc2xhdGlvbi5sYW5ndWFnZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5fbG9nLmRlYnVnKFwiQ2hhbmdpbmcgbGFuZ3VhZ2UgdG8gXCIgKyB2YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZUxvY2FsZSh0aGlzLl90cmFuc2xhdGlvbi5sYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZSgpOyAgIFxyXG5cclxuICAgICAgICAgICAgdGhpcy5fcm9vdFNjb3BlLiRlbWl0KExhbmd1YWdlQ2hhbmdlZEV2ZW50LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RTY29wZS4kZW1pdChSZXNldFBhZ2VFdmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1c2UobGFuZ3VhZ2U6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKGxhbmd1YWdlICE9IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcclxuICAgICAgICByZXR1cm4gdGhpcy5sYW5ndWFnZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VHJhbnNsYXRpb25zKGxhbmd1YWdlOiBzdHJpbmcsIHRyYW5zbGF0aW9uczogYW55KTogdm9pZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0aW9uLnNldFRyYW5zbGF0aW9ucyhsYW5ndWFnZSwgdHJhbnNsYXRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdHJhbnNsYXRpb25zKGxhbmd1YWdlOiBzdHJpbmcsIHRyYW5zbGF0aW9uczogYW55KTogdm9pZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0aW9uLnNldFRyYW5zbGF0aW9ucyhsYW5ndWFnZSwgdHJhbnNsYXRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdHJhbnNsYXRlKGtleTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNsYXRpb24udHJhbnNsYXRlKGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRyYW5zbGF0ZUFycmF5KGtleXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2xhdGlvbi50cmFuc2xhdGVBcnJheShrZXlzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHRyYW5zbGF0ZVNldChrZXlzOiBzdHJpbmdbXSwga2V5UHJvcDogc3RyaW5nLCB2YWx1ZVByb3A6IHN0cmluZyk6IGFueVtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNsYXRpb24udHJhbnNsYXRlU2V0KGtleXMsIGtleVByb3AsIHZhbHVlUHJvcCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRyYW5zbGF0ZU9iamVjdHMoaXRlbXM6IGFueVtdLCBrZXlQcm9wOiBzdHJpbmcsIHZhbHVlUHJvcDogc3RyaW5nKTogYW55W10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2xhdGlvbi50cmFuc2xhdGVPYmplY3RzKGl0ZW1zLCBrZXlQcm9wLCB2YWx1ZVByb3ApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0cmFuc2xhdGVXaXRoUHJlZml4KHByZWZpeDogc3RyaW5nLCBrZXk6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2xhdGlvbi50cmFuc2xhdGVXaXRoUHJlZml4KHByZWZpeCwga2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdHJhbnNsYXRlU2V0V2l0aFByZWZpeChwcmVmaXg6IHN0cmluZywga2V5czogc3RyaW5nW10sIGtleVByb3A6IHN0cmluZywgdmFsdWVQcm9wOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNsYXRpb24udHJhbnNsYXRlU2V0V2l0aFByZWZpeChwcmVmaXgsIGtleXMsIGtleVByb3AsIHZhbHVlUHJvcCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRyYW5zbGF0ZVNldFdpdGhQcmVmaXgyKHByZWZpeDogc3RyaW5nLCBrZXlzOiBzdHJpbmdbXSwga2V5UHJvcDogc3RyaW5nLCB2YWx1ZVByb3A6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2xhdGlvbi50cmFuc2xhdGVTZXRXaXRoUHJlZml4MihwcmVmaXgsIGtleXMsIGtleVByb3AsIHZhbHVlUHJvcCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIFRyYW5zbGF0ZVByb3ZpZGVyIGV4dGVuZHMgVHJhbnNsYXRpb24gaW1wbGVtZW50cyBJVHJhbnNsYXRlUHJvdmlkZXIge1xyXG4gICAgcHJpdmF0ZSBfdHJhbnNsYXRpb246IFRyYW5zbGF0aW9uO1xyXG4gICAgcHJpdmF0ZSBfc2V0Um9vdFZhcjogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBwcml2YXRlIF9wZXJzaXN0OiBib29sZWFuID0gdHJ1ZTtcclxuICAgIHByaXZhdGUgX3NlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2U7XHJcbiAgICBcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc2V0Um9vdFZhcigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0Um9vdFZhcjsgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc2V0Um9vdFZhcih2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3NldFJvb3RWYXIgPSAhIXZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgcGVyc2lzdCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGVyc2lzdDsgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgcGVyc2lzdCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX3BlcnNpc3QgPSAhIXZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyAkZ2V0KFxyXG4gICAgICAgICRyb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlLFxyXG4gICAgICAgICRsb2c6IG5nLklMb2dTZXJ2aWNlLCBcclxuICAgICAgICAkd2luZG93OiBuZy5JV2luZG93U2VydmljZSxcclxuICAgICAgICAkbWREYXRlTG9jYWxlOiBhbmd1bGFyLm1hdGVyaWFsLklEYXRlTG9jYWxlUHJvdmlkZXJcclxuICAgICk6IGFueSB7XHJcbiAgICAgICAgXCJuZ0luamVjdFwiO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fc2VydmljZSA9PSBudWxsKSBcclxuICAgICAgICAgICAgdGhpcy5fc2VydmljZSA9IG5ldyBUcmFuc2xhdGVTZXJ2aWNlKHRoaXMsIHRoaXMuX3NldFJvb3RWYXIsIHRoaXMuX3BlcnNpc3QsICRyb290U2NvcGUsICRsb2csICR3aW5kb3csICRtZERhdGVMb2NhbGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fc2VydmljZTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFRyYW5zbGF0ZShwaXBUcmFuc2xhdGU6IElUcmFuc2xhdGVTZXJ2aWNlKSB7XHJcbiAgICBwaXBUcmFuc2xhdGUubGFuZ3VhZ2U7XHJcbn1cclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ3BpcFRyYW5zbGF0ZScpXHJcbiAgICAucHJvdmlkZXIoJ3BpcFRyYW5zbGF0ZScsIFRyYW5zbGF0ZVByb3ZpZGVyKVxyXG4gICAgLnJ1bihpbml0VHJhbnNsYXRlKTtcclxuIiwiZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9uIHtcclxuICAgIHByb3RlY3RlZCBfbGFuZ3VhZ2U6IHN0cmluZyA9ICdlbic7XHJcbiAgICBwcm90ZWN0ZWQgX3RyYW5zbGF0aW9ucyA9IHtcclxuICAgICAgICBlbjoge1xyXG4gICAgICAgICAgICAnZW4nOiAnRW5nbGlzaCcsXHJcbiAgICAgICAgICAgICdydSc6ICdSdXNzaWFuJyxcclxuICAgICAgICAgICAgJ2VzJzogJ1NwYW5pc2gnLFxyXG4gICAgICAgICAgICAncHQnOiAnUG9ydHVndWVzZScsXHJcbiAgICAgICAgICAgICdkZSc6ICdHZXJtYW4nLFxyXG4gICAgICAgICAgICAnZnInOiAnRnJlbmNoJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcnU6IHtcclxuICAgICAgICAgICAgJ2VuJzogJ9CQ0L3Qs9C70LjQudGB0LrQuNC5JyxcclxuICAgICAgICAgICAgJ3J1JzogJ9Cg0YPRgdGB0LrQuNC5JyxcclxuICAgICAgICAgICAgJ2VzJzogJ9CY0YHQv9Cw0L3RgdC60LjQuScsXHJcbiAgICAgICAgICAgICdwdCc6ICfQn9C+0YDRgtGD0LPQsNC70YzRgdC60LjQuScsXHJcbiAgICAgICAgICAgICdkZSc6ICfQndC10LzQtdGG0LrQuNC5JyxcclxuICAgICAgICAgICAgJ2ZyJzogJ9Ck0YDQsNC90YbRg9C30YHQutC40LknXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAgIHB1YmxpYyBnZXQgbGFuZ3VhZ2UoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX2xhbmd1YWdlOyB9XHJcbiAgICBwdWJsaWMgc2V0IGxhbmd1YWdlKHZhbHVlOiBzdHJpbmcpIHsgdGhpcy5fbGFuZ3VhZ2UgPSB2YWx1ZTsgfVxyXG5cclxuICAgIHB1YmxpYyB1c2UobGFuZ3VhZ2U6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKGxhbmd1YWdlICE9IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMuX2xhbmd1YWdlID0gbGFuZ3VhZ2U7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhbmd1YWdlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNldCB0cmFuc2xhdGlvbiBzdHJpbmdzIGZvciBzcGVjaWZpYyBsYW5ndWFnZVxyXG4gICAgcHVibGljIHNldFRyYW5zbGF0aW9ucyhsYW5ndWFnZTogc3RyaW5nLCB0cmFuc2xhdGlvbnM6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGxldCBtYXAgPSB0aGlzLl90cmFuc2xhdGlvbnNbbGFuZ3VhZ2VdIHx8IHt9O1xyXG4gICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uc1tsYW5ndWFnZV0gPSBfLmV4dGVuZChtYXAsIHRyYW5zbGF0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gWWV0IGFub3RoZXIgbWV0aG9kIHRvIHNldCB0cmFuc2xhdGlvbiBzdHJpbmdzIGZvciBzcGVjaWZpYyBsYW5ndWFnZVxyXG4gICAgcHVibGljIHRyYW5zbGF0aW9ucyhsYW5ndWFnZTogc3RyaW5nLCB0cmFuc2xhdGlvbnM6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0VHJhbnNsYXRpb25zKGxhbmd1YWdlLCB0cmFuc2xhdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRyYW5zbGF0ZSBhIHN0cmluZyBieSBrZXkgdXNpbmcgc2V0IGxhbmd1YWdlXHJcbiAgICBwdWJsaWMgdHJhbnNsYXRlKGtleTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoXy5pc051bGwoa2V5KSB8fCBfLmlzVW5kZWZpbmVkKGtleSkpIHJldHVybiAnJztcclxuXHJcbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucyA9IHRoaXMuX3RyYW5zbGF0aW9uc1t0aGlzLl9sYW5ndWFnZV0gfHwge307XHJcbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0aW9uc1trZXldIHx8IGtleTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUcmFuc2xhdGUgYW4gYXJyYXkgb2Ygc3RyaW5nc1xyXG4gICAgcHVibGljIHRyYW5zbGF0ZUFycmF5KGtleXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGlmIChfLmlzTnVsbChrZXlzKSB8fCBrZXlzLmxlbmd0aCA9PSAwKSByZXR1cm4gW107XHJcblxyXG4gICAgICAgIGxldCB2YWx1ZXM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucyA9IHRoaXMuX3RyYW5zbGF0aW9uc1t0aGlzLl9sYW5ndWFnZV0gfHwge307XHJcblxyXG4gICAgICAgIF8uZWFjaChrZXlzLCBmdW5jdGlvbiAoazogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGxldCBrZXkgPSBrIHx8ICcnO1xyXG4gICAgICAgICAgICB2YWx1ZXMucHVzaCh0cmFuc2xhdGlvbnNba2V5XSB8fCBrZXkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWVzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRyYW5zbGF0ZSBhbiBhcnJheSBvZiBzdHJpbmdzIGludG8gYXJyYXkgb2Ygb2JqZWN0cyAoc2V0KVxyXG4gICAgcHVibGljIHRyYW5zbGF0ZVNldChrZXlzOiBzdHJpbmdbXSwga2V5UHJvcDogc3RyaW5nLCB2YWx1ZVByb3A6IHN0cmluZyk6IGFueVtdIHtcclxuICAgICAgICBpZiAoXy5pc051bGwoa2V5cykgfHwga2V5cy5sZW5ndGggPT0gMCkgcmV0dXJuIFtdO1xyXG5cclxuICAgICAgICBrZXlQcm9wID0ga2V5UHJvcCB8fCAnaWQnO1xyXG4gICAgICAgIHZhbHVlUHJvcCA9IHZhbHVlUHJvcCB8fCAnbmFtZSc7XHJcblxyXG4gICAgICAgIGxldCB2YWx1ZXM6IGFueVtdID0gW107XHJcbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucyA9IHRoaXMuX3RyYW5zbGF0aW9uc1t0aGlzLl9sYW5ndWFnZV0gfHwge307XHJcblxyXG4gICAgICAgIF8uZWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlOiBhbnkgPSB7fTtcclxuICAgICAgICAgICAga2V5ID0ga2V5IHx8ICcnO1xyXG5cclxuICAgICAgICAgICAgdmFsdWVba2V5UHJvcF0gPSBrZXk7XHJcbiAgICAgICAgICAgIHZhbHVlW3ZhbHVlUHJvcF0gPSB0cmFuc2xhdGlvbnNba2V5XSB8fCBrZXk7XHJcblxyXG4gICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVHJhbnNsYXRlIGEgY29sbGVjdGlvbiBvZiBvYmplY3RzXHJcbiAgICBwdWJsaWMgdHJhbnNsYXRlT2JqZWN0cyhpdGVtczogYW55W10sIGtleVByb3A6IHN0cmluZywgdmFsdWVQcm9wOiBzdHJpbmcpOiBhbnlbXSB7XHJcbiAgICAgICAgaWYgKF8uaXNOdWxsKGl0ZW1zKSB8fCBpdGVtcy5sZW5ndGggPT0gMCkgcmV0dXJuIFtdO1xyXG5cclxuICAgICAgICBrZXlQcm9wID0ga2V5UHJvcCB8fCAnbmFtZSc7XHJcbiAgICAgICAgdmFsdWVQcm9wID0gdmFsdWVQcm9wIHx8ICduYW1lTG9jYWwnO1xyXG5cclxuICAgICAgICBsZXQgdHJhbnNsYXRpb25zID0gdGhpcy5fdHJhbnNsYXRpb25zW3RoaXMuX2xhbmd1YWdlXSB8fCB7fTtcclxuXHJcbiAgICAgICAgXy5lYWNoKGl0ZW1zLCBmdW5jdGlvbiAoaXRlbTogYW55KSB7XHJcbiAgICAgICAgICAgIGxldCBrZXkgPSBpdGVtW2tleVByb3BdIHx8ICcnO1xyXG5cclxuICAgICAgICAgICAgaXRlbVt2YWx1ZVByb3BdID0gdHJhbnNsYXRpb25zW2tleV0gfHwga2V5O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gaXRlbXM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVHJhbnNsYXRlIGEgc3RyaW5nIGJ5IGtleSAgd2l0aCBwcmVmaXggdXNpbmcgc2V0IGxhbmd1YWdlIHRvZG9cclxuICAgIHB1YmxpYyB0cmFuc2xhdGVXaXRoUHJlZml4KHByZWZpeDogc3RyaW5nLCBrZXk6IHN0cmluZykge1xyXG4gICAgICAgIHByZWZpeCA9IHByZWZpeCA/IHByZWZpeCArICdfJyA6ICcnO1xyXG4gICAgICAgIGtleSA9IChwcmVmaXggKyBrZXkpLnJlcGxhY2UoLyAvZywgJ18nKS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgIGlmIChrZXkgPT0gbnVsbCkgcmV0dXJuICcnO1xyXG4gICAgICAgIGxldCB0cmFuc2xhdGlvbnMgPSB0aGlzLl90cmFuc2xhdGlvbnNbdGhpcy5fbGFuZ3VhZ2VdIHx8IHt9O1xyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnNba2V5XSB8fCBrZXk7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyB0cmFuc2xhdGVTZXRXaXRoUHJlZml4KHByZWZpeDogc3RyaW5nLCBrZXlzOiBzdHJpbmdbXSwga2V5UHJvcDogc3RyaW5nLCB2YWx1ZVByb3A6IHN0cmluZykge1xyXG4gICAgICAgIGlmIChfLmlzTnVsbChrZXlzKSB8fCBrZXlzLmxlbmd0aCA9PSAwKSByZXR1cm4gW107XHJcblxyXG4gICAgICAgIHByZWZpeCA9IHByZWZpeCA/IHByZWZpeC5yZXBsYWNlKC8gL2csICdfJykudG9VcHBlckNhc2UoKSA6ICcnO1xyXG4gICAgICAgIGtleVByb3AgPSBrZXlQcm9wIHx8ICdpZCc7XHJcbiAgICAgICAgdmFsdWVQcm9wID0gdmFsdWVQcm9wIHx8ICduYW1lJztcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlcyA9IFtdO1xyXG4gICAgICAgIGxldCB0cmFuc2xhdGlvbnMgPSB0aGlzLl90cmFuc2xhdGlvbnNbdGhpcy5fbGFuZ3VhZ2VdIHx8IHt9O1xyXG5cclxuICAgICAgICBfLmVhY2goa2V5cywgZnVuY3Rpb24gKGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZTogYW55ID0ge307IFxyXG4gICAgICAgICAgICBrZXkgPSBrZXkgfHwgJyc7XHJcblxyXG4gICAgICAgICAgICB2YWx1ZVtrZXlQcm9wXSA9IGtleTtcclxuICAgICAgICAgICAgdmFsdWVbdmFsdWVQcm9wXSA9IHRyYW5zbGF0aW9uc1twcmVmaXggKyAnXycgKyBrZXldIHx8IGtleTtcclxuXHJcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcclxuICAgIH1cclxuXHJcbiAgICAvLyBUcmFuc2xhdGUgYW4gYXJyYXkgb2Ygc3RyaW5ncywgYXBwbHkgdXBwZXJjYXNlIGFuZCByZXBsYWNlICcgJyA9PiAnXydcclxuICAgIHB1YmxpYyB0cmFuc2xhdGVTZXRXaXRoUHJlZml4MihwcmVmaXg6IHN0cmluZywga2V5czogc3RyaW5nW10sIGtleVByb3A6IHN0cmluZywgdmFsdWVQcm9wOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoXy5pc051bGwoa2V5cykgfHwga2V5cy5sZW5ndGggPT0gMCkgcmV0dXJuIFtdO1xyXG5cclxuICAgICAgICBrZXlQcm9wID0ga2V5UHJvcCB8fCAnaWQnO1xyXG4gICAgICAgIHZhbHVlUHJvcCA9IHZhbHVlUHJvcCB8fCAnbmFtZSc7XHJcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ID8gcHJlZml4LnJlcGxhY2UoLyAvZywgJ18nKS50b1VwcGVyQ2FzZSgpICsgJ18nOiAnJztcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlcyA9IFtdO1xyXG4gICAgICAgIGxldCB0cmFuc2xhdGlvbnMgPSB0aGlzLl90cmFuc2xhdGlvbnNbdGhpcy5fbGFuZ3VhZ2VdIHx8IHt9O1xyXG5cclxuICAgICAgICBfLmVhY2goa2V5cywgZnVuY3Rpb24gKGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZTogYW55ID0ge307XHJcbiAgICAgICAgICAgIGtleSA9IGtleSB8fCAnJztcclxuXHJcbiAgICAgICAgICAgIHZhbHVlW2tleVByb3BdID0ga2V5O1xyXG4gICAgICAgICAgICB2YWx1ZVt2YWx1ZVByb3BdID0gdHJhbnNsYXRpb25zW3ByZWZpeCArIGtleS5yZXBsYWNlKC8gL2csICdfJykudG9VcHBlckNhc2UoKV1cclxuICAgICAgICAgICAgICAgIHx8IChwcmVmaXggKyBrZXkucmVwbGFjZSgvIC9nLCAnXycpLnRvVXBwZXJDYXNlKCkpO1xyXG5cclxuICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWVzO1xyXG4gICAgfVxyXG59XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdwaXBUcmFuc2xhdGUnLCBbXSk7XHJcblxyXG5pbXBvcnQgJy4vVHJhbnNsYXRpb24nO1xyXG5pbXBvcnQgJy4vVHJhbnNsYXRlU2VydmljZSc7XHJcbmltcG9ydCAnLi9UcmFuc2xhdGVGaWx0ZXInO1xyXG5pbXBvcnQgJy4vVHJhbnNsYXRlRGlyZWN0aXZlJztcclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vVHJhbnNsYXRpb24nO1xyXG5leHBvcnQgKiBmcm9tICcuL0lUcmFuc2xhdGVTZXJ2aWNlJztcclxuZXhwb3J0ICogZnJvbSAnLi9UcmFuc2xhdGVTZXJ2aWNlJztcclxuIiwiaW1wb3J0IHsgSUNvZGVzIH0gZnJvbSAnLi9JQ29kZXMnO1xyXG5cclxuY2xhc3MgQ29kZXMgaW1wbGVtZW50cyBJQ29kZXMge1xyXG4gICAgLy8gU2ltcGxlIHZlcnNpb24gb2Ygc3RyaW5nIGhhc2hjb2RlXHJcbiAgICBwdWJsaWMgaGFzaCh2YWx1ZTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHJlc3VsdDogbnVtYmVyID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICByZXN1bHQgKz0gdmFsdWUuY2hhckNvZGVBdChpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZW5lcmF0ZXMgcmFuZG9tIGJpZyBudW1iZXIgZm9yIHZlcmlmaWNhdGlvbiBjb2Rlc1xyXG4gICAgcHVibGljIHZlcmlmaWNhdGlvbigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgMTApLnRvVXBwZXJDYXNlKCk7IC8vIHJlbW92ZSBgMC5gXHJcbiAgICB9XHJcbn1cclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ3BpcENvZGVzJywgW10pXHJcbiAgICAuc2VydmljZSgncGlwQ29kZXMnLCBDb2Rlcyk7XHJcbiIsImltcG9ydCB7IElGb3JtYXQgfSBmcm9tICcuL0lGb3JtYXQnO1xyXG5cclxuY2xhc3MgRm9ybWF0IGltcGxlbWVudHMgSUZvcm1hdCB7XHJcbiAgICAvLyBDYWNoZWQgZm9yIHBhcnNlZCBmb3JtYXRzXHJcbiAgICBwcml2YXRlIGNhY2hlID0ge307XHJcblxyXG4gICAgLy8gQ3JlYXRlcyBhIHNhbXBsZSBsaW5lIGZyb20gYSB0ZXh0XHJcbiAgICBwdWJsaWMgc2FtcGxlKHZhbHVlOiBzdHJpbmcsIG1heExlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBsZW5ndGg6IG51bWJlciA9IHZhbHVlLmluZGV4T2YoJ1xcbicpO1xyXG4gICAgICAgIGxlbmd0aCA9IGxlbmd0aCA+PSAwID8gbGVuZ3RoIDogdmFsdWUubGVuZ3RoO1xyXG4gICAgICAgIGxlbmd0aCA9IGxlbmd0aCA8IG1heExlbmd0aCA/IHZhbHVlLmxlbmd0aCA6IG1heExlbmd0aDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZygwLCBsZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RyUmVwZWF0KHN0cjogc3RyaW5nLCBxdHk6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHF0eSA8IDEpIHsgXHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdDogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgd2hpbGUgKHF0eSA+IDApIHtcclxuICAgICAgICAgICAgaWYgKHF0eSAmIDEpIHJlc3VsdCArPSBzdHI7XHJcbiAgICAgICAgICAgIHF0eSA+Pj0gMSwgc3RyICs9IHN0cjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFR5cGUodmFyaWFibGUpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhcmlhYmxlKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBhcnNlRm9ybWF0KGZtdDogc3RyaW5nKTogYW55IHtcclxuICAgICAgICBsZXQgX2ZtdDogc3RyaW5nID0gZm10LCBtYXRjaCA9IFtdLCBwYXJzZV90cmVlID0gW10sIGFyZ19uYW1lczogbnVtYmVyID0gMDtcclxuICAgICAgICB3aGlsZSAoX2ZtdCkge1xyXG4gICAgICAgICAgICBpZiAoKG1hdGNoID0gL15bXlxceDI1XSsvLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2gobWF0Y2hbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IC9eXFx4MjV7Mn0vLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2goJyUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSAvXlxceDI1KD86KFsxLTldXFxkKilcXCR8XFwoKFteXFwpXSspXFwpKT8oXFwrKT8oMHwnW14kXSk/KC0pPyhcXGQrKT8oPzpcXC4oXFxkKykpPyhbYi1mb3N1eFhdKS8uZXhlYyhfZm10KSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaFsyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZ19uYW1lcyB8PSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWVsZF9saXN0OiBzdHJpbmdbXSA9IFtdLCByZXBsYWNlbWVudF9maWVsZDogc3RyaW5nID0gbWF0Y2hbMl0sIGZpZWxkX21hdGNoOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSAvXihbYS16X11bYS16X1xcZF0qKS9pLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKHJlcGxhY2VtZW50X2ZpZWxkID0gcmVwbGFjZW1lbnRfZmllbGQuc3Vic3RyaW5nKGZpZWxkX21hdGNoWzBdLmxlbmd0aCkpICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChmaWVsZF9tYXRjaCA9IC9eXFwuKFthLXpfXVthLXpfXFxkXSopL2kuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChmaWVsZF9tYXRjaCA9IC9eXFxbKFxcZCspXFxdLy5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVycm9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlcnJvcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSA9IGZpZWxkX2xpc3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmdfbmFtZXMgfD0gMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhcmdfbmFtZXMgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01peGluZyBwb3NpdGlvbmFsIGFuZCBuYW1lZCBwbGFjZWhvbGRlcnMgaXMgbm90ICh5ZXQpIHN1cHBvcnRlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKG1hdGNoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlcnJvcicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9mbXQgPSBfZm10LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyc2VfdHJlZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZvcm1hdChwYXJzZV90cmVlOiBhbnksIGFyZ3Y6IGFueSk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGN1cnNvcjogbnVtYmVyID0gMDsgXHJcbiAgICAgICAgbGV0IHRyZWVfbGVuZ3RoOiBudW1iZXIgPSBwYXJzZV90cmVlLmxlbmd0aDsgXHJcbiAgICAgICAgbGV0IG91dHB1dCA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyZWVfbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IG5vZGVfdHlwZSA9IHRoaXMuZ2V0VHlwZShwYXJzZV90cmVlW2ldKTtcclxuICAgICAgICAgICAgaWYgKG5vZGVfdHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHBhcnNlX3RyZWVbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG5vZGVfdHlwZSA9PT0gJ2FycmF5Jykge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gcGFyc2VfdHJlZVtpXTsgLy8gY29udmVuaWVuY2UgcHVycG9zZXMgb25seVxyXG4gICAgICAgICAgICAgICAgbGV0IGFyZzogYW55O1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoWzJdKSB7IC8vIGtleXdvcmQgYXJndW1lbnRcclxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcl07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBtYXRjaFsyXS5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZy5oYXNPd25Qcm9wZXJ0eShtYXRjaFsyXVtrXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLnNwcmludGYoJ1Byb3BlcnR5IFwiJXNcIiBkb2VzIG5vdCBleGlzdCcsIG1hdGNoWzJdW2tdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnW21hdGNoWzJdW2tdXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoWzFdKSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGV4cGxpY2l0KVxyXG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbbWF0Y2hbMV1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGltcGxpY2l0KVxyXG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbY3Vyc29yKytdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICgvW15zXS8udGVzdChtYXRjaFs4XSkgJiYgKHRoaXMuZ2V0VHlwZShhcmcpICE9ICdudW1iZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLnNwcmludGYoJ0V4cGVjdGluZyBudW1iZXIgYnV0IGZvdW5kICVzJywgdGhpcy5nZXRUeXBlKGFyZykpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hbOF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdiJzogYXJnID0gYXJnLnRvU3RyaW5nKDIpOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzogYXJnID0gU3RyaW5nLmZyb21DaGFyQ29kZShhcmcpOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdkJzogYXJnID0gcGFyc2VJbnQoYXJnLCAxMCk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2UnOiBhcmcgPSBtYXRjaFs3XSA/IGFyZy50b0V4cG9uZW50aWFsKG1hdGNoWzddKSA6IGFyZy50b0V4cG9uZW50aWFsKCk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOiBhcmcgPSBtYXRjaFs3XSA/IHBhcnNlRmxvYXQoYXJnKS50b0ZpeGVkKG1hdGNoWzddKSA6IHBhcnNlRmxvYXQoYXJnKTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbyc6IGFyZyA9IGFyZy50b1N0cmluZyg4KTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncyc6IGFyZyA9ICgoYXJnID0gU3RyaW5nKGFyZykpICYmIG1hdGNoWzddID8gYXJnLnN1YnN0cmluZygwLCBtYXRjaFs3XSkgOiBhcmcpOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd1JzogYXJnID0gTWF0aC5hYnMoYXJnKTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneCc6IGFyZyA9IGFyZy50b1N0cmluZygxNik7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1gnOiBhcmcgPSBhcmcudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXJnID0gKC9bZGVmXS8udGVzdChtYXRjaFs4XSkgJiYgbWF0Y2hbM10gJiYgYXJnID49IDAgPyAnKycrIGFyZyA6IGFyZyk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IHBhZF9jaGFyYWN0ZXIgPSBtYXRjaFs0XSA/IG1hdGNoWzRdID09ICcwJyA/ICcwJyA6IG1hdGNoWzRdLmNoYXJBdCgxKSA6ICcgJztcclxuICAgICAgICAgICAgICAgIGxldCBwYWRfbGVuZ3RoID0gbWF0Y2hbNl0gLSBTdHJpbmcoYXJnKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFkID0gbWF0Y2hbNl0gPyB0aGlzLnN0clJlcGVhdChwYWRfY2hhcmFjdGVyLCBwYWRfbGVuZ3RoKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gobWF0Y2hbNV0gPyBhcmcgKyBwYWQgOiBwYWQgKyBhcmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQuam9pbignJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBzcHJpbnRmKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICghdGhpcy5jYWNoZS5oYXNPd25Qcm9wZXJ0eShtZXNzYWdlKSlcclxuICAgICAgICAgICAgdGhpcy5jYWNoZVttZXNzYWdlXSA9IHRoaXMucGFyc2VGb3JtYXQobWVzc2FnZSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdCh0aGlzLmNhY2hlW21lc3NhZ2VdLCBhcmdzKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ3BpcEZvcm1hdCcsIFtdKVxyXG4gICAgLnNlcnZpY2UoJ3BpcEZvcm1hdCcsIEZvcm1hdCk7XHJcbiIsImltcG9ydCB7IElQYWdlUmVzZXRTZXJ2aWNlIH0gZnJvbSAnLi9JUGFnZVJlc2V0U2VydmljZSc7XHJcblxyXG5cclxuZXhwb3J0IGxldCBSZXNldFBhZ2VFdmVudDogc3RyaW5nID0gXCJwaXBSZXNldFBhZ2VcIjtcclxuZXhwb3J0IGxldCBSZXNldEFyZWFFdmVudDogc3RyaW5nID0gXCJwaXBSZXNldEFyZWFcIjtcclxuXHJcbmV4cG9ydCBsZXQgUmVzZXRSb290VmFyOiBzdHJpbmcgPSBcIiRyZXNldFwiO1xyXG5leHBvcnQgbGV0IFJlc2V0QXJlYVJvb3RWYXI6IHN0cmluZyA9IFwiJHJlc2V0QXJlYVwiO1xyXG5cclxuXHJcbmNsYXNzIFBhZ2VSZXNldFNlcnZpY2UgaW1wbGVtZW50cyBJUGFnZVJlc2V0U2VydmljZSB7XHJcbiAgICBwcml2YXRlIF9yb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBfbG9nOiBuZy5JTG9nU2VydmljZTtcclxuICAgIHByaXZhdGUgX3RpbWVvdXQ6IG5nLklUaW1lb3V0U2VydmljZTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgICAgJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UsXHJcbiAgICAgICAgJGxvZzogbmcuSUxvZ1NlcnZpY2UsIFxyXG4gICAgICAgICR0aW1lb3V0OiBuZy5JVGltZW91dFNlcnZpY2VcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuX3Jvb3RTY29wZSA9ICRyb290U2NvcGU7XHJcbiAgICAgICAgdGhpcy5fbG9nID0gJGxvZztcclxuICAgICAgICB0aGlzLl90aW1lb3V0ID0gJHRpbWVvdXQ7XHJcblxyXG4gICAgICAgICRyb290U2NvcGVbUmVzZXRSb290VmFyXSA9IGZhbHNlO1xyXG4gICAgICAgICRyb290U2NvcGVbUmVzZXRBcmVhUm9vdFZhcl0gPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9sb2cuZGVidWcoXCJSZXNldHRpbmcgdGhlIGVudGlyZSBwYWdlXCIpO1xyXG4gICAgICAgIHRoaXMucGVyZm9ybVJlc2V0KG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXNldEFyZWEoYXJlYTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbG9nLmRlYnVnKFwiUmVzZXR0aW5nIHRoZSBhcmVhIFwiICsgYXJlYSk7XHJcbiAgICAgICAgdGhpcy5wZXJmb3JtUmVzZXQoYXJlYSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwZXJmb3JtUmVzZXQoYXJlYT86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3Jvb3RTY29wZVtSZXNldFJvb3RWYXJdID0gYXJlYSA9PSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3Jvb3RTY29wZVtSZXNldEFyZWFSb290VmFyXSA9IGFyZWE7XHJcblxyXG4gICAgICAgIHRoaXMuX3RpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9yb290U2NvcGVbUmVzZXRSb290VmFyXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9yb290U2NvcGVbUmVzZXRBcmVhUm9vdFZhcl0gPSBudWxsO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gaG9va1Jlc2V0RXZlbnRzKFxyXG4gICAgJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UsIFxyXG4gICAgcGlwUGFnZVJlc2V0OiBJUGFnZVJlc2V0U2VydmljZVxyXG4pIHtcclxuICAgICRyb290U2NvcGUuJG9uKFJlc2V0UGFnZUV2ZW50LCAoKSA9PiB7IHBpcFBhZ2VSZXNldC5yZXNldCgpOyB9KTtcclxuICAgICRyb290U2NvcGUuJG9uKFJlc2V0QXJlYUV2ZW50LCAoZXZlbnQsIGFyZWEpID0+IHsgcGlwUGFnZVJlc2V0LnJlc2V0QXJlYShhcmVhKTsgfSk7XHJcbn1cclxuXHJcblxyXG5hbmd1bGFyLm1vZHVsZSgncGlwUGFnZVJlc2V0JywgW10pXHJcbiAgICAuc2VydmljZSgncGlwUGFnZVJlc2V0JywgUGFnZVJlc2V0U2VydmljZSlcclxuICAgIC5ydW4oaG9va1Jlc2V0RXZlbnRzKTtcclxuIiwiaW1wb3J0IHsgSVNjcm9sbFNlcnZpY2UgfSBmcm9tICcuL0lTY3JvbGxTZXJ2aWNlJztcclxuXHJcblxyXG5jbGFzcyBTY3JvbGxTZXJ2aWNlIGltcGxlbWVudHMgSVNjcm9sbFNlcnZpY2Uge1xyXG5cclxuICAgIHB1YmxpYyBzY3JvbGxUbyhwYXJlbnRFbGVtZW50LCBjaGlsZEVsZW1lbnQsIGFuaW1hdGlvbkR1cmF0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFwYXJlbnRFbGVtZW50IHx8ICFjaGlsZEVsZW1lbnQpIHJldHVybjtcclxuICAgICAgICBpZiAoYW5pbWF0aW9uRHVyYXRpb24gPT0gdW5kZWZpbmVkKSBhbmltYXRpb25EdXJhdGlvbiA9IDMwMDtcclxuXHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghJChjaGlsZEVsZW1lbnQpLnBvc2l0aW9uKCkpIHJldHVybjtcclxuICAgICAgICAgICAgdmFyIG1vZERpZmY9IE1hdGguYWJzKCQocGFyZW50RWxlbWVudCkuc2Nyb2xsVG9wKCkgLSAkKGNoaWxkRWxlbWVudCkucG9zaXRpb24oKS50b3ApO1xyXG4gICAgICAgICAgICBpZiAobW9kRGlmZiA8IDIwKSByZXR1cm47XHJcbiAgICAgICAgICAgIHZhciBzY3JvbGxUbyA9ICQocGFyZW50RWxlbWVudCkuc2Nyb2xsVG9wKCkgKyAoJChjaGlsZEVsZW1lbnQpLnBvc2l0aW9uKCkudG9wIC0gMjApO1xyXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uRHVyYXRpb24gPiAwKVxyXG4gICAgICAgICAgICAgICAgJChwYXJlbnRFbGVtZW50KS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IHNjcm9sbFRvICsgJ3B4J1xyXG4gICAgICAgICAgICAgICAgfSwgYW5pbWF0aW9uRHVyYXRpb24pO1xyXG4gICAgICAgIH0sIDEwMCk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgncGlwU2Nyb2xsJywgW10pXHJcbiAgICAuc2VydmljZSgncGlwU2Nyb2xsJywgU2Nyb2xsU2VydmljZSk7XHJcbiIsImltcG9ydCB7IElTeXN0ZW1JbmZvIH0gZnJvbSAnLi9JU3lzdGVtSW5mbyc7XHJcblxyXG5cclxuY2xhc3MgU3lzdGVtSW5mbyBpbXBsZW1lbnRzIElTeXN0ZW1JbmZvIHtcclxuICAgIHByaXZhdGUgX3dpbmRvdzogbmcuSVdpbmRvd1NlcnZpY2U7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCR3aW5kb3c6IG5nLklXaW5kb3dTZXJ2aWNlKSB7XHJcbiAgICAgICAgXCJuZ0luamVjdFwiO1xyXG5cclxuICAgICAgICB0aGlzLl93aW5kb3cgPSAkd2luZG93O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHRvZG8gYWRkIHN1cHBvcnQgZm9yIGlQaG9uZVxyXG4gICAgcHVibGljIGdldCBicm93c2VyTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCB1YSA9IHRoaXMuX3dpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xyXG5cclxuICAgICAgICBpZiAodWEuc2VhcmNoKC9FZGdlLykgPiAtMSkgcmV0dXJuIFwiZWRnZVwiO1xyXG4gICAgICAgIGlmICh1YS5zZWFyY2goL01TSUUvKSA+IC0xKSByZXR1cm4gXCJpZVwiO1xyXG4gICAgICAgIGlmICh1YS5zZWFyY2goL1RyaWRlbnQvKSA+IC0xKSByZXR1cm4gXCJpZVwiO1xyXG4gICAgICAgIGlmICh1YS5zZWFyY2goL0ZpcmVmb3gvKSA+IC0xKSByZXR1cm4gXCJmaXJlZm94XCI7XHJcbiAgICAgICAgaWYgKHVhLnNlYXJjaCgvT3BlcmEvKSA+IC0xKSByZXR1cm4gXCJvcGVyYVwiO1xyXG4gICAgICAgIGlmICh1YS5zZWFyY2goL09QUi8pID4gLTEpIHJldHVybiBcIm9wZXJhXCI7XHJcbiAgICAgICAgaWYgKHVhLnNlYXJjaCgvWWFCcm93c2VyLykgPiAtMSkgcmV0dXJuIFwieWFicm93c2VyXCI7XHJcbiAgICAgICAgaWYgKHVhLnNlYXJjaCgvQ2hyb21lLykgPiAtMSkgcmV0dXJuIFwiY2hyb21lXCI7XHJcbiAgICAgICAgaWYgKHVhLnNlYXJjaCgvU2FmYXJpLykgPiAtMSkgcmV0dXJuIFwic2FmYXJpXCI7XHJcbiAgICAgICAgaWYgKHVhLnNlYXJjaCgvTWF4dGhvbi8pID4gLTEpIHJldHVybiBcIm1heHRob25cIjtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gXCJ1bmtub3duXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBicm93c2VyVmVyc2lvbigpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCB2ZXJzaW9uO1xyXG4gICAgICAgIGxldCB1YSA9IHRoaXMuX3dpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xyXG4gICAgICAgIGxldCBicm93c2VyID0gdGhpcy5icm93c2VyTmFtZTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChicm93c2VyKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJlZGdlXCI6XHJcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gKHVhLnNwbGl0KFwiRWRnZVwiKVsxXSkuc3BsaXQoXCIvXCIpWzFdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpZVwiOlxyXG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9ICh1YS5zcGxpdChcIk1TSUUgXCIpWzFdKS5zcGxpdChcIjtcIilbMF07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImllMTFcIjpcclxuICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBcImllXCI7XHJcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gKHVhLnNwbGl0KFwiOyBydjpcIilbMV0pLnNwbGl0KFwiKVwiKVswXTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZmlyZWZveFwiOlxyXG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9IHVhLnNwbGl0KFwiRmlyZWZveC9cIilbMV07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm9wZXJhXCI6XHJcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gdWEuc3BsaXQoXCJWZXJzaW9uL1wiKVsxXTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwib3BlcmFXZWJraXRcIjpcclxuICAgICAgICAgICAgICAgIHZlcnNpb24gPSB1YS5zcGxpdChcIk9QUi9cIilbMV07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInlhYnJvd3NlclwiOlxyXG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9ICh1YS5zcGxpdChcIllhQnJvd3Nlci9cIilbMV0pLnNwbGl0KFwiIFwiKVswXTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY2hyb21lXCI6XHJcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gKHVhLnNwbGl0KFwiQ2hyb21lL1wiKVsxXSkuc3BsaXQoXCIgXCIpWzBdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzYWZhcmlcIjpcclxuICAgICAgICAgICAgICAgIHZlcnNpb24gPSAodWEuc3BsaXQoXCJWZXJzaW9uL1wiKVsxXSkuc3BsaXQoXCIgXCIpWzBdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJtYXh0aG9uXCI6XHJcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gdWEuc3BsaXQoXCJNYXh0aG9uL1wiKVsxXTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZlcnNpb247XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBnZXQgcGxhdGZvcm0oKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgdWEgPSB0aGlzLl93aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuXHJcbiAgICAgICAgaWYgKC9pcGhvbmV8aXBhZHxpcG9kfGFuZHJvaWR8YmxhY2tiZXJyeXxtaW5pfHdpbmRvd3NcXHNjZXxwYWxtL2kudGVzdCh1YS50b0xvd2VyQ2FzZSgpKSkgXHJcbiAgICAgICAgICAgIHJldHVybiAnbW9iaWxlJztcclxuXHJcbiAgICAgICAgcmV0dXJuICdkZXNrdG9wJztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IG9zKCk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHVhID0gdGhpcy5fd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGxldCBvc0FsbCA9ICgvKHdpbmRvd3N8bWFjfGFuZHJvaWR8bGludXh8YmxhY2tiZXJyeXxzdW5vc3xzb2xhcmlzfGlwaG9uZSkvLmV4ZWModWEudG9Mb3dlckNhc2UoKSkgfHwgW3VhXSlbMF0ucmVwbGFjZSgnc3Vub3MnLCAnc29sYXJpcycpO1xyXG4gICAgICAgICAgICBsZXQgb3NBbmRyb2lkID0gKC8oYW5kcm9pZCkvLmV4ZWModWEudG9Mb3dlckNhc2UoKSkgfHwgJycpO1xyXG4gICAgICAgICAgICByZXR1cm4gb3NBbmRyb2lkICYmIChvc0FuZHJvaWQgPT0gJ2FuZHJvaWQnIHx8IChvc0FuZHJvaWRbMF0gPT0gJ2FuZHJvaWQnKSkgPyAnYW5kcm9pZCcgOiBvc0FsbDtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuICd1bmtub3duJ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNEZXNrdG9wKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBsYXRmb3JtID09ICdkZXNrdG9wJztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNNb2JpbGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGxhdGZvcm0gPT0gJ21vYmlsZSc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVG9kbzogY29tcGxldGUgaW1wbGVtZW50YXRpb25cclxuICAgIHB1YmxpYyBpc0NvcmRvdmEoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRvZG86IE1vdmUgdG8gZXJyb3JzXHJcbiAgICBwdWJsaWMgaXNTdXBwb3J0ZWQoc3VwcG9ydGVkPzogYW55KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdXBwb3J0ZWQpIFxyXG4gICAgICAgICAgICBzdXBwb3J0ZWQgPSB7XHJcbiAgICAgICAgICAgICAgICBlZGdlOiAxMSxcclxuICAgICAgICAgICAgICAgIGllOiAxMSxcclxuICAgICAgICAgICAgICAgIGZpcmVmb3g6IDQzLCAvLzQsIGZvciB0ZXN0aW5nXHJcbiAgICAgICAgICAgICAgICBvcGVyYTogMzUsXHJcbiAgICAgICAgICAgICAgICBjaHJvbWU6IDQ3XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIGxldCBicm93c2VyID0gdGhpcy5icm93c2VyTmFtZTtcclxuICAgICAgICBsZXQgdmVyc2lvbiA9IHRoaXMuYnJvd3NlclZlcnNpb247XHJcbiAgICAgICAgdmVyc2lvbiA9IHZlcnNpb24uc3BsaXQoXCIuXCIpWzBdXHJcblxyXG4gICAgICAgIGlmIChicm93c2VyICYmIHN1cHBvcnRlZFticm93c2VyXSAmJiB2ZXJzaW9uID49IHN1cHBvcnRlZFticm93c2VyXSkgXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ3BpcFN5c3RlbUluZm8nLCBbXSlcclxuICAgIC5zZXJ2aWNlKCdwaXBTeXN0ZW1JbmZvJywgU3lzdGVtSW5mbyk7XHJcbiIsImltcG9ydCB7IElUYWdzIH0gZnJvbSAnLi9JVGFncyc7XHJcblxyXG5jbGFzcyBUYWdzIGltcGxlbWVudHMgSVRhZ3Mge1xyXG5cclxuICAgIHB1YmxpYyBub3JtYWxpemVPbmUodGFnOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0YWcgXHJcbiAgICAgICAgICAgID8gXy50cmltKHRhZy5yZXBsYWNlKC8oX3wjKSsvZywgJyAnKSlcclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb21wcmVzc09uZSh0YWc6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRhZ1xyXG4gICAgICAgICAgICA/IHRhZy5yZXBsYWNlKC8oIHxffCMpL2csICcnKS50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZXF1YWwodGFnMTogc3RyaW5nLCB0YWcyOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGFnMSA9PSBudWxsICYmIHRhZzIgPT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKHRhZzEgPT0gbnVsbCB8fCB0YWcyID09IG51bGwpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wcmVzc09uZSh0YWcxKSA9PSB0aGlzLmNvbXByZXNzT25lKHRhZzIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBub3JtYWxpemVBbGwodGFnczogYW55KTogc3RyaW5nW10ge1xyXG4gICAgICAgIGlmIChfLmlzU3RyaW5nKHRhZ3MpKVxyXG4gICAgICAgICAgICB0YWdzID0gdGFncy5zcGxpdCgvKCB8LHw7KSsvKTtcclxuXHJcbiAgICAgICAgdGFncyA9IF8ubWFwKHRhZ3MsICh0YWc6IHN0cmluZykgPT4gdGhpcy5ub3JtYWxpemVPbmUodGFnKSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0YWdzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb21wcmVzc0FsbCh0YWdzOiBhbnkpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgaWYgKF8uaXNTdHJpbmcodGFncykpXHJcbiAgICAgICAgICAgIHRhZ3MgPSB0YWdzLnNwbGl0KC8oIHwsfDspKy8pO1xyXG5cclxuICAgICAgICB0YWdzID0gXy5tYXAodGFncywgKHRhZzogc3RyaW5nKSA9PiB0aGlzLmNvbXByZXNzT25lKHRhZykpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGFncztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZXh0cmFjdChlbnRpdHk6IGFueSwgc2VhcmNoRmllbGRzPzogc3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgbGV0IHRhZ3MgPSB0aGlzLm5vcm1hbGl6ZUFsbChlbnRpdHkudGFncyk7XHJcblxyXG4gICAgICAgIF8uZWFjaChzZWFyY2hGaWVsZHMsIChmaWVsZCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdGV4dCA9IGVudGl0eVtmaWVsZF0gfHwgJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAodGV4dCAhPSAnJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGhhc2hUYWdzID0gdGV4dC5tYXRjaCgvI1xcdysvZyk7XHJcbiAgICAgICAgICAgICAgICB0YWdzID0gdGFncy5jb25jYXQodGhpcy5ub3JtYWxpemVBbGwoaGFzaFRhZ3MpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gXy51bmlxKHRhZ3MpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuYW5ndWxhclxyXG4gICAgLm1vZHVsZSgncGlwVGFncycsIFtdKVxyXG4gICAgLnNlcnZpY2UoJ3BpcFRhZ3MnLCBUYWdzKTtcclxuIiwiaW1wb3J0IHsgSVRpbWVyU2VydmljZSB9IGZyb20gJy4vSVRpbWVyU2VydmljZSc7XHJcblxyXG5jbGFzcyBUaW1lckV2ZW50IHtcclxuICAgIHB1YmxpYyBldmVudDogc3RyaW5nO1xyXG4gICAgcHVibGljIHRpbWVvdXQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyBpbnRlcnZhbDogYW55O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihldmVudDogc3RyaW5nLCB0aW1lb3V0OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XHJcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmxldCBEZWZhdWx0RXZlbnRzOiBUaW1lckV2ZW50W10gPSBbXHJcbiAgICBuZXcgVGltZXJFdmVudCgncGlwQXV0b1B1bGxDaGFuZ2VzJywgNjAwMDApLCAvLyAxIG1pblxyXG4gICAgbmV3IFRpbWVyRXZlbnQoJ3BpcEF1dG9VcGRhdGVQYWdlJywgMTUwMDApLCAvLyAxNSBzZWNcclxuICAgIG5ldyBUaW1lckV2ZW50KCdwaXBBdXRvVXBkYXRlQ29sbGVjdGlvbicsIDMwMDAwMCkgLy8gNSBtaW5cclxuXTtcclxuXHJcblxyXG5jbGFzcyBUaW1lclNlcnZpY2UgaW1wbGVtZW50cyBJVGltZXJTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgX3Jvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2U7XHJcbiAgICBwcml2YXRlIF9sb2c6IG5nLklMb2dTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBfaW50ZXJ2YWw6IG5nLklJbnRlcnZhbFNlcnZpY2U7ICAgICAgICBcclxuICAgIHByaXZhdGUgX3N0YXJ0ZWQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgX2V2ZW50czogVGltZXJFdmVudFtdID0gXy5jbG9uZURlZXAoRGVmYXVsdEV2ZW50cyk7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgICRyb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlLFxyXG4gICAgICAgICRsb2c6IG5nLklMb2dTZXJ2aWNlLCBcclxuICAgICAgICAkaW50ZXJ2YWw6IG5nLklJbnRlcnZhbFNlcnZpY2VcclxuICAgICkge1xyXG4gICAgICAgIFwibmdJbmplY3RcIjtcclxuXHJcbiAgICAgICAgdGhpcy5fcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcclxuICAgICAgICB0aGlzLl9sb2cgPSAkbG9nO1xyXG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gJGludGVydmFsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc1N0YXJ0ZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEV2ZW50KGV2ZW50OiBzdHJpbmcsIHRpbWVvdXQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHZhciBleGlzdGluZ0V2ZW50ID0gXy5maW5kKHRoaXMuX2V2ZW50cywgKGUpID0+IGUuZXZlbnQgPT0gZXZlbnQpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ0V2ZW50ICE9IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IG5ld0V2ZW50ID0gPFRpbWVyRXZlbnQ+IHtcclxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgICB0aW1lb3V0OiB0aW1lb3V0XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLl9ldmVudHMucHVzaChuZXdFdmVudCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zdGFydGVkKVxyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0RXZlbnQobmV3RXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVFdmVudChldmVudDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX2V2ZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBsZXQgZXhpc3RpbmdFdmVudCA9IHRoaXMuX2V2ZW50c1tpXTtcclxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nRXZlbnQuZXZlbnQgPT0gZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcEV2ZW50KGV4aXN0aW5nRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xlYXJFdmVudHMoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGFydEV2ZW50KGV2ZW50OiBUaW1lckV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgZXZlbnQuaW50ZXJ2YWwgPSB0aGlzLl9pbnRlcnZhbChcclxuICAgICAgICAgICAgKCkgPT4geyBcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvZy5kZWJ1ZygnR2VuZXJhdGVkIHRpbWVyIGV2ZW50ICcgKyBldmVudC5ldmVudCk7IFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcm9vdFNjb3BlLiRlbWl0KGV2ZW50LmV2ZW50KVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBldmVudC50aW1lb3V0XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RvcEV2ZW50KGV2ZW50OiBUaW1lckV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmludGVydmFsICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVydmFsLmNhbmNlbChldmVudC5pbnRlcnZhbCk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXZlbnQuaW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N0YXJ0ZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgXy5lYWNoKHRoaXMuX2V2ZW50cywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRFdmVudChldmVudCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdG9wKCk6IHZvaWQge1xyXG4gICAgICAgIF8uZWFjaCh0aGlzLl9ldmVudHMsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BFdmVudChldmVudCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdwaXBUaW1lcicsIFtdKVxyXG4gICAgLnNlcnZpY2UoJ3BpcFRpbWVyJywgVGltZXJTZXJ2aWNlKTtcclxuIiwiaW1wb3J0ICcuL0Zvcm1hdCc7XHJcbmltcG9ydCAnLi9UaW1lclNlcnZpY2UnO1xyXG5pbXBvcnQgJy4vU2Nyb2xsU2VydmljZSc7XHJcbmltcG9ydCAnLi9UYWdzJztcclxuaW1wb3J0ICcuL0NvZGVzJztcclxuaW1wb3J0ICcuL1N5c3RlbUluZm8nO1xyXG5pbXBvcnQgJy4vUGFnZVJlc2V0U2VydmljZSc7XHJcblxyXG5leHBvcnQgKiBmcm9tICcuL0lGb3JtYXQnO1xyXG5leHBvcnQgKiBmcm9tICcuL0lUaW1lclNlcnZpY2UnO1xyXG5leHBvcnQgKiBmcm9tICcuL0lTY3JvbGxTZXJ2aWNlJztcclxuZXhwb3J0ICogZnJvbSAnLi9JVGFncyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vSUNvZGVzJztcclxuZXhwb3J0ICogZnJvbSAnLi9JU3lzdGVtSW5mbyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vSVBhZ2VSZXNldFNlcnZpY2UnOyJdfQ=="}