{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/index.ts","src/routing/BackDecorator.ts","src/routing/RedirectDecorator.ts","src/routing/RoutingEvents.ts","src/routing/index.ts","src/session/IdentityService.ts","src/session/SessionService.ts","src/session/index.ts","src/transactions/Transaction.ts","src/transactions/TransactionError.ts","src/transactions/TransactionService.ts","src/transactions/TransactionStrings.ts","src/transactions/index.ts","src/translate/TranslateDirective.ts","src/translate/TranslateFilter.ts","src/translate/TranslateService.ts","src/translate/Translation.ts","src/translate/index.ts","src/utilities/Codes.ts","src/utilities/Format.ts","src/utilities/PageResetService.ts","src/utilities/ScrollService.ts","src/utilities/SystemInfo.ts","src/utilities/Tags.ts","src/utilities/TimerService.ts","src/utilities/index.ts"],"names":[],"mappings":"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","file":"pip-webui-services.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿'use strict';\r\n\r\nimport './translate';\r\nimport './session';\r\nimport './transactions';\r\nimport './routing';\r\nimport './utilities';\r\n\r\nangular.module('pipServices', [\r\n    'pipTranslate',\r\n    'pipSession',\r\n    'pipTransaction',\r\n    'pipRouting',\r\n    'pipFormat',\r\n    'pipTimer',\r\n    'pipScroll',\r\n    'pipTags',\r\n    'pipCodes',\r\n    'pipSystemInfo',\r\n    'pipPageReset'\r\n]);\r\n\r\nexport * from './translate';\r\nexport * from './session';\r\nexport * from './transactions';\r\nexport * from './routing';\r\nexport * from './utilities';\r\n","'use strict';\r\n\r\nexport let CurrentState: any;\r\nexport let PreviousState: any;\r\n\r\nfunction captureStateTranslations($rootScope: ng.IRootScopeService) {\r\n    \"ngInject\";\r\n\r\n    $rootScope.$on('$stateChangeSuccess',\r\n        (event, toState, toParams, fromState, fromParams) => {\r\n            CurrentState = {\r\n                name: toState.name, \r\n                url: toState.url, \r\n                params: toParams\r\n            };\r\n\r\n            PreviousState = {\r\n                name: fromState.name, \r\n                url: fromState.url, \r\n                params: fromParams\r\n            };\r\n        }\r\n    );\r\n\r\n}\r\n\r\nfunction decorateBackStateService($delegate, $window: ng.IWindowService) {\r\n    \"ngInject\";\r\n\r\n    $delegate.goBack = goBack;\r\n    $delegate.goBackAndSelect = goBackAndSelect;\r\n\r\n    return $delegate;\r\n    //////////////////////////////////////////////////\r\n\r\n    function goBack(): void {\r\n        $window.history.back()\r\n    }\r\n\r\n    function goBackAndSelect(params: any): void {\r\n        if (PreviousState != null \r\n            && PreviousState.name != null) {\r\n\r\n            let state = _.cloneDeep(PreviousState);\r\n\r\n            // Override selected parameters\r\n            state.params = _.extend(state.params, params);\r\n\r\n            $delegate.go(state.name, state.params);\r\n        } else {\r\n            $window.history.back();\r\n        }\r\n    }\r\n}\r\n\r\nfunction addBackStateDecorator($provide) {\r\n    $provide.decorator('$state', decorateBackStateService);\r\n}\r\n\r\nangular\r\n    .module('pipRouting')\r\n    .config(addBackStateDecorator)\r\n    .run(captureStateTranslations);\r\n    ","'use strict';\r\n\r\nlet RedirectedStates: any = {};\r\n\r\nfunction decorateRedirectStateProvider($delegate) {\r\n    \"ngInject\";\r\n\r\n    $delegate.redirect = redirect;\r\n\r\n    return $delegate;\r\n    /////////////////////////////////////////////\r\n\r\n    // Specify automatic redirect from one state to another\r\n    function redirect(fromState, toState) {\r\n        RedirectedStates[fromState] = toState;  \r\n        return this;\r\n    }\r\n}\r\n\r\nfunction addRedirectStateProviderDecorator($provide) {\r\n    \"ngInject\";\r\n\r\n    $provide.decorator('$state', decorateRedirectStateProvider);\r\n}\r\n\r\nfunction decorateRedirectStateService($delegate, $timeout) {\r\n    \"ngInject\";\r\n\r\n    $delegate.redirect = redirect;\r\n    \r\n    return $delegate;\r\n    ////////////////////////////////\r\n    \r\n    // Todo: Move this code directly to event handler?\r\n    // Todo: Nothing calls this code!!\r\n    function redirect(event, state, params) {\r\n        let toState = RedirectedStates[state.name];\r\n        if (_.isFunction(toState)) {\r\n            toState = toState(state.name, params);\r\n\r\n            if (_.isNull(toState))\r\n                throw new Error('Redirected toState cannot be null');\r\n        }\r\n\r\n        if (!!toState) {\r\n            $timeout(() => {\r\n                event.preventDefault();\r\n                $delegate.transitionTo(toState, params, {location: 'replace'});\r\n            });\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction addRedirectStateDecorator($provide) {\r\n    \"ngInject\";\r\n\r\n    $provide.decorator('$state', decorateRedirectStateService);\r\n}\r\n\r\nangular\r\n    .module('pipRouting')\r\n    .config(addRedirectStateProviderDecorator)\r\n    .config(addRedirectStateDecorator);\r\n    ","'use strict';\r\n\r\nexport let RoutingVar: string = \"$routing\";\r\n\r\nfunction hookRoutingEvents(\r\n    $rootScope: ng.IRootScopeService,\r\n    $log: ng.ILogService,\r\n    $state: ng.ui.IStateService\r\n) {\r\n    \"ngInject\";\r\n\r\n    $rootScope.$on('$stateChangeStart',\r\n        (event, toState, toParams, fromState, fromParams) => {\r\n            $rootScope[RoutingVar] = true;\r\n        }\r\n    );\r\n\r\n    $rootScope.$on('$stateChangeSuccess',\r\n        (event, toState, toParams, fromState, fromParams) => {\r\n            // Unset routing variable to disable page transition\r\n            $rootScope[RoutingVar] = false;                \r\n        }\r\n    );\r\n\r\n    // Intercept route error\r\n    $rootScope.$on('$stateChangeError',\r\n        (event, toState, toParams, fromState, fromParams, error) => {\r\n            // Unset routing variable to disable page transition\r\n            $rootScope[RoutingVar] = false;\r\n\r\n            $log.error('Error while switching route to ' + toState.name);\r\n            $log.error(error);\r\n        }\r\n    );\r\n\r\n    // Intercept route error\r\n    $rootScope.$on('$stateNotFound',\r\n        function(event, unfoundState, fromState, fromParams) {\r\n            event.preventDefault();\r\n\r\n            $rootScope[RoutingVar] = false;\r\n\r\n            // Todo: Move to errors\r\n            $state.go('errors_missing_route',  {\r\n                    unfoundState: unfoundState,\r\n                    fromState : {\r\n                        to: fromState ? fromState.name : '',\r\n                        fromParams: fromParams\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    );\r\n\r\n}\r\n\r\nangular\r\n    .module('pipRouting')\r\n    .run(hookRoutingEvents);\r\n    ","'use strict';\r\n\r\nangular.module('pipRouting', ['ui.router']);\r\n\r\nimport './BackDecorator';\r\nimport './RedirectDecorator';\r\nimport './RoutingEvents';\r\n\r\nexport * from './BackDecorator';\r\nexport * from './RoutingEvents';\r\n","'use strict';\r\n\r\nexport let IdentityRootVar = \"$identity\";\r\nexport let IdentityChangedEvent = \"pipIdentityChanged\";\r\n\r\nexport interface IIdentity {\r\n    id: string;\r\n    full_name: string;\r\n    details: string;\r\n    email: string;\r\n    photo_url: string;\r\n    groups: string[];\r\n}\r\n\r\nexport interface IIdentityService {\r\n    identity: any;\r\n}\r\n\r\nexport interface IIdentityProvider extends ng.IServiceProvider {\r\n    setRootVar: boolean;\r\n    identity: any;\r\n}\r\n\r\n\r\nclass IdentityService implements IIdentityService {\r\n    private _identity: any;\r\n    private _setRootVar: boolean;\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n\r\n    public constructor(\r\n        setRootVar: boolean,\r\n        identity: any,\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ) {\r\n        this._setRootVar = setRootVar;\r\n        this._identity = identity;\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n\r\n        this.setRootVar();\r\n    }\r\n\r\n    private setRootVar(): void {\r\n        if (this._setRootVar)\r\n            this._rootScope[IdentityRootVar] = this._identity;\r\n    }\r\n\r\n    public get identity(): any {\r\n        return this._identity;\r\n    }\r\n\r\n    public set identity(value: any) {\r\n        this._identity = value;\r\n        this.setRootVar();\r\n        this._rootScope.$emit(IdentityChangedEvent, this._identity);\r\n\r\n        let identity: any = value || {};\r\n        this._log.debug(\"Changed identity to \" + JSON.stringify(identity));\r\n    }\r\n}\r\n\r\nclass IdentityProvider implements IdentityProvider {\r\n    private _setRootVar = true;\r\n    private _identity: any = null;\r\n    private _service: IdentityService = null;\r\n\r\n    public constructor() { }\r\n\r\n    public get setRootVar(): boolean {\r\n        return this._setRootVar;  \r\n    }\r\n\r\n    public set setRootVar(value: boolean) {\r\n        this._setRootVar = !!value;\r\n    }\r\n\r\n    public get identity(): any {\r\n        return this._identity;  \r\n    }\r\n\r\n    public set identity(value: any) {\r\n        this._identity = value;\r\n    }\r\n\r\n    public $get(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ): any {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null)\r\n            this._service = new IdentityService(this._setRootVar, this._identity, $rootScope, $log);\r\n\r\n        return this._service;\r\n    }\r\n\r\n}\r\n\r\nangular\r\n    .module('pipSession')\r\n    .provider('pipIdentity', IdentityProvider);\r\n","'use strict';\r\n\r\nexport const SessionRootVar = \"$session\";\r\nexport const SessionOpenedEvent = \"pipSessionOpened\";\r\nexport const SessionClosedEvent = \"pipSessionClosed\";\r\n\r\nexport interface ISessionService {\r\n    session: any;\r\n    isOpened(): boolean;\r\n\r\n    open(session: any): void;\r\n    close(): void;\r\n}\r\n\r\nexport interface ISessionProvider extends ng.IServiceProvider {\r\n    setRootVar: boolean;\r\n    session: any;\r\n}\r\n\r\nclass SessionService implements ISessionService {\r\n    private _setRootVar: boolean;\r\n    private _session: any;\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n\r\n    public constructor(\r\n        setRootVar: boolean, \r\n        session: any, \r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ) {\r\n        this._setRootVar = setRootVar;\r\n        this._session = session;\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n\r\n        this.setRootVar();\r\n    }\r\n    \r\n    private setRootVar(): void {\r\n        if (this._setRootVar)\r\n            this._rootScope[SessionRootVar] = this._session;\r\n    }\r\n\r\n    public get session(): any {\r\n        return this._session;\r\n    }\r\n\r\n    public isOpened(): boolean {\r\n        return this._session != null;\r\n    }\r\n\r\n    public open(session: any, fullReset: boolean = false, partialReset: boolean = false) {\r\n        if (session == null)\r\n            throw new Error(\"Session cannot be null\");\r\n\r\n        this._session = session;\r\n        this.setRootVar();\r\n        this._rootScope.$emit(SessionOpenedEvent, session);\r\n\r\n        this._log.debug(\"Opened session \" + session);\r\n    }\r\n\r\n    public close(fullReset: boolean = false, partialReset: boolean = false) {\r\n        let oldSession = this._session;\r\n\r\n        this._session = null;\r\n        this.setRootVar();\r\n        this._rootScope.$emit(SessionClosedEvent, oldSession);\r\n\r\n        this._log.debug(\"Closed session \" + oldSession);\r\n    }\r\n}\r\n\r\nclass SessionProvider implements ISessionProvider {\r\n    private _setRootVar = true;\r\n    private _session: any = null;\r\n    private _service: SessionService = null;\r\n\r\n    public constructor() { }\r\n\r\n    public get setRootVar(): boolean {\r\n        return this._setRootVar;  \r\n    }\r\n\r\n    public set setRootVar(value: boolean) {\r\n        this._setRootVar = !!value;\r\n    }\r\n\r\n    public get session(): any {\r\n        return this._session;  \r\n    }\r\n\r\n    public set session(value: any) {\r\n        this._session = value;\r\n    }\r\n\r\n    public $get(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService\r\n    ): any {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null)\r\n            this._service = new SessionService(this._setRootVar, this._session, $rootScope, $log);\r\n\r\n        return this._service;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipSession')\r\n    .provider('pipSession', SessionProvider); \r\n","'use strict';\r\n\r\nangular.module('pipSession', []);\r\n\r\nimport './IdentityService';\r\nimport './SessionService';\r\n\r\nexport * from './IdentityService';\r\nexport * from './SessionService';\r\n","'use strict';\r\n\r\nimport { TransactionError } from './TransactionError'\r\n\r\nexport class Transaction {\r\n    private _scope: string = null;\r\n    private _id: string = null;\r\n    private _operation: string = null;\r\n    private _error: TransactionError = new TransactionError();\r\n    private _progress: number = 0;\r\n\r\n    public constructor(scope: string) {\r\n        this._scope = scope;\r\n    }\r\n\r\n    public get scope(): string {\r\n        return this._scope;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    public get operation(): string {\r\n        return this._operation;\r\n    }\r\n\r\n    public get progress(): number {\r\n        return this._progress;\r\n    }\r\n\r\n    public get error(): TransactionError {\r\n        return this._error;\r\n    }\r\n\r\n    public get errorMessage(): string {\r\n        return this._error.message;\r\n    }\r\n\r\n    public reset(): void {\r\n        this._id = null;\r\n        this._operation = null;\r\n        this._progress = 0;\r\n        this._error.reset();\r\n    }\r\n\r\n    public busy(): boolean {\r\n        return this._id != null;\r\n    }\r\n\r\n    public failed(): boolean {\r\n        return !this._error.empty();\r\n    }\r\n\r\n    public aborted(id: string): boolean {\r\n        return this._id != id;\r\n    }\r\n\r\n    public begin(operation: string): string {\r\n        // Transaction is already running\r\n        if (this._id != null) return null;\r\n\r\n        this._id = new Date().getTime().toString();\r\n        this._operation = operation || 'PROCESSING'\r\n        this._error.reset();\r\n\r\n        return this._id;\r\n    }\r\n\r\n    public update(progress: number): void {\r\n        this._progress = Math.max(progress, 100);\r\n    }\r\n\r\n    public abort(): void {\r\n        this._id = null;\r\n        this._error.reset();\r\n    }\r\n\r\n    public end(error?: any): void {\r\n        this._error.decode(error);\r\n        this._id = null;\r\n    }\r\n}\r\n","'use strict';\r\n\r\nexport class TransactionError {\r\n    public code: string;\r\n    public message: string;\r\n    public details: any;\r\n    public cause: string;\r\n    public stack_trace: string;\r\n\r\n    public constructor(error?: any) {\r\n        if (error != null)\r\n            this.decode(error);\r\n    }\r\n\r\n    public reset(): void {\r\n        this.code = null;\r\n        this.message = null;\r\n        this.details = null;\r\n        this.cause = null;\r\n        this.stack_trace = null;\r\n    }\r\n\r\n    public empty(): boolean {\r\n        return this.message = null && this.code == null;\r\n    }\r\n\r\n    public decode(error: any): void {\r\n        this.reset();\r\n\r\n        if (error == null) return;\r\n\r\n        // Process regular messages\r\n        if (error.message) \r\n            this.message = error.message;\r\n\r\n        // Process server application errors\r\n        if (error.data) {\r\n            if (error.data.code) { \r\n                // process server error codes here\r\n                this.message = this.message || 'ERROR_' + error.data.code;\r\n                this.code = this.code || error.data.code;\r\n            }\r\n\r\n            if (error.data.message)\r\n                this.message = this.message || error.data.message;\r\n\r\n            this.message = this.message || error.data;\r\n            this.details = this.details || error.data;\r\n\r\n            this.cause = error.data.cause;\r\n            this.stack_trace = error.data.stack_trace;\r\n            this.details = error.data.details;            \r\n        }\r\n\r\n        // Process standard HTTP errors\r\n        if (error.statusText)\r\n            this.message = this.message || error.statusText;\r\n\r\n        if (error.status) {\r\n            this.message = this.message || 'ERROR_' + error.status;\r\n            this.code = this.code || error.status;\r\n        }\r\n        \r\n        this.message = this.message || error;\r\n        this.details = this.details || error;\r\n    }\r\n}\r\n","'use strict';\r\n\r\nimport { Transaction } from './Transaction';\r\n\r\nexport interface ITransactionService {\r\n    create(scope?: string): Transaction;\r\n    get(scope?: string): Transaction;\r\n}\r\n\r\nclass TransactionService implements ITransactionService {\r\n    private _transactions: any = {};\r\n\r\n    public constructor() {}\r\n\r\n    public create(scope?: string): Transaction {\r\n        let transaction = new Transaction(scope);\r\n        \r\n        if (scope != null)\r\n            this._transactions[scope] = transaction;\r\n\r\n        return transaction;\r\n    }\r\n\r\n    public get(scope?: string): Transaction {\r\n        let transaction: Transaction = scope != null ? <Transaction>this._transactions[scope] : null;\r\n\r\n        if (transaction == null) {\r\n            transaction = new Transaction(scope);\r\n            if (scope != null)\r\n                this._transactions[scope] = transaction;\r\n        }\r\n\r\n        return transaction;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipTransaction')\r\n    .service('pipTransaction', TransactionService);\r\n","'use strict';\r\n\r\nfunction configureTransactionStrings($injector) {\r\n    \"ngInject\";\r\n\r\n    let pipTranslate = $injector.has('pipTranslateProvider') ? $injector.get('pipTranslateProvider') : null;\r\n\r\n    if (pipTranslate) {\r\n        pipTranslate.setTranslations('en', {\r\n            'ENTERING': 'Entering...',\r\n            'PROCESSING': 'Processing...',\r\n            'LOADING': 'Loading...',\r\n            'SAVING': 'Saving...'\r\n        });\r\n\r\n        pipTranslate.setTranslations('ru', {\r\n            'ENTERING': 'Вход в систему...',\r\n            'PROCESSING': 'Обрабатывается...',\r\n            'LOADING': 'Загружается...',\r\n            'SAVING': 'Сохраняется...'\r\n        });   \r\n    }\r\n    \r\n}\r\n\r\nangular\r\n    .module('pipTransaction')\r\n    .config(configureTransactionStrings);\r\n","'use strict';\r\n\r\nangular.module('pipTransaction', []);\r\n\r\nimport './TransactionStrings';\r\nimport './TransactionError';\r\nimport './Transaction';\r\nimport './TransactionService';\r\n\r\nexport * from './TransactionError';\r\nexport * from './Transaction';\r\nexport * from './TransactionService';\r\n","'use strict';\r\n\r\nfunction translateDirective(pipTranslate): ng.IDirective {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: 'EA',\r\n        scope: {\r\n            key1: '@pipTranslate',\r\n            key2: '@key'\r\n        },\r\n        link: (scope: any, element: any, attrs: any) => {\r\n            let key = scope.key1 || scope.key2;\r\n            let value = pipTranslate.translate(key);\r\n            element.text(value);\r\n        }\r\n    };\r\n}\r\n\r\nfunction translateHtmlDirective(pipTranslate): ng.IDirective {\r\n    \"ngInject\";\r\n\r\n    return {\r\n        restrict: 'EA',\r\n        scope: {\r\n            key1: '@pipTranslateHtml',\r\n            key2: '@key'\r\n        },\r\n        link: (scope: any, element: any, attrs: any) => {\r\n            let key = scope.key1 || scope.key2;\r\n            let value = pipTranslate.translate(key);\r\n            element.html(value);\r\n        }\r\n    };\r\n}\r\n\r\nangular\r\n    .module('pipTranslate')\r\n    .directive('pipTranslate', translateDirective)\r\n    .directive('pipTranslateHtml', translateHtmlDirective);\r\n","'use strict';\r\n\r\nfunction translateFilter(pipTranslate) {\r\n    \"ngInject\";\r\n\r\n    return function (key) {\r\n        return pipTranslate.translate(key) || key;\r\n    }\r\n}\r\n\r\nfunction optionalTranslateFilter($injector) {\r\n    \"ngInject\";\r\n\r\n    let pipTranslate = $injector.has('pipTranslate') \r\n        ? $injector.get('pipTranslate') : null;\r\n\r\n    return function (key) {\r\n        return pipTranslate  ? pipTranslate.translate(key) || key : key;\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipTranslate')\r\n    .filter('translate', translateFilter);\r\n","﻿'use strict';\r\n\r\nimport { Translation } from './Translation';\r\nimport { ResetPageEvent } from '../utilities/PageResetService';\r\n\r\nexport let LanguageRootVar = \"$language\";\r\nexport let LanguageChangedEvent = \"pipLanguageChanged\";    \r\n\r\nexport interface ITranslateService {\r\n    language: string;\r\n\r\n    use(language: string): string;\r\n    setTranslations(language: string, translations: any): void;\r\n    translations(language: string, translations: any): void;\r\n\r\n    translate(key: string): string;\r\n    translateArray(keys: string[]): string[];\r\n    translateSet(keys: string[], keyProp: string, valueProp: string): any[];\r\n    translateObjects(items: any[], keyProp: string, valueProp: string): any[];\r\n    translateWithPrefix(prefix: string, key: string);\r\n    translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string);\r\n    translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string);\r\n}\r\n\r\nexport interface ITranslateProvider extends ITranslateService, ng.IServiceProvider {\r\n}\r\n\r\nclass TranslateService implements ITranslateService {\r\n    private _translation: Translation;\r\n    private _setRootVar: boolean;\r\n    private _persist: boolean;\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n    private _window: ng.IWindowService;\r\n    private _mdDateLocale;\r\n\r\n    public constructor(\r\n        translation: Translation,\r\n        setRootVar: boolean,\r\n        persist: boolean,\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService,\r\n        $window: ng.IWindowService,\r\n        $mdDateLocale: angular.material.IDateLocaleProvider,\r\n    ) {\r\n        this._setRootVar = setRootVar;\r\n        this._persist = persist;\r\n        this._translation = translation;\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n        this._window = $window;\r\n        this._mdDateLocale = $mdDateLocale;\r\n\r\n        if (this._persist && this._window.localStorage)\r\n            this._translation.language = this._window.localStorage.getItem('language') || this._translation.language;\r\n\r\n        this._log.debug(\"Set language to \" + this._translation.language);\r\n\r\n        this.save();\r\n    }\r\n\r\n    private changeLocale(locale: string) {\r\n        if (!locale) return;\r\n\r\n        // var localeDate: moment.MomentLanguageData;\r\n        var localeDate: any;\r\n\r\n        moment.locale(locale);\r\n        localeDate = moment.localeData();\r\n\r\n        this._mdDateLocale.months = angular.isArray(localeDate._months) ? localeDate._months : localeDate._months.format;\r\n        this._mdDateLocale.shortMonths = angular.isArray(localeDate._monthsShort) ? localeDate._monthsShort : localeDate._monthsShort.format;\r\n        this._mdDateLocale.days = angular.isArray(localeDate._weekdays) ? localeDate._weekdays : localeDate._weekdays.format;\r\n        this._mdDateLocale.shortDays = localeDate._weekdaysMin;\r\n        this._mdDateLocale.firstDayOfWeek = localeDate._week.dow;\r\n    }\r\n\r\n    private save(): void {\r\n        if (this._setRootVar)\r\n            this._rootScope[LanguageRootVar] = this._translation.language;\r\n\r\n        if (this._persist && this._window.localStorage != null)\r\n            this._window.localStorage.setItem('language', this._translation.language);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this._translation.language;\r\n    }\r\n\r\n    public set language(value: string) {\r\n        if (value != this._translation.language) {\r\n            this._translation.language = value;\r\n            \r\n            this._log.debug(\"Changing language to \" + value);\r\n\r\n            this.changeLocale(this._translation.language);\r\n            this.save();   \r\n\r\n            this._rootScope.$emit(LanguageChangedEvent, value);\r\n            this._rootScope.$emit(ResetPageEvent);\r\n        }\r\n    }\r\n\r\n    public use(language: string): string {\r\n        if (language != null)\r\n            this.language = language;\r\n        return this.language;\r\n    }\r\n\r\n    public setTranslations(language: string, translations: any): void {\r\n        return this._translation.setTranslations(language, translations);\r\n    }\r\n\r\n    public translations(language: string, translations: any): void {\r\n        return this._translation.setTranslations(language, translations);\r\n    }\r\n\r\n    public translate(key: string): string {\r\n        return this._translation.translate(key);\r\n    }\r\n\r\n    public translateArray(keys: string[]): string[] {\r\n        return this._translation.translateArray(keys);\r\n    }\r\n    \r\n    public translateSet(keys: string[], keyProp: string, valueProp: string): any[] {\r\n        return this._translation.translateSet(keys, keyProp, valueProp);\r\n    }\r\n\r\n    public translateObjects(items: any[], keyProp: string, valueProp: string): any[] {\r\n        return this._translation.translateObjects(items, keyProp, valueProp);\r\n    }\r\n\r\n    public translateWithPrefix(prefix: string, key: string) {\r\n        return this._translation.translateWithPrefix(prefix, key);\r\n    }\r\n\r\n    public translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        return this._translation.translateSetWithPrefix(prefix, keys, keyProp, valueProp);\r\n    }\r\n\r\n    public translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        return this._translation.translateSetWithPrefix2(prefix, keys, keyProp, valueProp);\r\n    }\r\n}\r\n\r\nclass TranslateProvider extends Translation implements ITranslateProvider {\r\n    private _translation: Translation;\r\n    private _setRootVar: boolean = true;\r\n    private _persist: boolean = true;\r\n    private _service: TranslateService;\r\n    \r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    public get setRootVar(): boolean {\r\n        return this._setRootVar;  \r\n    }\r\n\r\n    public set setRootVar(value: boolean) {\r\n        this._setRootVar = !!value;\r\n    }\r\n\r\n    public get persist(): boolean {\r\n        return this._persist;  \r\n    }\r\n\r\n    public set persist(value: boolean) {\r\n        this._persist = !!value;\r\n    }\r\n\r\n    public $get(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService, \r\n        $window: ng.IWindowService,\r\n        $mdDateLocale: angular.material.IDateLocaleProvider\r\n    ): any {\r\n        \"ngInject\";\r\n\r\n        if (this._service == null) \r\n            this._service = new TranslateService(this, this._setRootVar, this._persist, $rootScope, $log, $window, $mdDateLocale);\r\n\r\n        return this._service;\r\n    }\r\n}\r\n\r\nfunction initTranslate(pipTranslate: ITranslateService) {\r\n    pipTranslate.language;\r\n}\r\n\r\nangular\r\n    .module('pipTranslate')\r\n    .provider('pipTranslate', TranslateProvider)\r\n    .run(initTranslate);\r\n","'use strict';\r\n\r\nexport class Translation {\r\n    protected _language = 'en';\r\n    protected _translations = {\r\n        en: {\r\n            'en': 'English',\r\n            'ru': 'Russian',\r\n            'es': 'Spanish',\r\n            'pt': 'Portuguese',\r\n            'de': 'German',\r\n            'fr': 'French'\r\n        },\r\n        ru: {\r\n            'en': 'Английский',\r\n            'ru': 'Русский',\r\n            'es': 'Испанский',\r\n            'pt': 'Португальский',\r\n            'de': 'Немецкий',\r\n            'fr': 'Французский'\r\n        }\r\n    };\r\n\r\n    public constructor() {}\r\n\r\n    public get language(): string { return this._language; }\r\n    public set language(value: string) { this._language = value; }\r\n\r\n    public use(language: string): string {\r\n        if (language != null)\r\n            this._language = language;\r\n        return this._language;\r\n    }\r\n\r\n    // Set translation strings for specific language\r\n    public setTranslations(language: string, translations: any): void {\r\n        let map = this._translations[language] || {};\r\n        this._translations[language] = _.extend(map, translations);\r\n    }\r\n\r\n    // Yet another method to set translation strings for specific language\r\n    public translations(language: string, translations: any): void {\r\n        this.setTranslations(language, translations);\r\n    }\r\n\r\n    // Translate a string by key using set language\r\n    public translate(key: string): string {\r\n        if (_.isNull(key) || _.isUndefined(key)) return '';\r\n\r\n        let translations = this._translations[this._language] || {};\r\n        return translations[key] || key;\r\n    }\r\n\r\n    // Translate an array of strings\r\n    public translateArray(keys: string[]): string[] {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        let values = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (k) {\r\n            let key = k || '';\r\n            values.push(translations[key] || key);\r\n        });\r\n\r\n        return values;\r\n    }\r\n\r\n    // Translate an array of strings into array of objects (set)\r\n    public translateSet(keys: string[], keyProp: string, valueProp: string): any[] {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        keyProp = keyProp || 'id';\r\n        valueProp = valueProp || 'name';\r\n\r\n        let values: any[] = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (key) {\r\n            let value: any = {};\r\n            key = key || '';\r\n\r\n            value[keyProp] = key;\r\n            value[valueProp] = translations[key] || key;\r\n\r\n            values.push(value);\r\n        });\r\n\r\n        return values;\r\n    }\r\n\r\n    // Translate a collection of objects\r\n    public translateObjects(items: any[], keyProp: string, valueProp: string): any[] {\r\n        if (_.isNull(items) || items.length == 0) return [];\r\n\r\n        keyProp = keyProp || 'name';\r\n        valueProp = valueProp || 'nameLocal';\r\n\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(items, function (item) {\r\n            let key = item[keyProp] || '';\r\n\r\n            item[valueProp] = translations[key] || key;\r\n        });\r\n\r\n        return items;\r\n    }\r\n\r\n    // Translate a string by key  with prefix using set language todo\r\n    public translateWithPrefix(prefix: string, key: string) {\r\n        prefix = prefix ? prefix + '_' : '';\r\n        key = (prefix + key).replace(/ /g, '_').toUpperCase();\r\n        if (key == null) return '';\r\n        let translations = this._translations[this._language] || {};\r\n        return translations[key] || key;\r\n    };\r\n\r\n    public translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        prefix = prefix ? prefix.replace(/ /g, '_').toUpperCase() : '';\r\n        keyProp = keyProp || 'id';\r\n        valueProp = valueProp || 'name';\r\n\r\n        let values = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (key) {\r\n            let value: any = {}; \r\n            key = key || '';\r\n\r\n            value[keyProp] = key;\r\n            value[valueProp] = translations[prefix + '_' + key] || key;\r\n\r\n            values.push(value);\r\n        });\r\n\r\n        return values;\r\n    }\r\n\r\n    // Translate an array of strings, apply uppercase and replace ' ' => '_'\r\n    public translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string) {\r\n        if (_.isNull(keys) || keys.length == 0) return [];\r\n\r\n        keyProp = keyProp || 'id';\r\n        valueProp = valueProp || 'name';\r\n        prefix = prefix ? prefix.replace(/ /g, '_').toUpperCase() + '_': '';\r\n\r\n        let values = [];\r\n        let translations = this._translations[this._language] || {};\r\n\r\n        _.each(keys, function (key) {\r\n            let value: any = {};\r\n            key = key || '';\r\n\r\n            value[keyProp] = key;\r\n            value[valueProp] = translations[prefix + key.replace(/ /g, '_').toUpperCase()]\r\n                || (prefix + key.replace(/ /g, '_').toUpperCase());\r\n\r\n            values.push(value);\r\n        });\r\n\r\n        return values;\r\n    }\r\n}\r\n","'use strict';\r\n\r\nangular.module('pipTranslate', []);\r\n\r\nimport './Translation';\r\nimport './TranslateService';\r\nimport './TranslateFilter';\r\nimport './TranslateDirective';\r\n\r\nexport * from './Translation';\r\nexport * from './TranslateService';\r\n","'use strict';\r\n\r\nexport interface ICodes {\r\n    // Simple version of string hashcode\r\n    hash(value: string): number;\r\n    // Generates random big number for verification codes\r\n    verification(): string;\r\n}\r\n\r\n\r\nclass Codes implements ICodes {\r\n    // Simple version of string hashcode\r\n    public hash(value: string): number {\r\n        if (value == null) return 0;\r\n        \r\n        let result = 0;\r\n        for (let i = 0; i < value.length; i++)\r\n            result += value.charCodeAt(i);\r\n\r\n        return result;\r\n    }\r\n\r\n    // Generates random big number for verification codes\r\n    public verification(): string {\r\n        return Math.random().toString(36).substr(2, 10).toUpperCase(); // remove `0.`\r\n    }\r\n}\r\n\r\nangular\r\n    .module('pipCodes', [])\r\n    .service('pipCodes', Codes);\r\n","'use strict';\r\n\r\nexport interface IFormat {\r\n    // Creates a sample line from a text\r\n    sample(value: string, maxLength: number): string;\r\n\r\n    sprintf(message: string, ...args: any[]): string;\r\n}\r\n\r\n\r\nclass Format implements IFormat {\r\n    // Cached for parsed formats\r\n    private cache = {};\r\n\r\n    // Creates a sample line from a text\r\n    public sample(value: string, maxLength: number): string {\r\n        if (!value || value == '') return '';\r\n\r\n        var length = value.indexOf('\\n');\r\n        length = length >= 0 ? length : value.length;\r\n        length = length < maxLength ? value.length : maxLength;\r\n\r\n        return value.substring(0, length);\r\n    }\r\n\r\n    private strRepeat(str: string, qty: number): string {\r\n        if (qty < 1) return '';\r\n        var result = '';\r\n        while (qty > 0) {\r\n            if (qty & 1) result += str;\r\n            qty >>= 1, str += str;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private getType(variable) {\r\n        return toString.call(variable).slice(8, -1).toLowerCase();\r\n    }\r\n\r\n    private parseFormat(fmt: string) {\r\n        let _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\r\n        while (_fmt) {\r\n            if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\r\n                parse_tree.push(match[0]);\r\n            }\r\n            else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\r\n                parse_tree.push('%');\r\n            }\r\n            else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\r\n                if (match[2]) {\r\n                    arg_names |= 1;\r\n                    var field_list = [], replacement_field = match[2], field_match = [];\r\n                    if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\r\n                        field_list.push(field_match[1]);\r\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\r\n                            if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\r\n                                field_list.push(field_match[1]);\r\n                            }\r\n                            else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\r\n                                field_list.push(field_match[1]);\r\n                            }\r\n                            else {\r\n                                throw new Error('Unknown error');\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new Error('Unknown error');\r\n                    }\r\n                    match[2] = field_list;\r\n                }\r\n                else {\r\n                    arg_names |= 2;\r\n                }\r\n                if (arg_names === 3) {\r\n                    throw new Error('Mixing positional and named placeholders is not (yet) supported');\r\n                }\r\n                parse_tree.push(match);\r\n            }\r\n            else {\r\n                throw new Error('Unknown error');\r\n            }\r\n            _fmt = _fmt.substring(match[0].length);\r\n        }\r\n        return parse_tree;\r\n    }\r\n\r\n    private format(parse_tree, argv) {\r\n        let cursor = 0; \r\n        let tree_length = parse_tree.length; \r\n        let output = [];\r\n\r\n        for (let i = 0; i < tree_length; i++) {\r\n            let node_type = this.getType(parse_tree[i]);\r\n            if (node_type === 'string') {\r\n                output.push(parse_tree[i]);\r\n            }\r\n            else if (node_type === 'array') {\r\n                let match = parse_tree[i]; // convenience purposes only\r\n                let arg: any;\r\n                if (match[2]) { // keyword argument\r\n                    arg = argv[cursor];\r\n                    for (let k = 0; k < match[2].length; k++) {\r\n                        if (!arg.hasOwnProperty(match[2][k])) {\r\n                            throw new Error(this.sprintf('Property \"%s\" does not exist', match[2][k]));\r\n                        }\r\n                        arg = arg[match[2][k]];\r\n                    }\r\n                } else if (match[1]) { // positional argument (explicit)\r\n                    arg = argv[match[1]];\r\n                }\r\n                else { // positional argument (implicit)\r\n                    arg = argv[cursor++];\r\n                }\r\n\r\n                if (/[^s]/.test(match[8]) && (this.getType(arg) != 'number')) {\r\n                    throw new Error(this.sprintf('Expecting number but found %s', this.getType(arg)));\r\n                }\r\n                switch (match[8]) {\r\n                    case 'b': arg = arg.toString(2); break;\r\n                    case 'c': arg = String.fromCharCode(arg); break;\r\n                    case 'd': arg = parseInt(arg, 10); break;\r\n                    case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\r\n                    case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\r\n                    case 'o': arg = arg.toString(8); break;\r\n                    case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\r\n                    case 'u': arg = Math.abs(arg); break;\r\n                    case 'x': arg = arg.toString(16); break;\r\n                    case 'X': arg = arg.toString(16).toUpperCase(); break;\r\n                }\r\n                arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);                \r\n                let pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\r\n                let pad_length = match[6] - String(arg).length;\r\n                let pad = match[6] ? this.strRepeat(pad_character, pad_length) : '';\r\n                output.push(match[5] ? arg + pad : pad + arg);\r\n            }\r\n        }\r\n        return output.join('');\r\n    }\r\n    \r\n    public sprintf(message: string, ...args: any[]): string {\r\n        if (!this.cache.hasOwnProperty(message))\r\n            this.cache[message] = this.parseFormat(message);\r\n\r\n        return this.format(this.cache[message], args);\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('pipFormat', [])\r\n    .service('pipFormat', Format);\r\n","'use strict';\r\n\r\nexport let ResetPageEvent: string = \"pipResetPage\";\r\nexport let ResetAreaEvent: string = \"pipResetArea\";\r\n\r\nexport let ResetRootVar: string = \"$reset\";\r\nexport let ResetAreaRootVar: string = \"$resetArea\";\r\n\r\nexport interface IPageResetService {\r\n    reset(): void;\r\n    resetArea(area: string): void;\r\n}\r\n\r\n\r\nclass PageResetService implements IPageResetService {\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n    private _timeout: ng.ITimeoutService;\r\n\r\n    public constructor(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService, \r\n        $timeout: ng.ITimeoutService\r\n    ) {\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n        this._timeout = $timeout;\r\n\r\n        $rootScope[ResetRootVar] = false;\r\n        $rootScope[ResetAreaRootVar] = null;\r\n    }\r\n\r\n    public reset(): void {\r\n        this._log.debug(\"Resetting the entire page\");\r\n        this.performReset(null);\r\n    }\r\n\r\n    public resetArea(area: string): void {\r\n        this._log.debug(\"Resetting the area \" + area);\r\n        this.performReset(area);\r\n    }\r\n\r\n    private performReset(area?: string): void {\r\n        this._rootScope[ResetRootVar] = area == null;\r\n        this._rootScope[ResetAreaRootVar] = area;\r\n\r\n        this._timeout(() => {\r\n            this._rootScope[ResetRootVar] = false;\r\n            this._rootScope[ResetAreaRootVar] = null;\r\n        }, 0);\r\n    }\r\n}\r\n\r\n\r\nfunction hookResetEvents(\r\n    $rootScope: ng.IRootScopeService, \r\n    pipPageReset: IPageResetService\r\n) {\r\n    $rootScope.$on(ResetPageEvent, () => { pipPageReset.reset(); });\r\n    $rootScope.$on(ResetAreaEvent, (event, area) => { pipPageReset.resetArea(area); });\r\n}\r\n\r\n\r\nangular.module('pipPageReset', [])\r\n    .service('pipPageReset', PageResetService)\r\n    .run(hookResetEvents);\r\n","'use strict';\r\n\r\nexport interface IScrollService {\r\n    scrollTo(parentElement, childElement, animationDuration): void;\r\n}\r\n\r\nclass ScrollService implements IScrollService {\r\n\r\n    public scrollTo(parentElement, childElement, animationDuration): void {\r\n        if (!parentElement || !childElement) return;\r\n        if (animationDuration == undefined) animationDuration = 300;\r\n\r\n        setTimeout(function () {\r\n            if (!$(childElement).position()) return;\r\n            var modDiff= Math.abs($(parentElement).scrollTop() - $(childElement).position().top);\r\n            if (modDiff < 20) return;\r\n            var scrollTo = $(parentElement).scrollTop() + ($(childElement).position().top - 20);\r\n            if (animationDuration > 0)\r\n                $(parentElement).animate({\r\n                    scrollTop: scrollTo + 'px'\r\n                }, animationDuration);\r\n        }, 100);\r\n    }\r\n\r\n}\r\n\r\n\r\nangular\r\n    .module('pipScroll', [])\r\n    .service('pipScroll', ScrollService);\r\n","'use strict';\r\n\r\nexport interface ISystemInfo {\r\n    browserName: string;\r\n    browserVersion: string;\r\n    platform: string;\r\n    os: string;\r\n\r\n    isDesktop(): boolean;\r\n    isMobile(): boolean;\r\n    isCordova(): boolean;\r\n    isSupported(supported?: any): boolean;\r\n}\r\n\r\n\r\nclass SystemInfo implements ISystemInfo {\r\n    private _window: ng.IWindowService;\r\n\r\n    public constructor($window: ng.IWindowService) {\r\n        \"ngInject\";\r\n\r\n        this._window = $window;\r\n    }\r\n\r\n    // todo add support for iPhone\r\n    public get browserName(): string {\r\n        let ua = this._window.navigator.userAgent;\r\n\r\n        if (ua.search(/Edge/) > -1) return \"edge\";\r\n        if (ua.search(/MSIE/) > -1) return \"ie\";\r\n        if (ua.search(/Trident/) > -1) return \"ie\";\r\n        if (ua.search(/Firefox/) > -1) return \"firefox\";\r\n        if (ua.search(/Opera/) > -1) return \"opera\";\r\n        if (ua.search(/OPR/) > -1) return \"opera\";\r\n        if (ua.search(/YaBrowser/) > -1) return \"yabrowser\";\r\n        if (ua.search(/Chrome/) > -1) return \"chrome\";\r\n        if (ua.search(/Safari/) > -1) return \"safari\";\r\n        if (ua.search(/Maxthon/) > -1) return \"maxthon\";\r\n        \r\n        return \"unknown\";\r\n    }\r\n\r\n    public get browserVersion(): string {\r\n        let version;\r\n        let ua = this._window.navigator.userAgent;\r\n        let browser = this.browserName;\r\n\r\n        switch (browser) {\r\n            case \"edge\":\r\n                version = (ua.split(\"Edge\")[1]).split(\"/\")[1];\r\n                break;\r\n            case \"ie\":\r\n                version = (ua.split(\"MSIE \")[1]).split(\";\")[0];\r\n                break;\r\n            case \"ie11\":\r\n                browser = \"ie\";\r\n                version = (ua.split(\"; rv:\")[1]).split(\")\")[0];\r\n                break;\r\n            case \"firefox\":\r\n                version = ua.split(\"Firefox/\")[1];\r\n                break;\r\n            case \"opera\":\r\n                version = ua.split(\"Version/\")[1];\r\n                break;\r\n            case \"operaWebkit\":\r\n                version = ua.split(\"OPR/\")[1];\r\n                break;\r\n            case \"yabrowser\":\r\n                version = (ua.split(\"YaBrowser/\")[1]).split(\" \")[0];\r\n                break;\r\n            case \"chrome\":\r\n                version = (ua.split(\"Chrome/\")[1]).split(\" \")[0];\r\n                break;\r\n            case \"safari\":\r\n                version = (ua.split(\"Version/\")[1]).split(\" \")[0];\r\n                break;\r\n            case \"maxthon\":\r\n                version = ua.split(\"Maxthon/\")[1];\r\n                break;\r\n        }\r\n\r\n        return version;\r\n    }\r\n    \r\n    public get platform(): string {\r\n        let ua = this._window.navigator.userAgent;\r\n\r\n        if (/iphone|ipad|ipod|android|blackberry|mini|windows\\sce|palm/i.test(ua.toLowerCase())) \r\n            return 'mobile';\r\n\r\n        return 'desktop';\r\n    }\r\n\r\n    public get os(): string {\r\n        let ua = this._window.navigator.userAgent;\r\n\r\n        try {\r\n            let osAll = (/(windows|mac|android|linux|blackberry|sunos|solaris|iphone)/.exec(ua.toLowerCase()) || [ua])[0].replace('sunos', 'solaris');\r\n            let osAndroid = (/(android)/.exec(ua.toLowerCase()) || '');\r\n            return osAndroid && (osAndroid == 'android' || (osAndroid[0] == 'android')) ? 'android' : osAll;\r\n        } catch (err) {\r\n            return 'unknown'\r\n        }\r\n    }\r\n\r\n    public isDesktop(): boolean {\r\n        return this.platform == 'desktop';\r\n    }\r\n\r\n    public isMobile(): boolean {\r\n        return this.platform == 'mobile';\r\n    }\r\n\r\n    // Todo: complete implementation\r\n    public isCordova(): boolean {\r\n        return false;\r\n    }\r\n\r\n    // Todo: Move to errors\r\n    public isSupported(supported?: any): boolean {\r\n        if (!supported) \r\n            supported = {\r\n                edge: 11,\r\n                ie: 11,\r\n                firefox: 43, //4, for testing\r\n                opera: 35,\r\n                chrome: 47\r\n            };\r\n\r\n        let browser = this.browserName;\r\n        let version = this.browserVersion;\r\n        version = version.split(\".\")[0]\r\n\r\n        if (browser && supported[browser] && version >= supported[browser]) \r\n            return true;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('pipSystemInfo', [])\r\n    .service('pipSystemInfo', SystemInfo);\r\n","'use strict';\r\n\r\nexport interface ITags {\r\n    normalizeOne(tag: string): string;\r\n    compressOne(tag: string): string;\r\n    equal(tag1: string, tag2: string): boolean;\r\n    normalizeAll(tags: any): string[];\r\n    compressAll(tags: any): string[];\r\n    extract(entity: any, searchFields?: string[]): string[];\r\n}\r\n\r\n\r\nclass Tags implements ITags {\r\n\r\n    public normalizeOne(tag: string): string {\r\n        return tag \r\n            ? _.trim(tag.replace(/(_|#)+/g, ' '))\r\n            : null;\r\n    }\r\n\r\n    public compressOne(tag: string): string {\r\n        return tag\r\n            ? tag.replace(/( |_|#)/g, '').toLowerCase()\r\n            : null;\r\n    }\r\n\r\n    public equal(tag1: string, tag2: string): boolean {\r\n        if (tag1 == null && tag2 == null)\r\n            return true;\r\n        if (tag1 == null || tag2 == null)\r\n            return false;\r\n        return this.compressOne(tag1) == this.compressOne(tag2);\r\n    }\r\n\r\n    public normalizeAll(tags: any): string[] {\r\n        if (_.isString(tags))\r\n            tags = tags.split(/( |,|;)+/);\r\n\r\n        tags = _.map(tags, (tag: string) => this.normalizeOne(tag));\r\n\r\n        return tags;\r\n    }\r\n\r\n    public compressAll(tags: any): string[] {\r\n        if (_.isString(tags))\r\n            tags = tags.split(/( |,|;)+/);\r\n\r\n        tags = _.map(tags, (tag: string) => this.compressOne(tag));\r\n\r\n        return tags;\r\n    }\r\n\r\n    public extract(entity: any, searchFields?: string[]): string[] {\r\n        let tags = this.normalizeAll(entity.tags);\r\n\r\n        _.each(searchFields, (field) => {\r\n            let text = entity[field] || '';\r\n\r\n            if (text != '') {\r\n                let hashTags = text.match(/#\\w+/g);\r\n                tags = tags.concat(this.normalizeAll(hashTags));\r\n            }\r\n        });\r\n\r\n        return _.uniq(tags);\r\n    }\r\n}\r\n\r\n\r\nangular\r\n    .module('pipTags', [])\r\n    .service('pipTags', Tags);\r\n","'use strict';\r\n\r\nexport interface ITimerService {\r\n    isStarted(): boolean;\r\n\r\n    addEvent(event: string, timeout: number): void;\r\n    removeEvent(event: string): void;\r\n    clearEvents(): void;\r\n\r\n    start(): void;\r\n    stop(): void;\r\n}\r\n\r\n\r\nclass TimerEvent {\r\n    public event: string;\r\n    public timeout: number;\r\n    public interval: any;\r\n\r\n    public constructor(event: string, timeout: number) {\r\n        this.event = event;\r\n        this.timeout = timeout;\r\n    }\r\n}\r\n\r\n\r\nlet DefaultEvents: TimerEvent[] = [\r\n    new TimerEvent('pipAutoPullChanges', 60000), // 1 min\r\n    new TimerEvent('pipAutoUpdatePage', 15000), // 15 sec\r\n    new TimerEvent('pipAutoUpdateCollection', 300000) // 5 min\r\n];\r\n\r\n\r\nclass TimerService implements ITimerService {\r\n    private _rootScope: ng.IRootScopeService;\r\n    private _log: ng.ILogService;\r\n    private _interval: ng.IIntervalService;        \r\n    private _started = false;\r\n    private _events: TimerEvent[] = _.cloneDeep(DefaultEvents);\r\n\r\n    public constructor(\r\n        $rootScope: ng.IRootScopeService,\r\n        $log: ng.ILogService, \r\n        $interval: ng.IIntervalService\r\n    ) {\r\n        \"ngInject\";\r\n\r\n        this._rootScope = $rootScope;\r\n        this._log = $log;\r\n        this._interval = $interval;\r\n    }\r\n\r\n    public isStarted(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    public addEvent(event: string, timeout: number): void {\r\n        var existingEvent = _.find(this._events, (e) => e.event == event);\r\n        if (existingEvent != null) return;\r\n\r\n        let newEvent = <TimerEvent> {\r\n            event: event,\r\n            timeout: timeout\r\n        };\r\n        this._events.push(newEvent);\r\n\r\n        if (this._started)\r\n            this.startEvent(newEvent);\r\n    }\r\n\r\n    public removeEvent(event: string): void {\r\n        for (let i = this._events.length - 1; i >= 0; i--) {\r\n            let existingEvent = this._events[i];\r\n            if (existingEvent.event == event) {\r\n                this.stopEvent(existingEvent);\r\n                this._events.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    public clearEvents(): void {\r\n        this.stop();\r\n        this._events = [];\r\n    }\r\n\r\n    private startEvent(event: TimerEvent): void {\r\n        event.interval = this._interval(\r\n            () => { \r\n                this._log.debug('Generated timer event ' + event.event); \r\n                this._rootScope.$emit(event.event)\r\n            },\r\n            event.timeout\r\n        )\r\n    }\r\n\r\n    private stopEvent(event: TimerEvent): void {\r\n        if (event.interval != null) {\r\n            try {\r\n                this._interval.cancel(event.interval);\r\n            } catch (ex) {\r\n                // Do nothing\r\n            }\r\n            event.interval = null;\r\n        }\r\n    }\r\n\r\n    public start(): void {\r\n        if (this._started) return;\r\n\r\n        _.each(this._events, (event) => {\r\n            this.startEvent(event);\r\n        });\r\n\r\n        this._started = true;\r\n    }\r\n\r\n    public stop(): void {\r\n        _.each(this._events, (event) => {\r\n            this.stopEvent(event);\r\n        });\r\n\r\n        this._started = false;\r\n    }\r\n}\r\n\r\n\r\nangular.module('pipTimer', [])\r\n    .service('pipTimer', TimerService);\r\n","'use strict';\r\n\r\nimport './Format';\r\nimport './TimerService';\r\nimport './ScrollService';\r\nimport './Tags';\r\nimport './Codes';\r\nimport './SystemInfo';\r\nimport './PageResetService';\r\n\r\nexport * from './Format';\r\nexport * from './TimerService';\r\nexport * from './ScrollService';\r\nexport * from './Tags';\r\nexport * from './Codes';\r\nexport * from './SystemInfo';\r\nexport * from './PageResetService';"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}