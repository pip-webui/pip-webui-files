{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/index.ts","src/routing/BackDecorator.ts","src/routing/RedirectDecorator.ts","src/routing/RoutingEvents.ts","src/routing/index.ts","src/session/IdentityService.ts","src/session/SessionService.ts","src/session/index.ts","src/transactions/Transaction.ts","src/transactions/TransactionError.ts","src/transactions/TransactionService.ts","src/transactions/TransactionStrings.ts","src/transactions/index.ts","src/translate/TranslateDirective.ts","src/translate/TranslateFilter.ts","src/translate/TranslateService.ts","src/translate/Translation.ts","src/translate/index.ts","src/utilities/Codes.ts","src/utilities/Format.ts","src/utilities/PageResetService.ts","src/utilities/ScrollService.ts","src/utilities/SystemInfo.ts","src/utilities/Tags.ts","src/utilities/TimerService.ts","src/utilities/index.ts"],"names":[],"mappings":"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","file":"pip-webui-services.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿import './translate';\nimport './session';\nimport './transactions';\nimport './routing';\nimport './utilities';\n\nangular.module('pipServices', [\n    'pipTranslate',\n    'pipSession',\n    'pipTransaction',\n    'pipRouting',\n    'pipFormat',\n    'pipTimer',\n    'pipScroll',\n    'pipTags',\n    'pipCodes',\n    'pipSystemInfo',\n    'pipPageReset'\n]);\n\nexport * from './translate';\nexport * from './session';\nexport * from './transactions';\nexport * from './routing';\nexport * from './utilities';\n","export let StateVar: string = \"$state\";\nexport let PrevStateVar: string = \"$prevState\";\n\n// Run function to set CurrentState and PreviousState global variables\nfunction captureStateTranslations($rootScope: ng.IRootScopeService) {\n    \"ngInject\";\n\n    $rootScope.$on('$stateChangeSuccess',\n        (event, toState, toParams, fromState, fromParams) => {\n\n            let CurrentState = {\n                name: toState.name, \n                url: toState.url, \n                params: toParams\n            };\n\n            let PreviousState = {\n                name: fromState.name, \n                url: fromState.url, \n                params: fromParams\n            };\n        // Record current and previous state\n        $rootScope[StateVar] = CurrentState;\n        $rootScope[PrevStateVar] = PreviousState;            \n        }\n    );\n\n}\n\n// Decorator function to modify $state service by adding goBack and goBackAndSelect methods\nfunction decorateBackStateService($delegate: any, $window: ng.IWindowService, $rootScope: ng.IRootScopeService): any {\n    \"ngInject\";\n\n    $delegate.goBack = goBack;\n    $delegate.goBackAndSelect = goBackAndSelect;\n\n    return $delegate;\n    //////////////////////////////////////////////////\n\n    function goBack(): void {\n        $window.history.back()\n    }\n\n    function goBackAndSelect(params: any): void {\n        // todo: define end fix PreviousState\n        if (!!$rootScope[StateVar] && !!$rootScope[PrevStateVar]) {\n\n            let state = _.cloneDeep($rootScope[PrevStateVar]);\n\n            // Override selected parameters\n            state.params = _.extend(state.params, params);\n\n            $delegate.go(state.name, state.params);\n        } else {\n            $window.history.back();\n        }\n    }\n}\n\n// Config function to decorate $state service\nfunction addBackStateDecorator($provide) {\n    $provide.decorator('$state', decorateBackStateService);\n}\n\nangular\n    .module('pipRouting')\n    .config(addBackStateDecorator)\n    .run(captureStateTranslations);\n    ","let RedirectedStates: any = {};\n\n// Decorator function to add $stateProvider redirect method\nfunction decorateRedirectStateProvider($delegate) {\n    \"ngInject\";\n\n    $delegate.redirect = redirect;\n\n    return $delegate;\n    /////////////////////////////////////////////\n\n    // Specify automatic redirect from one state to another\n    function redirect(fromState, toState) {\n        RedirectedStates[fromState] = toState;  \n        return this;\n    }\n}\n\n// Config function to decorate $state provider\nfunction addRedirectStateProviderDecorator($provide) {\n    \"ngInject\";\n\n    $provide.decorator('$state', decorateRedirectStateProvider);\n}\n\n// Decorator function to add redirect method to $state service\nfunction decorateRedirectStateService($delegate, $timeout) {\n    \"ngInject\";\n\n    $delegate.redirect = redirect;\n    \n    return $delegate;\n    ////////////////////////////////\n    \n    // Todo: Move this code directly to event handler?\n    // Todo: Nothing calls this code!!\n    function redirect(event, state, params) {\n        let toState = RedirectedStates[state.name];\n        if (_.isFunction(toState)) {\n            toState = toState(state.name, params);\n\n            if (_.isNull(toState))\n                throw new Error('Redirected toState cannot be null');\n        }\n\n        if (!!toState) {\n            $timeout(() => {\n                event.preventDefault();\n                $delegate.transitionTo(toState, params, {location: 'replace'});\n            });\n\n            return true;\n        }\n\n        return false;\n    }\n}\n\n// Config function to decorate $state service\nfunction addRedirectStateDecorator($provide) {\n    \"ngInject\";\n\n    $provide.decorator('$state', decorateRedirectStateService);\n}\n\nangular\n    .module('pipRouting')\n    .config(addRedirectStateProviderDecorator)\n    .config(addRedirectStateDecorator);\n    ","export let RoutingVar: string = \"$routing\";\n\nfunction hookRoutingEvents(\n    $rootScope: ng.IRootScopeService,\n    $log: ng.ILogService,\n    $state: ng.ui.IStateService\n) {\n    \"ngInject\";\n\n    $rootScope.$on('$stateChangeStart',\n        (event, toState, toParams, fromState, fromParams) => {\n            $rootScope[RoutingVar] = true;\n        }\n    );\n\n    $rootScope.$on('$stateChangeSuccess',\n        (event, toState, toParams, fromState, fromParams) => {\n            // Unset routing variable to disable page transition\n            $rootScope[RoutingVar] = false;                \n        }\n    );\n\n    // Intercept route error\n    $rootScope.$on('$stateChangeError',\n        (event, toState, toParams, fromState, fromParams, error) => {\n            // Unset routing variable to disable page transition\n            $rootScope[RoutingVar] = false;\n\n            $log.error('Error while switching route to ' + toState.name);\n            $log.error(error);\n        }\n    );\n\n}\n\nangular\n    .module('pipRouting')\n    .run(hookRoutingEvents);\n    ","angular.module('pipRouting', ['ui.router']);\n\nimport './BackDecorator';\nimport './RedirectDecorator';\nimport './RoutingEvents';\n\nexport * from './BackDecorator';\nexport * from './RoutingEvents';\n","import { IIdentityService, IIdentityProvider } from './IIdentityService';\n\nexport let IdentityRootVar = \"$identity\";\nexport let IdentityChangedEvent = \"pipIdentityChanged\";\n\nclass IdentityService implements IIdentityService {\n    private _identity: any;\n    private _setRootVar: boolean;\n    private _rootScope: ng.IRootScopeService;\n    private _log: ng.ILogService;\n\n    public constructor(\n        setRootVar: boolean,\n        identity: any,\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService\n    ) {\n        this._setRootVar = setRootVar;\n        this._identity = identity;\n        this._rootScope = $rootScope;\n        this._log = $log;\n\n        this.setRootVar();\n    }\n\n    private setRootVar(): void {\n        if (this._setRootVar)\n            this._rootScope[IdentityRootVar] = this._identity;\n    }\n\n    public get identity(): any {\n        return this._identity;\n    }\n\n    public set identity(value: any) {\n        this._identity = value;\n        this.setRootVar();\n        this._rootScope.$emit(IdentityChangedEvent, this._identity);\n\n        let identity: any = value || {};\n        this._log.debug(\"Changed identity to \" + JSON.stringify(identity));\n    }\n}\n\nclass IdentityProvider implements IdentityProvider {\n    private _setRootVar = true;\n    private _identity: any = null;\n    private _service: IdentityService = null;\n\n    public constructor() { }\n\n    public get setRootVar(): boolean {\n        return this._setRootVar;  \n    }\n\n    public set setRootVar(value: boolean) {\n        this._setRootVar = !!value;\n    }\n\n    public get identity(): any {\n        return this._identity;  \n    }\n\n    public set identity(value: any) {\n        this._identity = value;\n    }\n\n    public $get(\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService\n    ): any {\n        \"ngInject\";\n\n        if (this._service == null)\n            this._service = new IdentityService(this._setRootVar, this._identity, $rootScope, $log);\n\n        return this._service;\n    }\n\n}\n\nangular\n    .module('pipSession')\n    .provider('pipIdentity', IdentityProvider);\n","import { ISessionService, ISessionProvider } from './ISessionService';\n\nexport const SessionRootVar = \"$session\";\nexport const SessionOpenedEvent = \"pipSessionOpened\";\nexport const SessionClosedEvent = \"pipSessionClosed\";\n\nclass SessionService implements ISessionService {\n    private _setRootVar: boolean;\n    private _session: any;\n    private _rootScope: ng.IRootScopeService;\n    private _log: ng.ILogService;\n\n    public constructor(\n        setRootVar: boolean, \n        session: any, \n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService\n    ) {\n        this._setRootVar = setRootVar;\n        this._session = session;\n        this._rootScope = $rootScope;\n        this._log = $log;\n\n        this.setRootVar();\n    }\n    \n    private setRootVar(): void {\n        if (this._setRootVar)\n            this._rootScope[SessionRootVar] = this._session;\n    }\n\n    public get session(): any {\n        return this._session;\n    }\n\n    public isOpened(): boolean {\n        return this._session != null;\n    }\n\n    public open(session: any, fullReset: boolean = false, partialReset: boolean = false) {\n        if (session == null)\n            throw new Error(\"Session cannot be null\");\n\n        this._session = session;\n        this.setRootVar();\n        this._rootScope.$emit(SessionOpenedEvent, session);\n\n        this._log.debug(\"Opened session \" + session);\n    }\n\n    public close(fullReset: boolean = false, partialReset: boolean = false) {\n        let oldSession = this._session;\n\n        this._session = null;\n        this.setRootVar();\n        this._rootScope.$emit(SessionClosedEvent, oldSession);\n\n        this._log.debug(\"Closed session \" + oldSession);\n    }\n}\n\nclass SessionProvider implements ISessionProvider {\n    private _setRootVar = true;\n    private _session: any = null;\n    private _service: SessionService = null;\n\n    public constructor() { }\n\n    public get setRootVar(): boolean {\n        return this._setRootVar;  \n    }\n\n    public set setRootVar(value: boolean) {\n        this._setRootVar = !!value;\n    }\n\n    public get session(): any {\n        return this._session;  \n    }\n\n    public set session(value: any) {\n        this._session = value;\n    }\n\n    public $get(\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService\n    ): any {\n        \"ngInject\";\n\n        if (this._service == null)\n            this._service = new SessionService(this._setRootVar, this._session, $rootScope, $log);\n\n        return this._service;\n    }\n}\n\nangular\n    .module('pipSession')\n    .provider('pipSession', SessionProvider); \n","angular.module('pipSession', []);\n\nimport './IdentityService';\nimport './SessionService';\n\nexport * from './IIdentity';\nexport * from './IIdentityService';\nexport * from './IdentityService';\n\nexport * from './ISessionService';\nexport * from './SessionService';\n","import { TransactionError } from './TransactionError'\n\nexport class Transaction {\n    private _scope: string = null;\n    private _id: string = null;\n    private _operation: string = null;\n    private _error: TransactionError = new TransactionError();\n    private _progress: number = 0;\n\n    public constructor(scope: string) {\n        this._scope = scope;\n    }\n\n    public get scope(): string {\n        return this._scope;\n    }\n\n    public get id(): string {\n        return this._id;\n    }\n\n    public get operation(): string {\n        return this._operation;\n    }\n\n    public get progress(): number {\n        return this._progress;\n    }\n\n    public get error(): TransactionError {\n        return this._error;\n    }\n\n    public get errorMessage(): string {\n        return this._error.message;\n    }\n\n    public reset(): void {\n        this._id = null;\n        this._operation = null;\n        this._progress = 0;\n        this._error.reset();\n    }\n\n    public busy(): boolean {\n        return this._id != null;\n    }\n\n    public failed(): boolean {\n        return !this._error.empty();\n    }\n\n    public aborted(id: string): boolean {\n        return this._id != id;\n    }\n\n    public begin(operation: string): string {\n        // Transaction is already running\n        if (this._id != null) return null;\n\n        this._id = new Date().getTime().toString();\n        this._operation = operation || 'PROCESSING'\n        this._error.reset();\n\n        return this._id;\n    }\n\n    public update(progress: number): void {\n        this._progress = Math.max(progress, 100);\n    }\n\n    public abort(): void {\n        this._id = null;\n        this._error.reset();\n    }\n\n    public end(error?: any): void {\n        this._error.decode(error);\n        this._id = null;\n    }\n}\n","export class TransactionError {\n    public code: string;\n    public message: string;\n    public details: any;\n    public cause: string;\n    public stack_trace: string;\n\n    public constructor(error?: any) {\n        if (error != null)\n            this.decode(error);\n    }\n\n    public reset(): void {\n        this.code = null;\n        this.message = null;\n        this.details = null;\n        this.cause = null;\n        this.stack_trace = null;\n    }\n\n    public empty(): boolean {\n        return this.message = null && this.code == null;\n    }\n\n    public decode(error: any): void {\n        this.reset();\n\n        if (error == null) return;\n\n        // Process regular messages\n        if (error.message) {\n            this.message = error.message;\n        }\n\n        // Process server application errors\n        if (error.data) {\n            if (error.data.code) { \n                // process server error codes here\n                this.message = this.message || 'ERROR_' + error.data.code;\n                this.code = this.code || error.data.code;\n            }\n\n            if (error.data.message) {\n                this.message = this.message || error.data.message;\n            }\n\n            this.message = this.message || error.data;\n            this.details = this.details || error.data;\n\n            this.cause = error.data.cause;\n            this.stack_trace = error.data.stack_trace;\n            this.details = error.data.details;            \n        }\n\n        // Process standard HTTP errors\n        if (error.statusText) {\n            this.message = this.message || error.statusText;\n        }\n        if (error.status) {\n            this.message = this.message || 'ERROR_' + error.status;\n            this.code = this.code || error.status;\n        }\n        \n        this.message = this.message || error;\n        this.details = this.details || error;\n    }\n}\n","import { Transaction } from './Transaction';\nimport { ITransactionService } from './ITransactionService';\n\nclass TransactionService implements ITransactionService {\n    private _transactions: Transaction = <Transaction>{};\n\n    public constructor() {}\n\n    public create(scope?: string): Transaction {\n        let transaction: Transaction = new Transaction(scope);\n        \n        if (scope != null)\n            this._transactions[scope] = transaction;\n\n        return transaction;\n    }\n\n    public get(scope?: string): Transaction {\n        let transaction: Transaction = scope != null ? <Transaction>this._transactions[scope] : null;\n\n        if (transaction == null) {\n            transaction = new Transaction(scope);\n            if (scope != null)\n                this._transactions[scope] = transaction;\n        }\n\n        return transaction;\n    }\n}\n\nangular\n    .module('pipTransaction')\n    .service('pipTransaction', TransactionService);\n","import { ITranslateService } from '../translate/ITranslateService';\n\nfunction configureTransactionStrings($injector: ng.auto.IInjectorService) {\n    \"ngInject\";\n\n    let pipTranslate: ITranslateService = $injector.has('pipTranslateProvider') \n        ? <ITranslateService>$injector.get('pipTranslateProvider') : null;\n\n    if (pipTranslate) {\n        pipTranslate.setTranslations('en', {\n            'ENTERING': 'Entering...',\n            'PROCESSING': 'Processing...',\n            'LOADING': 'Loading...',\n            'SAVING': 'Saving...'\n        });\n\n        pipTranslate.setTranslations('ru', {\n            'ENTERING': 'Вход в систему...',\n            'PROCESSING': 'Обрабатывается...',\n            'LOADING': 'Загружается...',\n            'SAVING': 'Сохраняется...'\n        });   \n    }\n    \n}\n\nangular\n    .module('pipTransaction')\n    .config(configureTransactionStrings);\n","angular.module('pipTransaction', []);\n\nimport './TransactionStrings';\nimport './TransactionError';\nimport './Transaction';\nimport './TransactionService';\n\nexport * from './TransactionError';\nexport * from './Transaction';\nexport * from './ITransactionService';\n","import { ITranslateService } from '../translate/ITranslateService';\n\nfunction translateDirective(pipTranslate): ng.IDirective {\n    \"ngInject\";\n\n    return {\n        restrict: 'EA',\n        scope: {\n            key1: '@pipTranslate',\n            key2: '@key'\n        },\n        link: (scope: any, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {\n            let key: string = scope.key1 || scope.key2;\n            let value: string = pipTranslate.translate(key);\n            element.text(value);\n        }\n    };\n}\n\nfunction translateHtmlDirective(pipTranslate: ITranslateService): ng.IDirective {\n    \"ngInject\";\n\n    return {\n        restrict: 'EA',\n        scope: {\n            key1: '@pipTranslateHtml',\n            key2: '@key'\n        },\n        link: (scope: any, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {\n            let key: string = scope.key1 || scope.key2;\n            let value: string = pipTranslate.translate(key);\n            element.html(value);\n        }\n    };\n}\n\nangular\n    .module('pipTranslate')\n    .directive('pipTranslate', translateDirective)\n    .directive('pipTranslateHtml', translateHtmlDirective);\n","import { ITranslateService } from './ITranslateService';\n\nfunction translateFilter(pipTranslate: ITranslateService) {\n    \"ngInject\";\n\n    return function (key: string) {\n        return pipTranslate.translate(key) || key;\n    }\n}\n\nfunction optionalTranslateFilter($injector: ng.auto.IInjectorService) {\n    \"ngInject\";\n\n    let pipTranslate: ITranslateService = $injector.has('pipTranslate') \n        ? <ITranslateService>$injector.get('pipTranslate') : null;\n\n    return function (key: string) {\n        return pipTranslate  ? pipTranslate.translate(key) || key : key;\n    }\n}\n\nangular\n    .module('pipTranslate')\n    .filter('translate', translateFilter);\n","﻿import { Translation } from './Translation';\nimport { ResetPageEvent } from '../utilities/PageResetService';\nimport { ITranslateService, ITranslateProvider } from './ITranslateService';\n\nexport let LanguageRootVar = \"$language\";\nexport let LanguageChangedEvent = \"pipLanguageChanged\";    \n\nclass TranslateService implements ITranslateService {\n    private _translation: Translation;\n    private _setRootVar: boolean;\n    private _persist: boolean;\n    private _rootScope: ng.IRootScopeService;\n    private _log: ng.ILogService;\n    private _window: ng.IWindowService;\n    private _mdDateLocale: angular.material.IDateLocaleProvider;\n\n    public constructor(\n        translation: Translation,\n        setRootVar: boolean,\n        persist: boolean,\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService,\n        $window: ng.IWindowService,\n        $mdDateLocale: angular.material.IDateLocaleProvider,\n    ) {\n        this._setRootVar = setRootVar;\n        this._persist = persist;\n        this._translation = translation;\n        this._rootScope = $rootScope;\n        this._log = $log;\n        this._window = $window;\n        this._mdDateLocale = $mdDateLocale;\n\n        if (this._persist && this._window.localStorage)\n            this._translation.language = this._window.localStorage.getItem('language') || this._translation.language;\n\n        this._log.debug(\"Set language to \" + this._translation.language);\n\n        this.save();\n    }\n\n    private changeLocale(locale: string) {\n        if (!locale) return;\n\n        // var localeDate: moment.MomentLanguageData;\n        var localeDate: any;\n\n        moment.locale(locale);\n        localeDate = moment.localeData();\n\n        this._mdDateLocale.months = angular.isArray(localeDate._months) ? localeDate._months : localeDate._months.format;\n        this._mdDateLocale.shortMonths = angular.isArray(localeDate._monthsShort) ? localeDate._monthsShort : localeDate._monthsShort.format;\n        this._mdDateLocale.days = angular.isArray(localeDate._weekdays) ? localeDate._weekdays : localeDate._weekdays.format;\n        this._mdDateLocale.shortDays = localeDate._weekdaysMin;\n        this._mdDateLocale.firstDayOfWeek = localeDate._week.dow;\n    }\n\n    private save(): void {\n        if (this._setRootVar)\n            this._rootScope[LanguageRootVar] = this._translation.language;\n\n        if (this._persist && this._window.localStorage != null)\n            this._window.localStorage.setItem('language', this._translation.language);\n    }\n\n    public get language(): string {\n        return this._translation.language;\n    }\n\n    public set language(value: string) {\n        if (value != this._translation.language) {\n            this._translation.language = value;\n            \n            this._log.debug(\"Changing language to \" + value);\n\n            this.changeLocale(this._translation.language);\n            this.save();   \n\n            this._rootScope.$emit(LanguageChangedEvent, value);\n            this._rootScope.$emit(ResetPageEvent);\n        }\n    }\n\n    public use(language: string): string {\n        if (language != null)\n            this.language = language;\n        return this.language;\n    }\n\n    public setTranslations(language: string, translations: any): void {\n        return this._translation.setTranslations(language, translations);\n    }\n\n    public translations(language: string, translations: any): void {\n        return this._translation.setTranslations(language, translations);\n    }\n\n    public translate(key: string): string {\n        return this._translation.translate(key);\n    }\n\n    public translateArray(keys: string[]): string[] {\n        return this._translation.translateArray(keys);\n    }\n    \n    public translateSet(keys: string[], keyProp: string, valueProp: string): any[] {\n        return this._translation.translateSet(keys, keyProp, valueProp);\n    }\n\n    public translateObjects(items: any[], keyProp: string, valueProp: string): any[] {\n        return this._translation.translateObjects(items, keyProp, valueProp);\n    }\n\n    public translateWithPrefix(prefix: string, key: string) {\n        return this._translation.translateWithPrefix(prefix, key);\n    }\n\n    public translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string) {\n        return this._translation.translateSetWithPrefix(prefix, keys, keyProp, valueProp);\n    }\n\n    public translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string) {\n        return this._translation.translateSetWithPrefix2(prefix, keys, keyProp, valueProp);\n    }\n}\n\nclass TranslateProvider extends Translation implements ITranslateProvider {\n    private _translation: Translation;\n    private _setRootVar: boolean = true;\n    private _persist: boolean = true;\n    private _service: TranslateService;\n    \n    public constructor() {\n        super();\n    }\n\n    public get setRootVar(): boolean {\n        return this._setRootVar;  \n    }\n\n    public set setRootVar(value: boolean) {\n        this._setRootVar = !!value;\n    }\n\n    public get persist(): boolean {\n        return this._persist;  \n    }\n\n    public set persist(value: boolean) {\n        this._persist = !!value;\n    }\n\n    public $get(\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService, \n        $window: ng.IWindowService,\n        $mdDateLocale: angular.material.IDateLocaleProvider\n    ): any {\n        \"ngInject\";\n\n        if (this._service == null) \n            this._service = new TranslateService(this, this._setRootVar, this._persist, $rootScope, $log, $window, $mdDateLocale);\n\n        return this._service;\n    }\n}\n\nfunction initTranslate(pipTranslate: ITranslateService) {\n    pipTranslate.language;\n}\n\nangular\n    .module('pipTranslate')\n    .provider('pipTranslate', TranslateProvider)\n    .run(initTranslate);\n","export class Translation {\n    protected _language: string = 'en';\n    protected _translations = {\n        en: {\n            'en': 'English',\n            'ru': 'Russian',\n            'es': 'Spanish',\n            'pt': 'Portuguese',\n            'de': 'German',\n            'fr': 'French'\n        },\n        ru: {\n            'en': 'Английский',\n            'ru': 'Русский',\n            'es': 'Испанский',\n            'pt': 'Португальский',\n            'de': 'Немецкий',\n            'fr': 'Французский'\n        }\n    };\n\n    public constructor() {}\n\n    public get language(): string { return this._language; }\n    public set language(value: string) { this._language = value; }\n\n    public use(language: string): string {\n        if (language != null)\n            this._language = language;\n        return this._language;\n    }\n\n    // Set translation strings for specific language\n    public setTranslations(language: string, translations: any): void {\n        let map = this._translations[language] || {};\n        this._translations[language] = _.extend(map, translations);\n    }\n\n    // Yet another method to set translation strings for specific language\n    public translations(language: string, translations: any): void {\n        this.setTranslations(language, translations);\n    }\n\n    // Translate a string by key using set language\n    public translate(key: string): string {\n        if (_.isNull(key) || _.isUndefined(key)) return '';\n\n        let translations = this._translations[this._language] || {};\n        return translations[key] || key;\n    }\n\n    // Translate an array of strings\n    public translateArray(keys: string[]): string[] {\n        if (_.isNull(keys) || keys.length == 0) return [];\n\n        let values: string[] = [];\n        let translations = this._translations[this._language] || {};\n\n        _.each(keys, function (k: string) {\n            let key = k || '';\n            values.push(translations[key] || key);\n        });\n\n        return values;\n    }\n\n    // Translate an array of strings into array of objects (set)\n    public translateSet(keys: string[], keyProp: string, valueProp: string): any[] {\n        if (_.isNull(keys) || keys.length == 0) return [];\n\n        keyProp = keyProp || 'id';\n        valueProp = valueProp || 'name';\n\n        let values: any[] = [];\n        let translations = this._translations[this._language] || {};\n\n        _.each(keys, function (key: string) {\n            let value: any = {};\n            key = key || '';\n\n            value[keyProp] = key;\n            value[valueProp] = translations[key] || key;\n\n            values.push(value);\n        });\n\n        return values;\n    }\n\n    // Translate a collection of objects\n    public translateObjects(items: any[], keyProp: string, valueProp: string): any[] {\n        if (_.isNull(items) || items.length == 0) return [];\n\n        keyProp = keyProp || 'name';\n        valueProp = valueProp || 'nameLocal';\n\n        let translations = this._translations[this._language] || {};\n\n        _.each(items, function (item: any) {\n            let key = item[keyProp] || '';\n\n            item[valueProp] = translations[key] || key;\n        });\n\n        return items;\n    }\n\n    // Translate a string by key  with prefix using set language todo\n    public translateWithPrefix(prefix: string, key: string) {\n        prefix = prefix ? prefix + '_' : '';\n        key = (prefix + key).replace(/ /g, '_').toUpperCase();\n        if (key == null) return '';\n        let translations = this._translations[this._language] || {};\n        return translations[key] || key;\n    };\n\n    public translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string) {\n        if (_.isNull(keys) || keys.length == 0) return [];\n\n        prefix = prefix ? prefix.replace(/ /g, '_').toUpperCase() : '';\n        keyProp = keyProp || 'id';\n        valueProp = valueProp || 'name';\n\n        let values = [];\n        let translations = this._translations[this._language] || {};\n\n        _.each(keys, function (key: string) {\n            let value: any = {}; \n            key = key || '';\n\n            value[keyProp] = key;\n            value[valueProp] = translations[prefix + '_' + key] || key;\n\n            values.push(value);\n        });\n\n        return values;\n    }\n\n    // Translate an array of strings, apply uppercase and replace ' ' => '_'\n    public translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string) {\n        if (_.isNull(keys) || keys.length == 0) return [];\n\n        keyProp = keyProp || 'id';\n        valueProp = valueProp || 'name';\n        prefix = prefix ? prefix.replace(/ /g, '_').toUpperCase() + '_': '';\n\n        let values = [];\n        let translations = this._translations[this._language] || {};\n\n        _.each(keys, function (key: string) {\n            let value: any = {};\n            key = key || '';\n\n            value[keyProp] = key;\n            value[valueProp] = translations[prefix + key.replace(/ /g, '_').toUpperCase()]\n                || (prefix + key.replace(/ /g, '_').toUpperCase());\n\n            values.push(value);\n        });\n\n        return values;\n    }\n}\n","angular.module('pipTranslate', []);\n\nimport './Translation';\nimport './TranslateService';\nimport './TranslateFilter';\nimport './TranslateDirective';\n\nexport * from './Translation';\nexport * from './ITranslateService';\nexport * from './TranslateService';\n","import { ICodes } from './ICodes';\n\nclass Codes implements ICodes {\n    // Simple version of string hashcode\n    public hash(value: string): number {\n        if (value == null) return 0;\n        \n        let result: number = 0;\n        for (let i = 0; i < value.length; i++)\n            result += value.charCodeAt(i);\n\n        return result;\n    }\n\n    // Generates random big number for verification codes\n    public verification(): string {\n        return Math.random().toString(36).substr(2, 10).toUpperCase(); // remove `0.`\n    }\n}\n\nangular\n    .module('pipCodes', [])\n    .service('pipCodes', Codes);\n","import { IFormat } from './IFormat';\n\nclass Format implements IFormat {\n    // Cached for parsed formats\n    private cache = {};\n\n    // Creates a sample line from a text\n    public sample(value: string, maxLength: number): string {\n        if (!value || value == '') {\n            return '';\n        }\n\n        var length: number = value.indexOf('\\n');\n        length = length >= 0 ? length : value.length;\n        length = length < maxLength ? value.length : maxLength;\n\n        return value.substring(0, length);\n    }\n\n    private strRepeat(str: string, qty: number): string {\n        if (qty < 1) { \n            return '';\n        }\n        var result: string = '';\n        while (qty > 0) {\n            if (qty & 1) result += str;\n            qty >>= 1, str += str;\n        }\n        return result;\n    }\n\n    private getType(variable): string {\n        return toString.call(variable).slice(8, -1).toLowerCase();\n    }\n\n    private parseFormat(fmt: string): any {\n        let _fmt: string = fmt, match = [], parse_tree = [], arg_names: number = 0;\n        while (_fmt) {\n            if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n                parse_tree.push(match[0]);\n            }\n            else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n                parse_tree.push('%');\n            }\n            else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1;\n                    let field_list: string[] = [], replacement_field: string = match[2], field_match: string[] = [];\n                    if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1]);\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1]);\n                            }\n                            else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1]);\n                            }\n                            else {\n                                throw new Error('Unknown error');\n                            }\n                        }\n                    }\n                    else {\n                        throw new Error('Unknown error');\n                    }\n                    match[2] = field_list;\n                }\n                else {\n                    arg_names |= 2;\n                }\n                if (arg_names === 3) {\n                    throw new Error('Mixing positional and named placeholders is not (yet) supported');\n                }\n                parse_tree.push(match);\n            }\n            else {\n                throw new Error('Unknown error');\n            }\n            _fmt = _fmt.substring(match[0].length);\n        }\n        return parse_tree;\n    }\n\n    private format(parse_tree: any, argv: any): string {\n        let cursor: number = 0; \n        let tree_length: number = parse_tree.length; \n        let output = [];\n\n        for (let i = 0; i < tree_length; i++) {\n            let node_type = this.getType(parse_tree[i]);\n            if (node_type === 'string') {\n                output.push(parse_tree[i]);\n            }\n            else if (node_type === 'array') {\n                let match = parse_tree[i]; // convenience purposes only\n                let arg: any;\n                if (match[2]) { // keyword argument\n                    arg = argv[cursor];\n                    for (let k = 0; k < match[2].length; k++) {\n                        if (!arg.hasOwnProperty(match[2][k])) {\n                            throw new Error(this.sprintf('Property \"%s\" does not exist', match[2][k]));\n                        }\n                        arg = arg[match[2][k]];\n                    }\n                } else if (match[1]) { // positional argument (explicit)\n                    arg = argv[match[1]];\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++];\n                }\n\n                if (/[^s]/.test(match[8]) && (this.getType(arg) != 'number')) {\n                    throw new Error(this.sprintf('Expecting number but found %s', this.getType(arg)));\n                }\n                switch (match[8]) {\n                    case 'b': arg = arg.toString(2); break;\n                    case 'c': arg = String.fromCharCode(arg); break;\n                    case 'd': arg = parseInt(arg, 10); break;\n                    case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n                    case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n                    case 'o': arg = arg.toString(8); break;\n                    case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n                    case 'u': arg = Math.abs(arg); break;\n                    case 'x': arg = arg.toString(16); break;\n                    case 'X': arg = arg.toString(16).toUpperCase(); break;\n                }\n                arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);                \n                let pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n                let pad_length = match[6] - String(arg).length;\n                let pad = match[6] ? this.strRepeat(pad_character, pad_length) : '';\n                output.push(match[5] ? arg + pad : pad + arg);\n            }\n        }\n        return output.join('');\n    }\n    \n    public sprintf(message: string, ...args: any[]): string {\n        if (!this.cache.hasOwnProperty(message))\n            this.cache[message] = this.parseFormat(message);\n\n        return this.format(this.cache[message], args);\n    }\n}\n\n\nangular\n    .module('pipFormat', [])\n    .service('pipFormat', Format);\n","import { IPageResetService } from './IPageResetService';\n\n\nexport let ResetPageEvent: string = \"pipResetPage\";\nexport let ResetAreaEvent: string = \"pipResetArea\";\n\nexport let ResetRootVar: string = \"$reset\";\nexport let ResetAreaRootVar: string = \"$resetArea\";\n\n\nclass PageResetService implements IPageResetService {\n    private _rootScope: ng.IRootScopeService;\n    private _log: ng.ILogService;\n    private _timeout: ng.ITimeoutService;\n\n    public constructor(\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService, \n        $timeout: ng.ITimeoutService\n    ) {\n        this._rootScope = $rootScope;\n        this._log = $log;\n        this._timeout = $timeout;\n\n        $rootScope[ResetRootVar] = false;\n        $rootScope[ResetAreaRootVar] = null;\n    }\n\n    public reset(): void {\n        this._log.debug(\"Resetting the entire page\");\n        this.performReset(null);\n    }\n\n    public resetArea(area: string): void {\n        this._log.debug(\"Resetting the area \" + area);\n        this.performReset(area);\n    }\n\n    private performReset(area?: string): void {\n        this._rootScope[ResetRootVar] = area == null;\n        this._rootScope[ResetAreaRootVar] = area;\n\n        this._timeout(() => {\n            this._rootScope[ResetRootVar] = false;\n            this._rootScope[ResetAreaRootVar] = null;\n        }, 0);\n    }\n}\n\n\nfunction hookResetEvents(\n    $rootScope: ng.IRootScopeService, \n    pipPageReset: IPageResetService\n) {\n    $rootScope.$on(ResetPageEvent, () => { pipPageReset.reset(); });\n    $rootScope.$on(ResetAreaEvent, (event, area) => { pipPageReset.resetArea(area); });\n}\n\n\nangular.module('pipPageReset', [])\n    .service('pipPageReset', PageResetService)\n    .run(hookResetEvents);\n","import { IScrollService } from './IScrollService';\n\n\nclass ScrollService implements IScrollService {\n\n    public scrollTo(parentElement, childElement, animationDuration): void {\n        if (!parentElement || !childElement) return;\n        if (animationDuration == undefined) animationDuration = 300;\n\n        setTimeout(function () {\n            if (!$(childElement).position()) return;\n            var modDiff= Math.abs($(parentElement).scrollTop() - $(childElement).position().top);\n            if (modDiff < 20) return;\n            var scrollTo = $(parentElement).scrollTop() + ($(childElement).position().top - 20);\n            if (animationDuration > 0)\n                $(parentElement).animate({\n                    scrollTop: scrollTo + 'px'\n                }, animationDuration);\n        }, 100);\n    }\n\n}\n\n\nangular\n    .module('pipScroll', [])\n    .service('pipScroll', ScrollService);\n","import { ISystemInfo } from './ISystemInfo';\n\n\nclass SystemInfo implements ISystemInfo {\n    private _window: ng.IWindowService;\n\n    public constructor($window: ng.IWindowService) {\n        \"ngInject\";\n\n        this._window = $window;\n    }\n\n    // todo add support for iPhone\n    public get browserName(): string {\n        let ua = this._window.navigator.userAgent;\n\n        if (ua.search(/Edge/) > -1) return \"edge\";\n        if (ua.search(/MSIE/) > -1) return \"ie\";\n        if (ua.search(/Trident/) > -1) return \"ie\";\n        if (ua.search(/Firefox/) > -1) return \"firefox\";\n        if (ua.search(/Opera/) > -1) return \"opera\";\n        if (ua.search(/OPR/) > -1) return \"opera\";\n        if (ua.search(/YaBrowser/) > -1) return \"yabrowser\";\n        if (ua.search(/Chrome/) > -1) return \"chrome\";\n        if (ua.search(/Safari/) > -1) return \"safari\";\n        if (ua.search(/Maxthon/) > -1) return \"maxthon\";\n        \n        return \"unknown\";\n    }\n\n    public get browserVersion(): string {\n        let version;\n        let ua = this._window.navigator.userAgent;\n        let browser = this.browserName;\n\n        switch (browser) {\n            case \"edge\":\n                version = (ua.split(\"Edge\")[1]).split(\"/\")[1];\n                break;\n            case \"ie\":\n                version = (ua.split(\"MSIE \")[1]).split(\";\")[0];\n                break;\n            case \"ie11\":\n                browser = \"ie\";\n                version = (ua.split(\"; rv:\")[1]).split(\")\")[0];\n                break;\n            case \"firefox\":\n                version = ua.split(\"Firefox/\")[1];\n                break;\n            case \"opera\":\n                version = ua.split(\"Version/\")[1];\n                break;\n            case \"operaWebkit\":\n                version = ua.split(\"OPR/\")[1];\n                break;\n            case \"yabrowser\":\n                version = (ua.split(\"YaBrowser/\")[1]).split(\" \")[0];\n                break;\n            case \"chrome\":\n                version = (ua.split(\"Chrome/\")[1]).split(\" \")[0];\n                break;\n            case \"safari\":\n                version = (ua.split(\"Version/\")[1]).split(\" \")[0];\n                break;\n            case \"maxthon\":\n                version = ua.split(\"Maxthon/\")[1];\n                break;\n        }\n\n        return version;\n    }\n    \n    public get platform(): string {\n        let ua = this._window.navigator.userAgent;\n\n        if (/iphone|ipad|ipod|android|blackberry|mini|windows\\sce|palm/i.test(ua.toLowerCase())) \n            return 'mobile';\n\n        return 'desktop';\n    }\n\n    public get os(): string {\n        let ua = this._window.navigator.userAgent;\n\n        try {\n            let osAll = (/(windows|mac|android|linux|blackberry|sunos|solaris|iphone)/.exec(ua.toLowerCase()) || [ua])[0].replace('sunos', 'solaris');\n            let osAndroid = (/(android)/.exec(ua.toLowerCase()) || '');\n            return osAndroid && (osAndroid == 'android' || (osAndroid[0] == 'android')) ? 'android' : osAll;\n        } catch (err) {\n            return 'unknown'\n        }\n    }\n\n    public isDesktop(): boolean {\n        return this.platform == 'desktop';\n    }\n\n    public isMobile(): boolean {\n        return this.platform == 'mobile';\n    }\n\n    // Todo: complete implementation\n    public isCordova(): boolean {\n        return false;\n    }\n\n    // Todo: Move to errors\n    public isSupported(supported?: any): boolean {\n        if (!supported) \n            supported = {\n                edge: 11,\n                ie: 11,\n                firefox: 43, //4, for testing\n                opera: 35,\n                chrome: 47\n            };\n\n        let browser = this.browserName;\n        let version = this.browserVersion;\n        version = version.split(\".\")[0]\n\n        if (browser && supported[browser] && version >= supported[browser]) \n            return true;\n\n        return true;\n    }\n}\n\n\nangular\n    .module('pipSystemInfo', [])\n    .service('pipSystemInfo', SystemInfo);\n","import { ITags } from './ITags';\n\nclass Tags implements ITags {\n\n    public normalizeOne(tag: string): string {\n        return tag \n            ? _.trim(tag.replace(/(_|#)+/g, ' '))\n            : null;\n    }\n\n    public compressOne(tag: string): string {\n        return tag\n            ? tag.replace(/( |_|#)/g, '').toLowerCase()\n            : null;\n    }\n\n    public equal(tag1: string, tag2: string): boolean {\n        if (tag1 == null && tag2 == null)\n            return true;\n        if (tag1 == null || tag2 == null)\n            return false;\n        return this.compressOne(tag1) == this.compressOne(tag2);\n    }\n\n    public normalizeAll(tags: any): string[] {\n        if (_.isString(tags))\n            tags = tags.split(/( |,|;)+/);\n\n        tags = _.map(tags, (tag: string) => this.normalizeOne(tag));\n\n        return tags;\n    }\n\n    public compressAll(tags: any): string[] {\n        if (_.isString(tags))\n            tags = tags.split(/( |,|;)+/);\n\n        tags = _.map(tags, (tag: string) => this.compressOne(tag));\n\n        return tags;\n    }\n\n    public extract(entity: any, searchFields?: string[]): string[] {\n        let tags = this.normalizeAll(entity.tags);\n\n        _.each(searchFields, (field) => {\n            let text = entity[field] || '';\n\n            if (text != '') {\n                let hashTags = text.match(/#\\w+/g);\n                tags = tags.concat(this.normalizeAll(hashTags));\n            }\n        });\n\n        return _.uniq(tags);\n    }\n}\n\n\nangular\n    .module('pipTags', [])\n    .service('pipTags', Tags);\n","import { ITimerService } from './ITimerService';\n\nclass TimerEvent {\n    public event: string;\n    public timeout: number;\n    public interval: any;\n\n    public constructor(event: string, timeout: number) {\n        this.event = event;\n        this.timeout = timeout;\n    }\n}\n\n\nlet DefaultEvents: TimerEvent[] = [\n    new TimerEvent('pipAutoPullChanges', 60000), // 1 min\n    new TimerEvent('pipAutoUpdatePage', 15000), // 15 sec\n    new TimerEvent('pipAutoUpdateCollection', 300000) // 5 min\n];\n\n\nclass TimerService implements ITimerService {\n    private _rootScope: ng.IRootScopeService;\n    private _log: ng.ILogService;\n    private _interval: ng.IIntervalService;        \n    private _started = false;\n    private _events: TimerEvent[] = _.cloneDeep(DefaultEvents);\n\n    public constructor(\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService, \n        $interval: ng.IIntervalService\n    ) {\n        \"ngInject\";\n\n        this._rootScope = $rootScope;\n        this._log = $log;\n        this._interval = $interval;\n    }\n\n    public isStarted(): boolean {\n        return this._started;\n    }\n\n    public addEvent(event: string, timeout: number): void {\n        var existingEvent = _.find(this._events, (e) => e.event == event);\n        if (existingEvent != null) return;\n\n        let newEvent = <TimerEvent> {\n            event: event,\n            timeout: timeout\n        };\n        this._events.push(newEvent);\n\n        if (this._started)\n            this.startEvent(newEvent);\n    }\n\n    public removeEvent(event: string): void {\n        for (let i = this._events.length - 1; i >= 0; i--) {\n            let existingEvent = this._events[i];\n            if (existingEvent.event == event) {\n                this.stopEvent(existingEvent);\n                this._events.splice(i, 1);\n            }\n        }\n    }\n\n    public clearEvents(): void {\n        this.stop();\n        this._events = [];\n    }\n\n    private startEvent(event: TimerEvent): void {\n        event.interval = this._interval(\n            () => { \n                this._log.debug('Generated timer event ' + event.event); \n                this._rootScope.$emit(event.event)\n            },\n            event.timeout\n        )\n    }\n\n    private stopEvent(event: TimerEvent): void {\n        if (event.interval != null) {\n            try {\n                this._interval.cancel(event.interval);\n            } catch (ex) {\n                // Do nothing\n            }\n            event.interval = null;\n        }\n    }\n\n    public start(): void {\n        if (this._started) return;\n\n        _.each(this._events, (event) => {\n            this.startEvent(event);\n        });\n\n        this._started = true;\n    }\n\n    public stop(): void {\n        _.each(this._events, (event) => {\n            this.stopEvent(event);\n        });\n\n        this._started = false;\n    }\n}\n\n\nangular.module('pipTimer', [])\n    .service('pipTimer', TimerService);\n","import './Format';\nimport './TimerService';\nimport './ScrollService';\nimport './Tags';\nimport './Codes';\nimport './SystemInfo';\nimport './PageResetService';\n\nexport * from './IFormat';\nexport * from './ITimerService';\nexport * from './IScrollService';\nexport * from './ITags';\nexport * from './ICodes';\nexport * from './ISystemInfo';\nexport * from './IPageResetService';"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}