{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/index.ts","src/routing/BackDecorator.ts","src/routing/RedirectDecorator.ts","src/routing/RoutingEvents.ts","src/routing/index.ts","src/session/IdentityService.ts","src/session/SessionService.ts","src/session/index.ts","src/transactions/Transaction.ts","src/transactions/TransactionError.ts","src/transactions/TransactionService.ts","src/transactions/TransactionStrings.ts","src/transactions/index.ts","src/translate/TranslateDirective.ts","src/translate/TranslateFilter.ts","src/translate/TranslateService.ts","src/translate/Translation.ts","src/translate/index.ts","src/utilities/Codes.ts","src/utilities/Format.ts","src/utilities/PageResetService.ts","src/utilities/ScrollService.ts","src/utilities/SystemInfo.ts","src/utilities/Tags.ts","src/utilities/TimerService.ts","src/utilities/index.ts"],"names":[],"mappings":"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","file":"pip-webui-services.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿import './translate';\nimport './session';\nimport './transactions';\nimport './routing';\nimport './utilities';\n\nangular.module('pipServices', [\n    'pipTranslate',\n    'pipSession',\n    'pipTransaction',\n    'pipRouting',\n    'pipFormat',\n    'pipTimer',\n    'pipScroll',\n    'pipTags',\n    'pipCodes',\n    'pipSystemInfo',\n    'pipPageReset'\n]);\n\nexport * from './translate';\nexport * from './session';\nexport * from './transactions';\nexport * from './routing';\nexport * from './utilities';\n","export let CurrentState: any;\nexport let PreviousState: any;\n\nfunction captureStateTranslations($rootScope: ng.IRootScopeService) {\n    \"ngInject\";\n\n    $rootScope.$on('$stateChangeSuccess',\n        (event, toState, toParams, fromState, fromParams) => {\n            CurrentState = {\n                name: toState.name, \n                url: toState.url, \n                params: toParams\n            };\n\n            PreviousState = {\n                name: fromState.name, \n                url: fromState.url, \n                params: fromParams\n            };\n        }\n    );\n\n}\n\nfunction decorateBackStateService($delegate: any, $window: ng.IWindowService): any {\n    \"ngInject\";\n\n    $delegate.goBack = goBack;\n    $delegate.goBackAndSelect = goBackAndSelect;\n\n    return $delegate;\n    //////////////////////////////////////////////////\n\n    function goBack(): void {\n        $window.history.back()\n    }\n\n    function goBackAndSelect(params: any): void {\n        // todo: define end fix PreviousState\n        if (PreviousState != null \n            && PreviousState.name != null) {\n\n            let state = _.cloneDeep(PreviousState);\n\n            // Override selected parameters\n            state.params = _.extend(state.params, params);\n\n            $delegate.go(state.name, state.params);\n        } else {\n            $window.history.back();\n        }\n    }\n}\n\nfunction addBackStateDecorator($provide) {\n    $provide.decorator('$state', decorateBackStateService);\n}\n\nangular\n    .module('pipRouting')\n    .config(addBackStateDecorator)\n    .run(captureStateTranslations);\n    ","let RedirectedStates: any = {};\n\nfunction decorateRedirectStateProvider($delegate) {\n    \"ngInject\";\n\n    $delegate.redirect = redirect;\n\n    return $delegate;\n    /////////////////////////////////////////////\n\n    // Specify automatic redirect from one state to another\n    function redirect(fromState, toState) {\n        RedirectedStates[fromState] = toState;  \n        return this;\n    }\n}\n\nfunction addRedirectStateProviderDecorator($provide) {\n    \"ngInject\";\n\n    $provide.decorator('$state', decorateRedirectStateProvider);\n}\n\nfunction decorateRedirectStateService($delegate, $timeout) {\n    \"ngInject\";\n\n    $delegate.redirect = redirect;\n    \n    return $delegate;\n    ////////////////////////////////\n    \n    // Todo: Move this code directly to event handler?\n    // Todo: Nothing calls this code!!\n    function redirect(event, state, params) {\n        let toState = RedirectedStates[state.name];\n        if (_.isFunction(toState)) {\n            toState = toState(state.name, params);\n\n            if (_.isNull(toState))\n                throw new Error('Redirected toState cannot be null');\n        }\n\n        if (!!toState) {\n            $timeout(() => {\n                event.preventDefault();\n                $delegate.transitionTo(toState, params, {location: 'replace'});\n            });\n\n            return true;\n        }\n\n        return false;\n    }\n}\n\nfunction addRedirectStateDecorator($provide) {\n    \"ngInject\";\n\n    $provide.decorator('$state', decorateRedirectStateService);\n}\n\nangular\n    .module('pipRouting')\n    .config(addRedirectStateProviderDecorator)\n    .config(addRedirectStateDecorator);\n    ","export let RoutingVar: string = \"$routing\";\n\nfunction hookRoutingEvents(\n    $rootScope: ng.IRootScopeService,\n    $log: ng.ILogService,\n    $state: ng.ui.IStateService\n) {\n    \"ngInject\";\n\n    $rootScope.$on('$stateChangeStart',\n        (event, toState, toParams, fromState, fromParams) => {\n            $rootScope[RoutingVar] = true;\n        }\n    );\n\n    $rootScope.$on('$stateChangeSuccess',\n        (event, toState, toParams, fromState, fromParams) => {\n            // Unset routing variable to disable page transition\n            $rootScope[RoutingVar] = false;                \n        }\n    );\n\n    // Intercept route error\n    $rootScope.$on('$stateChangeError',\n        (event, toState, toParams, fromState, fromParams, error) => {\n            // Unset routing variable to disable page transition\n            $rootScope[RoutingVar] = false;\n\n            $log.error('Error while switching route to ' + toState.name);\n            $log.error(error);\n        }\n    );\n\n}\n\nangular\n    .module('pipRouting')\n    .run(hookRoutingEvents);\n    ","angular.module('pipRouting', ['ui.router']);\n\nimport './BackDecorator';\nimport './RedirectDecorator';\nimport './RoutingEvents';\n\nexport * from './BackDecorator';\nexport * from './RoutingEvents';\n","export let IdentityRootVar = \"$identity\";\nexport let IdentityChangedEvent = \"pipIdentityChanged\";\n\nexport interface IIdentity {\n    id: string;\n    full_name: string;\n    details: string;\n    email: string;\n    photo_url: string;\n    groups: string[];\n}\n\nexport interface IIdentityService {\n    identity: any;\n}\n\nexport interface IIdentityProvider extends ng.IServiceProvider {\n    setRootVar: boolean;\n    identity: any;\n}\n\n\nclass IdentityService implements IIdentityService {\n    private _identity: any;\n    private _setRootVar: boolean;\n    private _rootScope: ng.IRootScopeService;\n    private _log: ng.ILogService;\n\n    public constructor(\n        setRootVar: boolean,\n        identity: any,\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService\n    ) {\n        this._setRootVar = setRootVar;\n        this._identity = identity;\n        this._rootScope = $rootScope;\n        this._log = $log;\n\n        this.setRootVar();\n    }\n\n    private setRootVar(): void {\n        if (this._setRootVar)\n            this._rootScope[IdentityRootVar] = this._identity;\n    }\n\n    public get identity(): any {\n        return this._identity;\n    }\n\n    public set identity(value: any) {\n        this._identity = value;\n        this.setRootVar();\n        this._rootScope.$emit(IdentityChangedEvent, this._identity);\n\n        let identity: any = value || {};\n        this._log.debug(\"Changed identity to \" + JSON.stringify(identity));\n    }\n}\n\nclass IdentityProvider implements IdentityProvider {\n    private _setRootVar = true;\n    private _identity: any = null;\n    private _service: IdentityService = null;\n\n    public constructor() { }\n\n    public get setRootVar(): boolean {\n        return this._setRootVar;  \n    }\n\n    public set setRootVar(value: boolean) {\n        this._setRootVar = !!value;\n    }\n\n    public get identity(): any {\n        return this._identity;  \n    }\n\n    public set identity(value: any) {\n        this._identity = value;\n    }\n\n    public $get(\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService\n    ): any {\n        \"ngInject\";\n\n        if (this._service == null)\n            this._service = new IdentityService(this._setRootVar, this._identity, $rootScope, $log);\n\n        return this._service;\n    }\n\n}\n\nangular\n    .module('pipSession')\n    .provider('pipIdentity', IdentityProvider);\n","export const SessionRootVar = \"$session\";\nexport const SessionOpenedEvent = \"pipSessionOpened\";\nexport const SessionClosedEvent = \"pipSessionClosed\";\n\nexport interface ISessionService {\n    session: any;\n    isOpened(): boolean;\n\n    open(session: any): void;\n    close(): void;\n}\n\nexport interface ISessionProvider extends ng.IServiceProvider {\n    setRootVar: boolean;\n    session: any;\n}\n\nclass SessionService implements ISessionService {\n    private _setRootVar: boolean;\n    private _session: any;\n    private _rootScope: ng.IRootScopeService;\n    private _log: ng.ILogService;\n\n    public constructor(\n        setRootVar: boolean, \n        session: any, \n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService\n    ) {\n        this._setRootVar = setRootVar;\n        this._session = session;\n        this._rootScope = $rootScope;\n        this._log = $log;\n\n        this.setRootVar();\n    }\n    \n    private setRootVar(): void {\n        if (this._setRootVar)\n            this._rootScope[SessionRootVar] = this._session;\n    }\n\n    public get session(): any {\n        return this._session;\n    }\n\n    public isOpened(): boolean {\n        return this._session != null;\n    }\n\n    public open(session: any, fullReset: boolean = false, partialReset: boolean = false) {\n        if (session == null)\n            throw new Error(\"Session cannot be null\");\n\n        this._session = session;\n        this.setRootVar();\n        this._rootScope.$emit(SessionOpenedEvent, session);\n\n        this._log.debug(\"Opened session \" + session);\n    }\n\n    public close(fullReset: boolean = false, partialReset: boolean = false) {\n        let oldSession = this._session;\n\n        this._session = null;\n        this.setRootVar();\n        this._rootScope.$emit(SessionClosedEvent, oldSession);\n\n        this._log.debug(\"Closed session \" + oldSession);\n    }\n}\n\nclass SessionProvider implements ISessionProvider {\n    private _setRootVar = true;\n    private _session: any = null;\n    private _service: SessionService = null;\n\n    public constructor() { }\n\n    public get setRootVar(): boolean {\n        return this._setRootVar;  \n    }\n\n    public set setRootVar(value: boolean) {\n        this._setRootVar = !!value;\n    }\n\n    public get session(): any {\n        return this._session;  \n    }\n\n    public set session(value: any) {\n        this._session = value;\n    }\n\n    public $get(\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService\n    ): any {\n        \"ngInject\";\n\n        if (this._service == null)\n            this._service = new SessionService(this._setRootVar, this._session, $rootScope, $log);\n\n        return this._service;\n    }\n}\n\nangular\n    .module('pipSession')\n    .provider('pipSession', SessionProvider); \n","angular.module('pipSession', []);\n\nimport './IdentityService';\nimport './SessionService';\n\nexport * from './IdentityService';\nexport * from './SessionService';\n","import { TransactionError } from './TransactionError'\n\nexport class Transaction {\n    private _scope: string = null;\n    private _id: string = null;\n    private _operation: string = null;\n    private _error: TransactionError = new TransactionError();\n    private _progress: number = 0;\n\n    public constructor(scope: string) {\n        this._scope = scope;\n    }\n\n    public get scope(): string {\n        return this._scope;\n    }\n\n    public get id(): string {\n        return this._id;\n    }\n\n    public get operation(): string {\n        return this._operation;\n    }\n\n    public get progress(): number {\n        return this._progress;\n    }\n\n    public get error(): TransactionError {\n        return this._error;\n    }\n\n    public get errorMessage(): string {\n        return this._error.message;\n    }\n\n    public reset(): void {\n        this._id = null;\n        this._operation = null;\n        this._progress = 0;\n        this._error.reset();\n    }\n\n    public busy(): boolean {\n        return this._id != null;\n    }\n\n    public failed(): boolean {\n        return !this._error.empty();\n    }\n\n    public aborted(id: string): boolean {\n        return this._id != id;\n    }\n\n    public begin(operation: string): string {\n        // Transaction is already running\n        if (this._id != null) return null;\n\n        this._id = new Date().getTime().toString();\n        this._operation = operation || 'PROCESSING'\n        this._error.reset();\n\n        return this._id;\n    }\n\n    public update(progress: number): void {\n        this._progress = Math.max(progress, 100);\n    }\n\n    public abort(): void {\n        this._id = null;\n        this._error.reset();\n    }\n\n    public end(error?: any): void {\n        this._error.decode(error);\n        this._id = null;\n    }\n}\n","export class TransactionError {\n    public code: string;\n    public message: string;\n    public details: any;\n    public cause: string;\n    public stack_trace: string;\n\n    public constructor(error?: any) {\n        if (error != null)\n            this.decode(error);\n    }\n\n    public reset(): void {\n        this.code = null;\n        this.message = null;\n        this.details = null;\n        this.cause = null;\n        this.stack_trace = null;\n    }\n\n    public empty(): boolean {\n        return this.message = null && this.code == null;\n    }\n\n    public decode(error: any): void {\n        this.reset();\n\n        if (error == null) return;\n\n        // Process regular messages\n        if (error.message) {\n            this.message = error.message;\n        }\n\n        // Process server application errors\n        if (error.data) {\n            if (error.data.code) { \n                // process server error codes here\n                this.message = this.message || 'ERROR_' + error.data.code;\n                this.code = this.code || error.data.code;\n            }\n\n            if (error.data.message) {\n                this.message = this.message || error.data.message;\n            }\n\n            this.message = this.message || error.data;\n            this.details = this.details || error.data;\n\n            this.cause = error.data.cause;\n            this.stack_trace = error.data.stack_trace;\n            this.details = error.data.details;            \n        }\n\n        // Process standard HTTP errors\n        if (error.statusText) {\n            this.message = this.message || error.statusText;\n        }\n        if (error.status) {\n            this.message = this.message || 'ERROR_' + error.status;\n            this.code = this.code || error.status;\n        }\n        \n        this.message = this.message || error;\n        this.details = this.details || error;\n    }\n}\n","import { Transaction } from './Transaction';\n\nexport interface ITransactionService {\n    create(scope?: string): Transaction;\n    get(scope?: string): Transaction;\n}\n\nclass TransactionService implements ITransactionService {\n    private _transactions: Transaction = <Transaction>{};\n\n    public constructor() {}\n\n    public create(scope?: string): Transaction {\n        let transaction: Transaction = new Transaction(scope);\n        \n        if (scope != null)\n            this._transactions[scope] = transaction;\n\n        return transaction;\n    }\n\n    public get(scope?: string): Transaction {\n        let transaction: Transaction = scope != null ? <Transaction>this._transactions[scope] : null;\n\n        if (transaction == null) {\n            transaction = new Transaction(scope);\n            if (scope != null)\n                this._transactions[scope] = transaction;\n        }\n\n        return transaction;\n    }\n}\n\nangular\n    .module('pipTransaction')\n    .service('pipTransaction', TransactionService);\n","import { ITranslateService } from '../translate/TranslateService';\n\nfunction configureTransactionStrings($injector: ng.auto.IInjectorService) {\n    \"ngInject\";\n\n    let pipTranslate: ITranslateService = $injector.has('pipTranslateProvider') \n        ? <ITranslateService>$injector.get('pipTranslateProvider') : null;\n\n    if (pipTranslate) {\n        pipTranslate.setTranslations('en', {\n            'ENTERING': 'Entering...',\n            'PROCESSING': 'Processing...',\n            'LOADING': 'Loading...',\n            'SAVING': 'Saving...'\n        });\n\n        pipTranslate.setTranslations('ru', {\n            'ENTERING': 'Вход в систему...',\n            'PROCESSING': 'Обрабатывается...',\n            'LOADING': 'Загружается...',\n            'SAVING': 'Сохраняется...'\n        });   \n    }\n    \n}\n\nangular\n    .module('pipTransaction')\n    .config(configureTransactionStrings);\n","angular.module('pipTransaction', []);\n\nimport './TransactionStrings';\nimport './TransactionError';\nimport './Transaction';\nimport './TransactionService';\n\nexport * from './TransactionError';\nexport * from './Transaction';\nexport * from './TransactionService';\n","import { ITranslateService } from '../translate/TranslateService';\n\nfunction translateDirective(pipTranslate): ng.IDirective {\n    \"ngInject\";\n\n    return {\n        restrict: 'EA',\n        scope: {\n            key1: '@pipTranslate',\n            key2: '@key'\n        },\n        link: (scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {\n            let key: string = scope.key1 || scope.key2;\n            let value: string = pipTranslate.translate(key);\n            element.text(value);\n        }\n    };\n}\n\nfunction translateHtmlDirective(pipTranslate: ITranslateService): ng.IDirective {\n    \"ngInject\";\n\n    return {\n        restrict: 'EA',\n        scope: {\n            key1: '@pipTranslateHtml',\n            key2: '@key'\n        },\n        link: (scope: any, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {\n            let key: string = scope.key1 || scope.key2;\n            let value: string = pipTranslate.translate(key);\n            element.html(value);\n        }\n    };\n}\n\nangular\n    .module('pipTranslate')\n    .directive('pipTranslate', translateDirective)\n    .directive('pipTranslateHtml', translateHtmlDirective);\n","import { ITranslateService } from './TranslateService';\n\nfunction translateFilter(pipTranslate: ITranslateService) {\n    \"ngInject\";\n\n    return function (key: string) {\n        return pipTranslate.translate(key) || key;\n    }\n}\n\nfunction optionalTranslateFilter($injector: ng.auto.IInjectorService) {\n    \"ngInject\";\n\n    let pipTranslate: ITranslateService = $injector.has('pipTranslate') \n        ? <ITranslateService>$injector.get('pipTranslate') : null;\n\n    return function (key: string) {\n        return pipTranslate  ? pipTranslate.translate(key) || key : key;\n    }\n}\n\nangular\n    .module('pipTranslate')\n    .filter('translate', translateFilter);\n","﻿import { Translation } from './Translation';\nimport { ResetPageEvent } from '../utilities/PageResetService';\n\nexport let LanguageRootVar = \"$language\";\nexport let LanguageChangedEvent = \"pipLanguageChanged\";    \n\nexport interface ITranslateService {\n    language: string;\n\n    use(language: string): string;\n    setTranslations(language: string, translations: any): void;\n    translations(language: string, translations: any): void;\n\n    translate(key: string): string;\n    translateArray(keys: string[]): string[];\n    translateSet(keys: string[], keyProp: string, valueProp: string): any[];\n    translateObjects(items: any[], keyProp: string, valueProp: string): any[];\n    translateWithPrefix(prefix: string, key: string);\n    translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string);\n    translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string);\n}\n\nexport interface ITranslateProvider extends ITranslateService, ng.IServiceProvider {\n}\n\nclass TranslateService implements ITranslateService {\n    private _translation: Translation;\n    private _setRootVar: boolean;\n    private _persist: boolean;\n    private _rootScope: ng.IRootScopeService;\n    private _log: ng.ILogService;\n    private _window: ng.IWindowService;\n    private _mdDateLocale: angular.material.IDateLocaleProvider;\n\n    public constructor(\n        translation: Translation,\n        setRootVar: boolean,\n        persist: boolean,\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService,\n        $window: ng.IWindowService,\n        $mdDateLocale: angular.material.IDateLocaleProvider,\n    ) {\n        this._setRootVar = setRootVar;\n        this._persist = persist;\n        this._translation = translation;\n        this._rootScope = $rootScope;\n        this._log = $log;\n        this._window = $window;\n        this._mdDateLocale = $mdDateLocale;\n\n        if (this._persist && this._window.localStorage)\n            this._translation.language = this._window.localStorage.getItem('language') || this._translation.language;\n\n        this._log.debug(\"Set language to \" + this._translation.language);\n\n        this.save();\n    }\n\n    private changeLocale(locale: string) {\n        if (!locale) return;\n\n        // var localeDate: moment.MomentLanguageData;\n        var localeDate: any;\n\n        moment.locale(locale);\n        localeDate = moment.localeData();\n\n        this._mdDateLocale.months = angular.isArray(localeDate._months) ? localeDate._months : localeDate._months.format;\n        this._mdDateLocale.shortMonths = angular.isArray(localeDate._monthsShort) ? localeDate._monthsShort : localeDate._monthsShort.format;\n        this._mdDateLocale.days = angular.isArray(localeDate._weekdays) ? localeDate._weekdays : localeDate._weekdays.format;\n        this._mdDateLocale.shortDays = localeDate._weekdaysMin;\n        this._mdDateLocale.firstDayOfWeek = localeDate._week.dow;\n    }\n\n    private save(): void {\n        if (this._setRootVar)\n            this._rootScope[LanguageRootVar] = this._translation.language;\n\n        if (this._persist && this._window.localStorage != null)\n            this._window.localStorage.setItem('language', this._translation.language);\n    }\n\n    public get language(): string {\n        return this._translation.language;\n    }\n\n    public set language(value: string) {\n        if (value != this._translation.language) {\n            this._translation.language = value;\n            \n            this._log.debug(\"Changing language to \" + value);\n\n            this.changeLocale(this._translation.language);\n            this.save();   \n\n            this._rootScope.$emit(LanguageChangedEvent, value);\n            this._rootScope.$emit(ResetPageEvent);\n        }\n    }\n\n    public use(language: string): string {\n        if (language != null)\n            this.language = language;\n        return this.language;\n    }\n\n    public setTranslations(language: string, translations: any): void {\n        return this._translation.setTranslations(language, translations);\n    }\n\n    public translations(language: string, translations: any): void {\n        return this._translation.setTranslations(language, translations);\n    }\n\n    public translate(key: string): string {\n        return this._translation.translate(key);\n    }\n\n    public translateArray(keys: string[]): string[] {\n        return this._translation.translateArray(keys);\n    }\n    \n    public translateSet(keys: string[], keyProp: string, valueProp: string): any[] {\n        return this._translation.translateSet(keys, keyProp, valueProp);\n    }\n\n    public translateObjects(items: any[], keyProp: string, valueProp: string): any[] {\n        return this._translation.translateObjects(items, keyProp, valueProp);\n    }\n\n    public translateWithPrefix(prefix: string, key: string) {\n        return this._translation.translateWithPrefix(prefix, key);\n    }\n\n    public translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string) {\n        return this._translation.translateSetWithPrefix(prefix, keys, keyProp, valueProp);\n    }\n\n    public translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string) {\n        return this._translation.translateSetWithPrefix2(prefix, keys, keyProp, valueProp);\n    }\n}\n\nclass TranslateProvider extends Translation implements ITranslateProvider {\n    private _translation: Translation;\n    private _setRootVar: boolean = true;\n    private _persist: boolean = true;\n    private _service: TranslateService;\n    \n    public constructor() {\n        super();\n    }\n\n    public get setRootVar(): boolean {\n        return this._setRootVar;  \n    }\n\n    public set setRootVar(value: boolean) {\n        this._setRootVar = !!value;\n    }\n\n    public get persist(): boolean {\n        return this._persist;  \n    }\n\n    public set persist(value: boolean) {\n        this._persist = !!value;\n    }\n\n    public $get(\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService, \n        $window: ng.IWindowService,\n        $mdDateLocale: angular.material.IDateLocaleProvider\n    ): any {\n        \"ngInject\";\n\n        if (this._service == null) \n            this._service = new TranslateService(this, this._setRootVar, this._persist, $rootScope, $log, $window, $mdDateLocale);\n\n        return this._service;\n    }\n}\n\nfunction initTranslate(pipTranslate: ITranslateService) {\n    pipTranslate.language;\n}\n\nangular\n    .module('pipTranslate')\n    .provider('pipTranslate', TranslateProvider)\n    .run(initTranslate);\n","export class Translation {\n    protected _language: string = 'en';\n    protected _translations = {\n        en: {\n            'en': 'English',\n            'ru': 'Russian',\n            'es': 'Spanish',\n            'pt': 'Portuguese',\n            'de': 'German',\n            'fr': 'French'\n        },\n        ru: {\n            'en': 'Английский',\n            'ru': 'Русский',\n            'es': 'Испанский',\n            'pt': 'Португальский',\n            'de': 'Немецкий',\n            'fr': 'Французский'\n        }\n    };\n\n    public constructor() {}\n\n    public get language(): string { return this._language; }\n    public set language(value: string) { this._language = value; }\n\n    public use(language: string): string {\n        if (language != null)\n            this._language = language;\n        return this._language;\n    }\n\n    // Set translation strings for specific language\n    public setTranslations(language: string, translations: any): void {\n        let map = this._translations[language] || {};\n        this._translations[language] = _.extend(map, translations);\n    }\n\n    // Yet another method to set translation strings for specific language\n    public translations(language: string, translations: any): void {\n        this.setTranslations(language, translations);\n    }\n\n    // Translate a string by key using set language\n    public translate(key: string): string {\n        if (_.isNull(key) || _.isUndefined(key)) return '';\n\n        let translations = this._translations[this._language] || {};\n        return translations[key] || key;\n    }\n\n    // Translate an array of strings\n    public translateArray(keys: string[]): string[] {\n        if (_.isNull(keys) || keys.length == 0) return [];\n\n        let values: string[] = [];\n        let translations = this._translations[this._language] || {};\n\n        _.each(keys, function (k: string) {\n            let key = k || '';\n            values.push(translations[key] || key);\n        });\n\n        return values;\n    }\n\n    // Translate an array of strings into array of objects (set)\n    public translateSet(keys: string[], keyProp: string, valueProp: string): any[] {\n        if (_.isNull(keys) || keys.length == 0) return [];\n\n        keyProp = keyProp || 'id';\n        valueProp = valueProp || 'name';\n\n        let values: any[] = [];\n        let translations = this._translations[this._language] || {};\n\n        _.each(keys, function (key: string) {\n            let value: any = {};\n            key = key || '';\n\n            value[keyProp] = key;\n            value[valueProp] = translations[key] || key;\n\n            values.push(value);\n        });\n\n        return values;\n    }\n\n    // Translate a collection of objects\n    public translateObjects(items: any[], keyProp: string, valueProp: string): any[] {\n        if (_.isNull(items) || items.length == 0) return [];\n\n        keyProp = keyProp || 'name';\n        valueProp = valueProp || 'nameLocal';\n\n        let translations = this._translations[this._language] || {};\n\n        _.each(items, function (item: any) {\n            let key = item[keyProp] || '';\n\n            item[valueProp] = translations[key] || key;\n        });\n\n        return items;\n    }\n\n    // Translate a string by key  with prefix using set language todo\n    public translateWithPrefix(prefix: string, key: string) {\n        prefix = prefix ? prefix + '_' : '';\n        key = (prefix + key).replace(/ /g, '_').toUpperCase();\n        if (key == null) return '';\n        let translations = this._translations[this._language] || {};\n        return translations[key] || key;\n    };\n\n    public translateSetWithPrefix(prefix: string, keys: string[], keyProp: string, valueProp: string) {\n        if (_.isNull(keys) || keys.length == 0) return [];\n\n        prefix = prefix ? prefix.replace(/ /g, '_').toUpperCase() : '';\n        keyProp = keyProp || 'id';\n        valueProp = valueProp || 'name';\n\n        let values = [];\n        let translations = this._translations[this._language] || {};\n\n        _.each(keys, function (key: string) {\n            let value: any = {}; \n            key = key || '';\n\n            value[keyProp] = key;\n            value[valueProp] = translations[prefix + '_' + key] || key;\n\n            values.push(value);\n        });\n\n        return values;\n    }\n\n    // Translate an array of strings, apply uppercase and replace ' ' => '_'\n    public translateSetWithPrefix2(prefix: string, keys: string[], keyProp: string, valueProp: string) {\n        if (_.isNull(keys) || keys.length == 0) return [];\n\n        keyProp = keyProp || 'id';\n        valueProp = valueProp || 'name';\n        prefix = prefix ? prefix.replace(/ /g, '_').toUpperCase() + '_': '';\n\n        let values = [];\n        let translations = this._translations[this._language] || {};\n\n        _.each(keys, function (key: string) {\n            let value: any = {};\n            key = key || '';\n\n            value[keyProp] = key;\n            value[valueProp] = translations[prefix + key.replace(/ /g, '_').toUpperCase()]\n                || (prefix + key.replace(/ /g, '_').toUpperCase());\n\n            values.push(value);\n        });\n\n        return values;\n    }\n}\n","angular.module('pipTranslate', []);\n\nimport './Translation';\nimport './TranslateService';\nimport './TranslateFilter';\nimport './TranslateDirective';\n\nexport * from './Translation';\nexport * from './TranslateService';\n","export interface ICodes {\n    // Simple version of string hashcode\n    hash(value: string): number;\n    // Generates random big number for verification codes\n    verification(): string;\n}\n\n\nclass Codes implements ICodes {\n    // Simple version of string hashcode\n    public hash(value: string): number {\n        if (value == null) return 0;\n        \n        let result: number = 0;\n        for (let i = 0; i < value.length; i++)\n            result += value.charCodeAt(i);\n\n        return result;\n    }\n\n    // Generates random big number for verification codes\n    public verification(): string {\n        return Math.random().toString(36).substr(2, 10).toUpperCase(); // remove `0.`\n    }\n}\n\nangular\n    .module('pipCodes', [])\n    .service('pipCodes', Codes);\n","export interface IFormat {\n    // Creates a sample line from a text\n    sample(value: string, maxLength: number): string;\n\n    sprintf(message: string, ...args: any[]): string;\n}\n\n\nclass Format implements IFormat {\n    // Cached for parsed formats\n    private cache = {};\n\n    // Creates a sample line from a text\n    public sample(value: string, maxLength: number): string {\n        if (!value || value == '') {\n            return '';\n        }\n\n        var length: number = value.indexOf('\\n');\n        length = length >= 0 ? length : value.length;\n        length = length < maxLength ? value.length : maxLength;\n\n        return value.substring(0, length);\n    }\n\n    private strRepeat(str: string, qty: number): string {\n        if (qty < 1) { \n            return '';\n        }\n        var result: string = '';\n        while (qty > 0) {\n            if (qty & 1) result += str;\n            qty >>= 1, str += str;\n        }\n        return result;\n    }\n\n    private getType(variable): string {\n        return toString.call(variable).slice(8, -1).toLowerCase();\n    }\n\n    private parseFormat(fmt: string): any {\n        let _fmt: string = fmt, match = [], parse_tree = [], arg_names: number = 0;\n        while (_fmt) {\n            if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n                parse_tree.push(match[0]);\n            }\n            else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n                parse_tree.push('%');\n            }\n            else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1;\n                    let field_list: string[] = [], replacement_field: string = match[2], field_match: string[] = [];\n                    if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1]);\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1]);\n                            }\n                            else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1]);\n                            }\n                            else {\n                                throw new Error('Unknown error');\n                            }\n                        }\n                    }\n                    else {\n                        throw new Error('Unknown error');\n                    }\n                    match[2] = field_list;\n                }\n                else {\n                    arg_names |= 2;\n                }\n                if (arg_names === 3) {\n                    throw new Error('Mixing positional and named placeholders is not (yet) supported');\n                }\n                parse_tree.push(match);\n            }\n            else {\n                throw new Error('Unknown error');\n            }\n            _fmt = _fmt.substring(match[0].length);\n        }\n        return parse_tree;\n    }\n\n    private format(parse_tree: any, argv: any): string {\n        let cursor: number = 0; \n        let tree_length: number = parse_tree.length; \n        let output = [];\n\n        for (let i = 0; i < tree_length; i++) {\n            let node_type = this.getType(parse_tree[i]);\n            if (node_type === 'string') {\n                output.push(parse_tree[i]);\n            }\n            else if (node_type === 'array') {\n                let match = parse_tree[i]; // convenience purposes only\n                let arg: any;\n                if (match[2]) { // keyword argument\n                    arg = argv[cursor];\n                    for (let k = 0; k < match[2].length; k++) {\n                        if (!arg.hasOwnProperty(match[2][k])) {\n                            throw new Error(this.sprintf('Property \"%s\" does not exist', match[2][k]));\n                        }\n                        arg = arg[match[2][k]];\n                    }\n                } else if (match[1]) { // positional argument (explicit)\n                    arg = argv[match[1]];\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++];\n                }\n\n                if (/[^s]/.test(match[8]) && (this.getType(arg) != 'number')) {\n                    throw new Error(this.sprintf('Expecting number but found %s', this.getType(arg)));\n                }\n                switch (match[8]) {\n                    case 'b': arg = arg.toString(2); break;\n                    case 'c': arg = String.fromCharCode(arg); break;\n                    case 'd': arg = parseInt(arg, 10); break;\n                    case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n                    case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n                    case 'o': arg = arg.toString(8); break;\n                    case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n                    case 'u': arg = Math.abs(arg); break;\n                    case 'x': arg = arg.toString(16); break;\n                    case 'X': arg = arg.toString(16).toUpperCase(); break;\n                }\n                arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);                \n                let pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n                let pad_length = match[6] - String(arg).length;\n                let pad = match[6] ? this.strRepeat(pad_character, pad_length) : '';\n                output.push(match[5] ? arg + pad : pad + arg);\n            }\n        }\n        return output.join('');\n    }\n    \n    public sprintf(message: string, ...args: any[]): string {\n        if (!this.cache.hasOwnProperty(message))\n            this.cache[message] = this.parseFormat(message);\n\n        return this.format(this.cache[message], args);\n    }\n}\n\n\nangular\n    .module('pipFormat', [])\n    .service('pipFormat', Format);\n","export let ResetPageEvent: string = \"pipResetPage\";\nexport let ResetAreaEvent: string = \"pipResetArea\";\n\nexport let ResetRootVar: string = \"$reset\";\nexport let ResetAreaRootVar: string = \"$resetArea\";\n\nexport interface IPageResetService {\n    reset(): void;\n    resetArea(area: string): void;\n}\n\n\nclass PageResetService implements IPageResetService {\n    private _rootScope: ng.IRootScopeService;\n    private _log: ng.ILogService;\n    private _timeout: ng.ITimeoutService;\n\n    public constructor(\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService, \n        $timeout: ng.ITimeoutService\n    ) {\n        this._rootScope = $rootScope;\n        this._log = $log;\n        this._timeout = $timeout;\n\n        $rootScope[ResetRootVar] = false;\n        $rootScope[ResetAreaRootVar] = null;\n    }\n\n    public reset(): void {\n        this._log.debug(\"Resetting the entire page\");\n        this.performReset(null);\n    }\n\n    public resetArea(area: string): void {\n        this._log.debug(\"Resetting the area \" + area);\n        this.performReset(area);\n    }\n\n    private performReset(area?: string): void {\n        this._rootScope[ResetRootVar] = area == null;\n        this._rootScope[ResetAreaRootVar] = area;\n\n        this._timeout(() => {\n            this._rootScope[ResetRootVar] = false;\n            this._rootScope[ResetAreaRootVar] = null;\n        }, 0);\n    }\n}\n\n\nfunction hookResetEvents(\n    $rootScope: ng.IRootScopeService, \n    pipPageReset: IPageResetService\n) {\n    $rootScope.$on(ResetPageEvent, () => { pipPageReset.reset(); });\n    $rootScope.$on(ResetAreaEvent, (event, area) => { pipPageReset.resetArea(area); });\n}\n\n\nangular.module('pipPageReset', [])\n    .service('pipPageReset', PageResetService)\n    .run(hookResetEvents);\n","export interface IScrollService {\n    scrollTo(parentElement, childElement, animationDuration): void;\n}\n\nclass ScrollService implements IScrollService {\n\n    public scrollTo(parentElement, childElement, animationDuration): void {\n        if (!parentElement || !childElement) return;\n        if (animationDuration == undefined) animationDuration = 300;\n\n        setTimeout(function () {\n            if (!$(childElement).position()) return;\n            var modDiff= Math.abs($(parentElement).scrollTop() - $(childElement).position().top);\n            if (modDiff < 20) return;\n            var scrollTo = $(parentElement).scrollTop() + ($(childElement).position().top - 20);\n            if (animationDuration > 0)\n                $(parentElement).animate({\n                    scrollTop: scrollTo + 'px'\n                }, animationDuration);\n        }, 100);\n    }\n\n}\n\n\nangular\n    .module('pipScroll', [])\n    .service('pipScroll', ScrollService);\n","export interface ISystemInfo {\n    browserName: string;\n    browserVersion: string;\n    platform: string;\n    os: string;\n\n    isDesktop(): boolean;\n    isMobile(): boolean;\n    isCordova(): boolean;\n    isSupported(supported?: any): boolean;\n}\n\n\nclass SystemInfo implements ISystemInfo {\n    private _window: ng.IWindowService;\n\n    public constructor($window: ng.IWindowService) {\n        \"ngInject\";\n\n        this._window = $window;\n    }\n\n    // todo add support for iPhone\n    public get browserName(): string {\n        let ua = this._window.navigator.userAgent;\n\n        if (ua.search(/Edge/) > -1) return \"edge\";\n        if (ua.search(/MSIE/) > -1) return \"ie\";\n        if (ua.search(/Trident/) > -1) return \"ie\";\n        if (ua.search(/Firefox/) > -1) return \"firefox\";\n        if (ua.search(/Opera/) > -1) return \"opera\";\n        if (ua.search(/OPR/) > -1) return \"opera\";\n        if (ua.search(/YaBrowser/) > -1) return \"yabrowser\";\n        if (ua.search(/Chrome/) > -1) return \"chrome\";\n        if (ua.search(/Safari/) > -1) return \"safari\";\n        if (ua.search(/Maxthon/) > -1) return \"maxthon\";\n        \n        return \"unknown\";\n    }\n\n    public get browserVersion(): string {\n        let version;\n        let ua = this._window.navigator.userAgent;\n        let browser = this.browserName;\n\n        switch (browser) {\n            case \"edge\":\n                version = (ua.split(\"Edge\")[1]).split(\"/\")[1];\n                break;\n            case \"ie\":\n                version = (ua.split(\"MSIE \")[1]).split(\";\")[0];\n                break;\n            case \"ie11\":\n                browser = \"ie\";\n                version = (ua.split(\"; rv:\")[1]).split(\")\")[0];\n                break;\n            case \"firefox\":\n                version = ua.split(\"Firefox/\")[1];\n                break;\n            case \"opera\":\n                version = ua.split(\"Version/\")[1];\n                break;\n            case \"operaWebkit\":\n                version = ua.split(\"OPR/\")[1];\n                break;\n            case \"yabrowser\":\n                version = (ua.split(\"YaBrowser/\")[1]).split(\" \")[0];\n                break;\n            case \"chrome\":\n                version = (ua.split(\"Chrome/\")[1]).split(\" \")[0];\n                break;\n            case \"safari\":\n                version = (ua.split(\"Version/\")[1]).split(\" \")[0];\n                break;\n            case \"maxthon\":\n                version = ua.split(\"Maxthon/\")[1];\n                break;\n        }\n\n        return version;\n    }\n    \n    public get platform(): string {\n        let ua = this._window.navigator.userAgent;\n\n        if (/iphone|ipad|ipod|android|blackberry|mini|windows\\sce|palm/i.test(ua.toLowerCase())) \n            return 'mobile';\n\n        return 'desktop';\n    }\n\n    public get os(): string {\n        let ua = this._window.navigator.userAgent;\n\n        try {\n            let osAll = (/(windows|mac|android|linux|blackberry|sunos|solaris|iphone)/.exec(ua.toLowerCase()) || [ua])[0].replace('sunos', 'solaris');\n            let osAndroid = (/(android)/.exec(ua.toLowerCase()) || '');\n            return osAndroid && (osAndroid == 'android' || (osAndroid[0] == 'android')) ? 'android' : osAll;\n        } catch (err) {\n            return 'unknown'\n        }\n    }\n\n    public isDesktop(): boolean {\n        return this.platform == 'desktop';\n    }\n\n    public isMobile(): boolean {\n        return this.platform == 'mobile';\n    }\n\n    // Todo: complete implementation\n    public isCordova(): boolean {\n        return false;\n    }\n\n    // Todo: Move to errors\n    public isSupported(supported?: any): boolean {\n        if (!supported) \n            supported = {\n                edge: 11,\n                ie: 11,\n                firefox: 43, //4, for testing\n                opera: 35,\n                chrome: 47\n            };\n\n        let browser = this.browserName;\n        let version = this.browserVersion;\n        version = version.split(\".\")[0]\n\n        if (browser && supported[browser] && version >= supported[browser]) \n            return true;\n\n        return true;\n    }\n}\n\n\nangular\n    .module('pipSystemInfo', [])\n    .service('pipSystemInfo', SystemInfo);\n","'use strict';\n\nexport interface ITags {\n    normalizeOne(tag: string): string;\n    compressOne(tag: string): string;\n    equal(tag1: string, tag2: string): boolean;\n    normalizeAll(tags: any): string[];\n    compressAll(tags: any): string[];\n    extract(entity: any, searchFields?: string[]): string[];\n}\n\n\nclass Tags implements ITags {\n\n    public normalizeOne(tag: string): string {\n        return tag \n            ? _.trim(tag.replace(/(_|#)+/g, ' '))\n            : null;\n    }\n\n    public compressOne(tag: string): string {\n        return tag\n            ? tag.replace(/( |_|#)/g, '').toLowerCase()\n            : null;\n    }\n\n    public equal(tag1: string, tag2: string): boolean {\n        if (tag1 == null && tag2 == null)\n            return true;\n        if (tag1 == null || tag2 == null)\n            return false;\n        return this.compressOne(tag1) == this.compressOne(tag2);\n    }\n\n    public normalizeAll(tags: any): string[] {\n        if (_.isString(tags))\n            tags = tags.split(/( |,|;)+/);\n\n        tags = _.map(tags, (tag: string) => this.normalizeOne(tag));\n\n        return tags;\n    }\n\n    public compressAll(tags: any): string[] {\n        if (_.isString(tags))\n            tags = tags.split(/( |,|;)+/);\n\n        tags = _.map(tags, (tag: string) => this.compressOne(tag));\n\n        return tags;\n    }\n\n    public extract(entity: any, searchFields?: string[]): string[] {\n        let tags = this.normalizeAll(entity.tags);\n\n        _.each(searchFields, (field) => {\n            let text = entity[field] || '';\n\n            if (text != '') {\n                let hashTags = text.match(/#\\w+/g);\n                tags = tags.concat(this.normalizeAll(hashTags));\n            }\n        });\n\n        return _.uniq(tags);\n    }\n}\n\n\nangular\n    .module('pipTags', [])\n    .service('pipTags', Tags);\n","export interface ITimerService {\n    isStarted(): boolean;\n\n    addEvent(event: string, timeout: number): void;\n    removeEvent(event: string): void;\n    clearEvents(): void;\n\n    start(): void;\n    stop(): void;\n}\n\n\nclass TimerEvent {\n    public event: string;\n    public timeout: number;\n    public interval: any;\n\n    public constructor(event: string, timeout: number) {\n        this.event = event;\n        this.timeout = timeout;\n    }\n}\n\n\nlet DefaultEvents: TimerEvent[] = [\n    new TimerEvent('pipAutoPullChanges', 60000), // 1 min\n    new TimerEvent('pipAutoUpdatePage', 15000), // 15 sec\n    new TimerEvent('pipAutoUpdateCollection', 300000) // 5 min\n];\n\n\nclass TimerService implements ITimerService {\n    private _rootScope: ng.IRootScopeService;\n    private _log: ng.ILogService;\n    private _interval: ng.IIntervalService;        \n    private _started = false;\n    private _events: TimerEvent[] = _.cloneDeep(DefaultEvents);\n\n    public constructor(\n        $rootScope: ng.IRootScopeService,\n        $log: ng.ILogService, \n        $interval: ng.IIntervalService\n    ) {\n        \"ngInject\";\n\n        this._rootScope = $rootScope;\n        this._log = $log;\n        this._interval = $interval;\n    }\n\n    public isStarted(): boolean {\n        return this._started;\n    }\n\n    public addEvent(event: string, timeout: number): void {\n        var existingEvent = _.find(this._events, (e) => e.event == event);\n        if (existingEvent != null) return;\n\n        let newEvent = <TimerEvent> {\n            event: event,\n            timeout: timeout\n        };\n        this._events.push(newEvent);\n\n        if (this._started)\n            this.startEvent(newEvent);\n    }\n\n    public removeEvent(event: string): void {\n        for (let i = this._events.length - 1; i >= 0; i--) {\n            let existingEvent = this._events[i];\n            if (existingEvent.event == event) {\n                this.stopEvent(existingEvent);\n                this._events.splice(i, 1);\n            }\n        }\n    }\n\n    public clearEvents(): void {\n        this.stop();\n        this._events = [];\n    }\n\n    private startEvent(event: TimerEvent): void {\n        event.interval = this._interval(\n            () => { \n                this._log.debug('Generated timer event ' + event.event); \n                this._rootScope.$emit(event.event)\n            },\n            event.timeout\n        )\n    }\n\n    private stopEvent(event: TimerEvent): void {\n        if (event.interval != null) {\n            try {\n                this._interval.cancel(event.interval);\n            } catch (ex) {\n                // Do nothing\n            }\n            event.interval = null;\n        }\n    }\n\n    public start(): void {\n        if (this._started) return;\n\n        _.each(this._events, (event) => {\n            this.startEvent(event);\n        });\n\n        this._started = true;\n    }\n\n    public stop(): void {\n        _.each(this._events, (event) => {\n            this.stopEvent(event);\n        });\n\n        this._started = false;\n    }\n}\n\n\nangular.module('pipTimer', [])\n    .service('pipTimer', TimerService);\n","import './Format';\nimport './TimerService';\nimport './ScrollService';\nimport './Tags';\nimport './Codes';\nimport './SystemInfo';\nimport './PageResetService';\n\nexport * from './Format';\nexport * from './TimerService';\nexport * from './ScrollService';\nexport * from './Tags';\nexport * from './Codes';\nexport * from './SystemInfo';\nexport * from './PageResetService';"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvaW5kZXgudHMiLCJzcmMvcm91dGluZy9CYWNrRGVjb3JhdG9yLnRzIiwic3JjL3JvdXRpbmcvUmVkaXJlY3REZWNvcmF0b3IudHMiLCJzcmMvcm91dGluZy9Sb3V0aW5nRXZlbnRzLnRzIiwic3JjL3JvdXRpbmcvaW5kZXgudHMiLCJzcmMvc2Vzc2lvbi9JZGVudGl0eVNlcnZpY2UudHMiLCJzcmMvc2Vzc2lvbi9TZXNzaW9uU2VydmljZS50cyIsInNyYy9zZXNzaW9uL2luZGV4LnRzIiwic3JjL3RyYW5zYWN0aW9ucy9UcmFuc2FjdGlvbi50cyIsInNyYy90cmFuc2FjdGlvbnMvVHJhbnNhY3Rpb25FcnJvci50cyIsInNyYy90cmFuc2FjdGlvbnMvVHJhbnNhY3Rpb25TZXJ2aWNlLnRzIiwic3JjL3RyYW5zYWN0aW9ucy9UcmFuc2FjdGlvblN0cmluZ3MudHMiLCJzcmMvdHJhbnNhY3Rpb25zL2luZGV4LnRzIiwic3JjL3RyYW5zbGF0ZS9UcmFuc2xhdGVEaXJlY3RpdmUudHMiLCJzcmMvdHJhbnNsYXRlL1RyYW5zbGF0ZUZpbHRlci50cyIsInNyYy90cmFuc2xhdGUvVHJhbnNsYXRlU2VydmljZS50cyIsInNyYy90cmFuc2xhdGUvVHJhbnNsYXRpb24udHMiLCJzcmMvdHJhbnNsYXRlL2luZGV4LnRzIiwic3JjL3V0aWxpdGllcy9Db2Rlcy50cyIsInNyYy91dGlsaXRpZXMvRm9ybWF0LnRzIiwic3JjL3V0aWxpdGllcy9QYWdlUmVzZXRTZXJ2aWNlLnRzIiwic3JjL3V0aWxpdGllcy9TY3JvbGxTZXJ2aWNlLnRzIiwic3JjL3V0aWxpdGllcy9TeXN0ZW1JbmZvLnRzIiwic3JjL3V0aWxpdGllcy9UYWdzLnRzIiwic3JjL3V0aWxpdGllcy9UaW1lclNlcnZpY2UudHMiLCJzcmMvdXRpbGl0aWVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7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Qiw4QkFBNEI7QUFRNUIsd0NBQW1DIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIu+7v2ltcG9ydCAnLi90cmFuc2xhdGUnO1xuaW1wb3J0ICcuL3Nlc3Npb24nO1xuaW1wb3J0ICcuL3RyYW5zYWN0aW9ucyc7XG5pbXBvcnQgJy4vcm91dGluZyc7XG5pbXBvcnQgJy4vdXRpbGl0aWVzJztcblxuYW5ndWxhci5tb2R1bGUoJ3BpcFNlcnZpY2VzJywgW1xuICAgICdwaXBUcmFuc2xhdGUnLFxuICAgICdwaXBTZXNzaW9uJyxcbiAgICAncGlwVHJhbnNhY3Rpb24nLFxuICAgICdwaXBSb3V0aW5nJyxcbiAgICAncGlwRm9ybWF0JyxcbiAgICAncGlwVGltZXInLFxuICAgICdwaXBTY3JvbGwnLFxuICAgICdwaXBUYWdzJyxcbiAgICAncGlwQ29kZXMnLFxuICAgICdwaXBTeXN0ZW1JbmZvJyxcbiAgICAncGlwUGFnZVJlc2V0J1xuXSk7XG5cbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNsYXRlJztcbmV4cG9ydCAqIGZyb20gJy4vc2Vzc2lvbic7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zYWN0aW9ucyc7XG5leHBvcnQgKiBmcm9tICcuL3JvdXRpbmcnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlsaXRpZXMnO1xuIiwiZXhwb3J0IGxldCBDdXJyZW50U3RhdGU6IGFueTtcbmV4cG9ydCBsZXQgUHJldmlvdXNTdGF0ZTogYW55O1xuXG5mdW5jdGlvbiBjYXB0dXJlU3RhdGVUcmFuc2xhdGlvbnMoJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UpIHtcbiAgICBcIm5nSW5qZWN0XCI7XG5cbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsXG4gICAgICAgIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykgPT4ge1xuICAgICAgICAgICAgQ3VycmVudFN0YXRlID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IHRvU3RhdGUubmFtZSwgXG4gICAgICAgICAgICAgICAgdXJsOiB0b1N0YXRlLnVybCwgXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB0b1BhcmFtc1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgUHJldmlvdXNTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBmcm9tU3RhdGUubmFtZSwgXG4gICAgICAgICAgICAgICAgdXJsOiBmcm9tU3RhdGUudXJsLCBcbiAgICAgICAgICAgICAgICBwYXJhbXM6IGZyb21QYXJhbXNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICApO1xuXG59XG5cbmZ1bmN0aW9uIGRlY29yYXRlQmFja1N0YXRlU2VydmljZSgkZGVsZWdhdGU6IGFueSwgJHdpbmRvdzogbmcuSVdpbmRvd1NlcnZpY2UpOiBhbnkge1xuICAgIFwibmdJbmplY3RcIjtcblxuICAgICRkZWxlZ2F0ZS5nb0JhY2sgPSBnb0JhY2s7XG4gICAgJGRlbGVnYXRlLmdvQmFja0FuZFNlbGVjdCA9IGdvQmFja0FuZFNlbGVjdDtcblxuICAgIHJldHVybiAkZGVsZWdhdGU7XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIGZ1bmN0aW9uIGdvQmFjaygpOiB2b2lkIHtcbiAgICAgICAgJHdpbmRvdy5oaXN0b3J5LmJhY2soKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdvQmFja0FuZFNlbGVjdChwYXJhbXM6IGFueSk6IHZvaWQge1xuICAgICAgICAvLyB0b2RvOiBkZWZpbmUgZW5kIGZpeCBQcmV2aW91c1N0YXRlXG4gICAgICAgIGlmIChQcmV2aW91c1N0YXRlICE9IG51bGwgXG4gICAgICAgICAgICAmJiBQcmV2aW91c1N0YXRlLm5hbWUgIT0gbnVsbCkge1xuXG4gICAgICAgICAgICBsZXQgc3RhdGUgPSBfLmNsb25lRGVlcChQcmV2aW91c1N0YXRlKTtcblxuICAgICAgICAgICAgLy8gT3ZlcnJpZGUgc2VsZWN0ZWQgcGFyYW1ldGVyc1xuICAgICAgICAgICAgc3RhdGUucGFyYW1zID0gXy5leHRlbmQoc3RhdGUucGFyYW1zLCBwYXJhbXMpO1xuXG4gICAgICAgICAgICAkZGVsZWdhdGUuZ28oc3RhdGUubmFtZSwgc3RhdGUucGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICR3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZEJhY2tTdGF0ZURlY29yYXRvcigkcHJvdmlkZSkge1xuICAgICRwcm92aWRlLmRlY29yYXRvcignJHN0YXRlJywgZGVjb3JhdGVCYWNrU3RhdGVTZXJ2aWNlKTtcbn1cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcFJvdXRpbmcnKVxuICAgIC5jb25maWcoYWRkQmFja1N0YXRlRGVjb3JhdG9yKVxuICAgIC5ydW4oY2FwdHVyZVN0YXRlVHJhbnNsYXRpb25zKTtcbiAgICAiLCJsZXQgUmVkaXJlY3RlZFN0YXRlczogYW55ID0ge307XG5cbmZ1bmN0aW9uIGRlY29yYXRlUmVkaXJlY3RTdGF0ZVByb3ZpZGVyKCRkZWxlZ2F0ZSkge1xuICAgIFwibmdJbmplY3RcIjtcblxuICAgICRkZWxlZ2F0ZS5yZWRpcmVjdCA9IHJlZGlyZWN0O1xuXG4gICAgcmV0dXJuICRkZWxlZ2F0ZTtcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIFNwZWNpZnkgYXV0b21hdGljIHJlZGlyZWN0IGZyb20gb25lIHN0YXRlIHRvIGFub3RoZXJcbiAgICBmdW5jdGlvbiByZWRpcmVjdChmcm9tU3RhdGUsIHRvU3RhdGUpIHtcbiAgICAgICAgUmVkaXJlY3RlZFN0YXRlc1tmcm9tU3RhdGVdID0gdG9TdGF0ZTsgIFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZFJlZGlyZWN0U3RhdGVQcm92aWRlckRlY29yYXRvcigkcHJvdmlkZSkge1xuICAgIFwibmdJbmplY3RcIjtcblxuICAgICRwcm92aWRlLmRlY29yYXRvcignJHN0YXRlJywgZGVjb3JhdGVSZWRpcmVjdFN0YXRlUHJvdmlkZXIpO1xufVxuXG5mdW5jdGlvbiBkZWNvcmF0ZVJlZGlyZWN0U3RhdGVTZXJ2aWNlKCRkZWxlZ2F0ZSwgJHRpbWVvdXQpIHtcbiAgICBcIm5nSW5qZWN0XCI7XG5cbiAgICAkZGVsZWdhdGUucmVkaXJlY3QgPSByZWRpcmVjdDtcbiAgICBcbiAgICByZXR1cm4gJGRlbGVnYXRlO1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgXG4gICAgLy8gVG9kbzogTW92ZSB0aGlzIGNvZGUgZGlyZWN0bHkgdG8gZXZlbnQgaGFuZGxlcj9cbiAgICAvLyBUb2RvOiBOb3RoaW5nIGNhbGxzIHRoaXMgY29kZSEhXG4gICAgZnVuY3Rpb24gcmVkaXJlY3QoZXZlbnQsIHN0YXRlLCBwYXJhbXMpIHtcbiAgICAgICAgbGV0IHRvU3RhdGUgPSBSZWRpcmVjdGVkU3RhdGVzW3N0YXRlLm5hbWVdO1xuICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKHRvU3RhdGUpKSB7XG4gICAgICAgICAgICB0b1N0YXRlID0gdG9TdGF0ZShzdGF0ZS5uYW1lLCBwYXJhbXMpO1xuXG4gICAgICAgICAgICBpZiAoXy5pc051bGwodG9TdGF0ZSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWRpcmVjdGVkIHRvU3RhdGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghIXRvU3RhdGUpIHtcbiAgICAgICAgICAgICR0aW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICRkZWxlZ2F0ZS50cmFuc2l0aW9uVG8odG9TdGF0ZSwgcGFyYW1zLCB7bG9jYXRpb246ICdyZXBsYWNlJ30pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkUmVkaXJlY3RTdGF0ZURlY29yYXRvcigkcHJvdmlkZSkge1xuICAgIFwibmdJbmplY3RcIjtcblxuICAgICRwcm92aWRlLmRlY29yYXRvcignJHN0YXRlJywgZGVjb3JhdGVSZWRpcmVjdFN0YXRlU2VydmljZSk7XG59XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaXBSb3V0aW5nJylcbiAgICAuY29uZmlnKGFkZFJlZGlyZWN0U3RhdGVQcm92aWRlckRlY29yYXRvcilcbiAgICAuY29uZmlnKGFkZFJlZGlyZWN0U3RhdGVEZWNvcmF0b3IpO1xuICAgICIsImV4cG9ydCBsZXQgUm91dGluZ1Zhcjogc3RyaW5nID0gXCIkcm91dGluZ1wiO1xuXG5mdW5jdGlvbiBob29rUm91dGluZ0V2ZW50cyhcbiAgICAkcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZSxcbiAgICAkbG9nOiBuZy5JTG9nU2VydmljZSxcbiAgICAkc3RhdGU6IG5nLnVpLklTdGF0ZVNlcnZpY2Vcbikge1xuICAgIFwibmdJbmplY3RcIjtcblxuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsXG4gICAgICAgIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykgPT4ge1xuICAgICAgICAgICAgJHJvb3RTY29wZVtSb3V0aW5nVmFyXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLFxuICAgICAgICAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpID0+IHtcbiAgICAgICAgICAgIC8vIFVuc2V0IHJvdXRpbmcgdmFyaWFibGUgdG8gZGlzYWJsZSBwYWdlIHRyYW5zaXRpb25cbiAgICAgICAgICAgICRyb290U2NvcGVbUm91dGluZ1Zhcl0gPSBmYWxzZTsgICAgICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gSW50ZXJjZXB0IHJvdXRlIGVycm9yXG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZUVycm9yJyxcbiAgICAgICAgKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgLy8gVW5zZXQgcm91dGluZyB2YXJpYWJsZSB0byBkaXNhYmxlIHBhZ2UgdHJhbnNpdGlvblxuICAgICAgICAgICAgJHJvb3RTY29wZVtSb3V0aW5nVmFyXSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkbG9nLmVycm9yKCdFcnJvciB3aGlsZSBzd2l0Y2hpbmcgcm91dGUgdG8gJyArIHRvU3RhdGUubmFtZSk7XG4gICAgICAgICAgICAkbG9nLmVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgICk7XG5cbn1cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcFJvdXRpbmcnKVxuICAgIC5ydW4oaG9va1JvdXRpbmdFdmVudHMpO1xuICAgICIsImFuZ3VsYXIubW9kdWxlKCdwaXBSb3V0aW5nJywgWyd1aS5yb3V0ZXInXSk7XG5cbmltcG9ydCAnLi9CYWNrRGVjb3JhdG9yJztcbmltcG9ydCAnLi9SZWRpcmVjdERlY29yYXRvcic7XG5pbXBvcnQgJy4vUm91dGluZ0V2ZW50cyc7XG5cbmV4cG9ydCAqIGZyb20gJy4vQmFja0RlY29yYXRvcic7XG5leHBvcnQgKiBmcm9tICcuL1JvdXRpbmdFdmVudHMnO1xuIiwiZXhwb3J0IGxldCBJZGVudGl0eVJvb3RWYXIgPSBcIiRpZGVudGl0eVwiO1xuZXhwb3J0IGxldCBJZGVudGl0eUNoYW5nZWRFdmVudCA9IFwicGlwSWRlbnRpdHlDaGFuZ2VkXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUlkZW50aXR5IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGZ1bGxfbmFtZTogc3RyaW5nO1xuICAgIGRldGFpbHM6IHN0cmluZztcbiAgICBlbWFpbDogc3RyaW5nO1xuICAgIHBob3RvX3VybDogc3RyaW5nO1xuICAgIGdyb3Vwczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUlkZW50aXR5U2VydmljZSB7XG4gICAgaWRlbnRpdHk6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJSWRlbnRpdHlQcm92aWRlciBleHRlbmRzIG5nLklTZXJ2aWNlUHJvdmlkZXIge1xuICAgIHNldFJvb3RWYXI6IGJvb2xlYW47XG4gICAgaWRlbnRpdHk6IGFueTtcbn1cblxuXG5jbGFzcyBJZGVudGl0eVNlcnZpY2UgaW1wbGVtZW50cyBJSWRlbnRpdHlTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9pZGVudGl0eTogYW55O1xuICAgIHByaXZhdGUgX3NldFJvb3RWYXI6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZTtcbiAgICBwcml2YXRlIF9sb2c6IG5nLklMb2dTZXJ2aWNlO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBzZXRSb290VmFyOiBib29sZWFuLFxuICAgICAgICBpZGVudGl0eTogYW55LFxuICAgICAgICAkcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZSxcbiAgICAgICAgJGxvZzogbmcuSUxvZ1NlcnZpY2VcbiAgICApIHtcbiAgICAgICAgdGhpcy5fc2V0Um9vdFZhciA9IHNldFJvb3RWYXI7XG4gICAgICAgIHRoaXMuX2lkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgICAgIHRoaXMuX3Jvb3RTY29wZSA9ICRyb290U2NvcGU7XG4gICAgICAgIHRoaXMuX2xvZyA9ICRsb2c7XG5cbiAgICAgICAgdGhpcy5zZXRSb290VmFyKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRSb290VmFyKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fc2V0Um9vdFZhcilcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RTY29wZVtJZGVudGl0eVJvb3RWYXJdID0gdGhpcy5faWRlbnRpdHk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpZGVudGl0eSgpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWRlbnRpdHk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBpZGVudGl0eSh2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuX2lkZW50aXR5ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuc2V0Um9vdFZhcigpO1xuICAgICAgICB0aGlzLl9yb290U2NvcGUuJGVtaXQoSWRlbnRpdHlDaGFuZ2VkRXZlbnQsIHRoaXMuX2lkZW50aXR5KTtcblxuICAgICAgICBsZXQgaWRlbnRpdHk6IGFueSA9IHZhbHVlIHx8IHt9O1xuICAgICAgICB0aGlzLl9sb2cuZGVidWcoXCJDaGFuZ2VkIGlkZW50aXR5IHRvIFwiICsgSlNPTi5zdHJpbmdpZnkoaWRlbnRpdHkpKTtcbiAgICB9XG59XG5cbmNsYXNzIElkZW50aXR5UHJvdmlkZXIgaW1wbGVtZW50cyBJZGVudGl0eVByb3ZpZGVyIHtcbiAgICBwcml2YXRlIF9zZXRSb290VmFyID0gdHJ1ZTtcbiAgICBwcml2YXRlIF9pZGVudGl0eTogYW55ID0gbnVsbDtcbiAgICBwcml2YXRlIF9zZXJ2aWNlOiBJZGVudGl0eVNlcnZpY2UgPSBudWxsO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBwdWJsaWMgZ2V0IHNldFJvb3RWYXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXRSb290VmFyOyAgXG4gICAgfVxuXG4gICAgcHVibGljIHNldCBzZXRSb290VmFyKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX3NldFJvb3RWYXIgPSAhIXZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaWRlbnRpdHkoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkZW50aXR5OyAgXG4gICAgfVxuXG4gICAgcHVibGljIHNldCBpZGVudGl0eSh2YWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuX2lkZW50aXR5ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljICRnZXQoXG4gICAgICAgICRyb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlLFxuICAgICAgICAkbG9nOiBuZy5JTG9nU2VydmljZVxuICAgICk6IGFueSB7XG4gICAgICAgIFwibmdJbmplY3RcIjtcblxuICAgICAgICBpZiAodGhpcy5fc2VydmljZSA9PSBudWxsKVxuICAgICAgICAgICAgdGhpcy5fc2VydmljZSA9IG5ldyBJZGVudGl0eVNlcnZpY2UodGhpcy5fc2V0Um9vdFZhciwgdGhpcy5faWRlbnRpdHksICRyb290U2NvcGUsICRsb2cpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXJ2aWNlO1xuICAgIH1cblxufVxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgncGlwU2Vzc2lvbicpXG4gICAgLnByb3ZpZGVyKCdwaXBJZGVudGl0eScsIElkZW50aXR5UHJvdmlkZXIpO1xuIiwiZXhwb3J0IGNvbnN0IFNlc3Npb25Sb290VmFyID0gXCIkc2Vzc2lvblwiO1xuZXhwb3J0IGNvbnN0IFNlc3Npb25PcGVuZWRFdmVudCA9IFwicGlwU2Vzc2lvbk9wZW5lZFwiO1xuZXhwb3J0IGNvbnN0IFNlc3Npb25DbG9zZWRFdmVudCA9IFwicGlwU2Vzc2lvbkNsb3NlZFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTZXNzaW9uU2VydmljZSB7XG4gICAgc2Vzc2lvbjogYW55O1xuICAgIGlzT3BlbmVkKCk6IGJvb2xlYW47XG5cbiAgICBvcGVuKHNlc3Npb246IGFueSk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU2Vzc2lvblByb3ZpZGVyIGV4dGVuZHMgbmcuSVNlcnZpY2VQcm92aWRlciB7XG4gICAgc2V0Um9vdFZhcjogYm9vbGVhbjtcbiAgICBzZXNzaW9uOiBhbnk7XG59XG5cbmNsYXNzIFNlc3Npb25TZXJ2aWNlIGltcGxlbWVudHMgSVNlc3Npb25TZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9zZXRSb290VmFyOiBib29sZWFuO1xuICAgIHByaXZhdGUgX3Nlc3Npb246IGFueTtcbiAgICBwcml2YXRlIF9yb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlO1xuICAgIHByaXZhdGUgX2xvZzogbmcuSUxvZ1NlcnZpY2U7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIHNldFJvb3RWYXI6IGJvb2xlYW4sIFxuICAgICAgICBzZXNzaW9uOiBhbnksIFxuICAgICAgICAkcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZSxcbiAgICAgICAgJGxvZzogbmcuSUxvZ1NlcnZpY2VcbiAgICApIHtcbiAgICAgICAgdGhpcy5fc2V0Um9vdFZhciA9IHNldFJvb3RWYXI7XG4gICAgICAgIHRoaXMuX3Nlc3Npb24gPSBzZXNzaW9uO1xuICAgICAgICB0aGlzLl9yb290U2NvcGUgPSAkcm9vdFNjb3BlO1xuICAgICAgICB0aGlzLl9sb2cgPSAkbG9nO1xuXG4gICAgICAgIHRoaXMuc2V0Um9vdFZhcigpO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHNldFJvb3RWYXIoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9zZXRSb290VmFyKVxuICAgICAgICAgICAgdGhpcy5fcm9vdFNjb3BlW1Nlc3Npb25Sb290VmFyXSA9IHRoaXMuX3Nlc3Npb247XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzZXNzaW9uKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXNzaW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc09wZW5lZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nlc3Npb24gIT0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgb3BlbihzZXNzaW9uOiBhbnksIGZ1bGxSZXNldDogYm9vbGVhbiA9IGZhbHNlLCBwYXJ0aWFsUmVzZXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBpZiAoc2Vzc2lvbiA9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2Vzc2lvbiBjYW5ub3QgYmUgbnVsbFwiKTtcblxuICAgICAgICB0aGlzLl9zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgICAgdGhpcy5zZXRSb290VmFyKCk7XG4gICAgICAgIHRoaXMuX3Jvb3RTY29wZS4kZW1pdChTZXNzaW9uT3BlbmVkRXZlbnQsIHNlc3Npb24pO1xuXG4gICAgICAgIHRoaXMuX2xvZy5kZWJ1ZyhcIk9wZW5lZCBzZXNzaW9uIFwiICsgc2Vzc2lvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGNsb3NlKGZ1bGxSZXNldDogYm9vbGVhbiA9IGZhbHNlLCBwYXJ0aWFsUmVzZXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBsZXQgb2xkU2Vzc2lvbiA9IHRoaXMuX3Nlc3Npb247XG5cbiAgICAgICAgdGhpcy5fc2Vzc2lvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuc2V0Um9vdFZhcigpO1xuICAgICAgICB0aGlzLl9yb290U2NvcGUuJGVtaXQoU2Vzc2lvbkNsb3NlZEV2ZW50LCBvbGRTZXNzaW9uKTtcblxuICAgICAgICB0aGlzLl9sb2cuZGVidWcoXCJDbG9zZWQgc2Vzc2lvbiBcIiArIG9sZFNlc3Npb24pO1xuICAgIH1cbn1cblxuY2xhc3MgU2Vzc2lvblByb3ZpZGVyIGltcGxlbWVudHMgSVNlc3Npb25Qcm92aWRlciB7XG4gICAgcHJpdmF0ZSBfc2V0Um9vdFZhciA9IHRydWU7XG4gICAgcHJpdmF0ZSBfc2Vzc2lvbjogYW55ID0gbnVsbDtcbiAgICBwcml2YXRlIF9zZXJ2aWNlOiBTZXNzaW9uU2VydmljZSA9IG51bGw7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIHB1YmxpYyBnZXQgc2V0Um9vdFZhcigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldFJvb3RWYXI7ICBcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHNldFJvb3RWYXIodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fc2V0Um9vdFZhciA9ICEhdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzZXNzaW9uKCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXNzaW9uOyAgXG4gICAgfVxuXG4gICAgcHVibGljIHNldCBzZXNzaW9uKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbiA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyAkZ2V0KFxuICAgICAgICAkcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZSxcbiAgICAgICAgJGxvZzogbmcuSUxvZ1NlcnZpY2VcbiAgICApOiBhbnkge1xuICAgICAgICBcIm5nSW5qZWN0XCI7XG5cbiAgICAgICAgaWYgKHRoaXMuX3NlcnZpY2UgPT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMuX3NlcnZpY2UgPSBuZXcgU2Vzc2lvblNlcnZpY2UodGhpcy5fc2V0Um9vdFZhciwgdGhpcy5fc2Vzc2lvbiwgJHJvb3RTY29wZSwgJGxvZyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlcnZpY2U7XG4gICAgfVxufVxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgncGlwU2Vzc2lvbicpXG4gICAgLnByb3ZpZGVyKCdwaXBTZXNzaW9uJywgU2Vzc2lvblByb3ZpZGVyKTsgXG4iLCJhbmd1bGFyLm1vZHVsZSgncGlwU2Vzc2lvbicsIFtdKTtcblxuaW1wb3J0ICcuL0lkZW50aXR5U2VydmljZSc7XG5pbXBvcnQgJy4vU2Vzc2lvblNlcnZpY2UnO1xuXG5leHBvcnQgKiBmcm9tICcuL0lkZW50aXR5U2VydmljZSc7XG5leHBvcnQgKiBmcm9tICcuL1Nlc3Npb25TZXJ2aWNlJztcbiIsImltcG9ydCB7IFRyYW5zYWN0aW9uRXJyb3IgfSBmcm9tICcuL1RyYW5zYWN0aW9uRXJyb3InXG5cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbiB7XG4gICAgcHJpdmF0ZSBfc2NvcGU6IHN0cmluZyA9IG51bGw7XG4gICAgcHJpdmF0ZSBfaWQ6IHN0cmluZyA9IG51bGw7XG4gICAgcHJpdmF0ZSBfb3BlcmF0aW9uOiBzdHJpbmcgPSBudWxsO1xuICAgIHByaXZhdGUgX2Vycm9yOiBUcmFuc2FjdGlvbkVycm9yID0gbmV3IFRyYW5zYWN0aW9uRXJyb3IoKTtcbiAgICBwcml2YXRlIF9wcm9ncmVzczogbnVtYmVyID0gMDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihzY29wZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3Njb3BlID0gc2NvcGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzY29wZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NvcGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBvcGVyYXRpb24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wZXJhdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHByb2dyZXNzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9ncmVzcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGVycm9yKCk6IFRyYW5zYWN0aW9uRXJyb3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3I7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBlcnJvck1lc3NhZ2UoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yLm1lc3NhZ2U7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9pZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29wZXJhdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzID0gMDtcbiAgICAgICAgdGhpcy5fZXJyb3IucmVzZXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYnVzeSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkICE9IG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIGZhaWxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9lcnJvci5lbXB0eSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhYm9ydGVkKGlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkICE9IGlkO1xuICAgIH1cblxuICAgIHB1YmxpYyBiZWdpbihvcGVyYXRpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIC8vIFRyYW5zYWN0aW9uIGlzIGFscmVhZHkgcnVubmluZ1xuICAgICAgICBpZiAodGhpcy5faWQgIT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdGhpcy5faWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLl9vcGVyYXRpb24gPSBvcGVyYXRpb24gfHwgJ1BST0NFU1NJTkcnXG4gICAgICAgIHRoaXMuX2Vycm9yLnJlc2V0KCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUocHJvZ3Jlc3M6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLl9wcm9ncmVzcyA9IE1hdGgubWF4KHByb2dyZXNzLCAxMDApO1xuICAgIH1cblxuICAgIHB1YmxpYyBhYm9ydCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5faWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9lcnJvci5yZXNldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlbmQoZXJyb3I/OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZXJyb3IuZGVjb2RlKGVycm9yKTtcbiAgICAgICAgdGhpcy5faWQgPSBudWxsO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbkVycm9yIHtcbiAgICBwdWJsaWMgY29kZTogc3RyaW5nO1xuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmc7XG4gICAgcHVibGljIGRldGFpbHM6IGFueTtcbiAgICBwdWJsaWMgY2F1c2U6IHN0cmluZztcbiAgICBwdWJsaWMgc3RhY2tfdHJhY2U6IHN0cmluZztcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihlcnJvcj86IGFueSkge1xuICAgICAgICBpZiAoZXJyb3IgIT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlKGVycm9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29kZSA9IG51bGw7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IG51bGw7XG4gICAgICAgIHRoaXMuY2F1c2UgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YWNrX3RyYWNlID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2UgPSBudWxsICYmIHRoaXMuY29kZSA9PSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZWNvZGUoZXJyb3I6IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgaWYgKGVycm9yID09IG51bGwpIHJldHVybjtcblxuICAgICAgICAvLyBQcm9jZXNzIHJlZ3VsYXIgbWVzc2FnZXNcbiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcm9jZXNzIHNlcnZlciBhcHBsaWNhdGlvbiBlcnJvcnNcbiAgICAgICAgaWYgKGVycm9yLmRhdGEpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5kYXRhLmNvZGUpIHsgXG4gICAgICAgICAgICAgICAgLy8gcHJvY2VzcyBzZXJ2ZXIgZXJyb3IgY29kZXMgaGVyZVxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSB8fCAnRVJST1JfJyArIGVycm9yLmRhdGEuY29kZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvZGUgPSB0aGlzLmNvZGUgfHwgZXJyb3IuZGF0YS5jb2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXJyb3IuZGF0YS5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5tZXNzYWdlIHx8IGVycm9yLmRhdGEubWVzc2FnZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5tZXNzYWdlIHx8IGVycm9yLmRhdGE7XG4gICAgICAgICAgICB0aGlzLmRldGFpbHMgPSB0aGlzLmRldGFpbHMgfHwgZXJyb3IuZGF0YTtcblxuICAgICAgICAgICAgdGhpcy5jYXVzZSA9IGVycm9yLmRhdGEuY2F1c2U7XG4gICAgICAgICAgICB0aGlzLnN0YWNrX3RyYWNlID0gZXJyb3IuZGF0YS5zdGFja190cmFjZTtcbiAgICAgICAgICAgIHRoaXMuZGV0YWlscyA9IGVycm9yLmRhdGEuZGV0YWlsczsgICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByb2Nlc3Mgc3RhbmRhcmQgSFRUUCBlcnJvcnNcbiAgICAgICAgaWYgKGVycm9yLnN0YXR1c1RleHQpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSB8fCBlcnJvci5zdGF0dXNUZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvci5zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSB8fCAnRVJST1JfJyArIGVycm9yLnN0YXR1cztcbiAgICAgICAgICAgIHRoaXMuY29kZSA9IHRoaXMuY29kZSB8fCBlcnJvci5zdGF0dXM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSB8fCBlcnJvcjtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gdGhpcy5kZXRhaWxzIHx8IGVycm9yO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnLi9UcmFuc2FjdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRyYW5zYWN0aW9uU2VydmljZSB7XG4gICAgY3JlYXRlKHNjb3BlPzogc3RyaW5nKTogVHJhbnNhY3Rpb247XG4gICAgZ2V0KHNjb3BlPzogc3RyaW5nKTogVHJhbnNhY3Rpb247XG59XG5cbmNsYXNzIFRyYW5zYWN0aW9uU2VydmljZSBpbXBsZW1lbnRzIElUcmFuc2FjdGlvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgX3RyYW5zYWN0aW9uczogVHJhbnNhY3Rpb24gPSA8VHJhbnNhY3Rpb24+e307XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgcHVibGljIGNyZWF0ZShzY29wZT86IHN0cmluZyk6IFRyYW5zYWN0aW9uIHtcbiAgICAgICAgbGV0IHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbihzY29wZSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoc2NvcGUgIT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zYWN0aW9uc1tzY29wZV0gPSB0cmFuc2FjdGlvbjtcblxuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gICAgfVxuXG4gICAgcHVibGljIGdldChzY29wZT86IHN0cmluZyk6IFRyYW5zYWN0aW9uIHtcbiAgICAgICAgbGV0IHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiA9IHNjb3BlICE9IG51bGwgPyA8VHJhbnNhY3Rpb24+dGhpcy5fdHJhbnNhY3Rpb25zW3Njb3BlXSA6IG51bGw7XG5cbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKHNjb3BlKTtcbiAgICAgICAgICAgIGlmIChzY29wZSAhPSBudWxsKVxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zYWN0aW9uc1tzY29wZV0gPSB0cmFuc2FjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgICB9XG59XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaXBUcmFuc2FjdGlvbicpXG4gICAgLnNlcnZpY2UoJ3BpcFRyYW5zYWN0aW9uJywgVHJhbnNhY3Rpb25TZXJ2aWNlKTtcbiIsImltcG9ydCB7IElUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vdHJhbnNsYXRlL1RyYW5zbGF0ZVNlcnZpY2UnO1xuXG5mdW5jdGlvbiBjb25maWd1cmVUcmFuc2FjdGlvblN0cmluZ3MoJGluamVjdG9yOiBuZy5hdXRvLklJbmplY3RvclNlcnZpY2UpIHtcbiAgICBcIm5nSW5qZWN0XCI7XG5cbiAgICBsZXQgcGlwVHJhbnNsYXRlOiBJVHJhbnNsYXRlU2VydmljZSA9ICRpbmplY3Rvci5oYXMoJ3BpcFRyYW5zbGF0ZVByb3ZpZGVyJykgXG4gICAgICAgID8gPElUcmFuc2xhdGVTZXJ2aWNlPiRpbmplY3Rvci5nZXQoJ3BpcFRyYW5zbGF0ZVByb3ZpZGVyJykgOiBudWxsO1xuXG4gICAgaWYgKHBpcFRyYW5zbGF0ZSkge1xuICAgICAgICBwaXBUcmFuc2xhdGUuc2V0VHJhbnNsYXRpb25zKCdlbicsIHtcbiAgICAgICAgICAgICdFTlRFUklORyc6ICdFbnRlcmluZy4uLicsXG4gICAgICAgICAgICAnUFJPQ0VTU0lORyc6ICdQcm9jZXNzaW5nLi4uJyxcbiAgICAgICAgICAgICdMT0FESU5HJzogJ0xvYWRpbmcuLi4nLFxuICAgICAgICAgICAgJ1NBVklORyc6ICdTYXZpbmcuLi4nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBpcFRyYW5zbGF0ZS5zZXRUcmFuc2xhdGlvbnMoJ3J1Jywge1xuICAgICAgICAgICAgJ0VOVEVSSU5HJzogJ9CS0YXQvtC0INCyINGB0LjRgdGC0LXQvNGDLi4uJyxcbiAgICAgICAgICAgICdQUk9DRVNTSU5HJzogJ9Ce0LHRgNCw0LHQsNGC0YvQstCw0LXRgtGB0Y8uLi4nLFxuICAgICAgICAgICAgJ0xPQURJTkcnOiAn0JfQsNCz0YDRg9C20LDQtdGC0YHRjy4uLicsXG4gICAgICAgICAgICAnU0FWSU5HJzogJ9Ch0L7RhdGA0LDQvdGP0LXRgtGB0Y8uLi4nXG4gICAgICAgIH0pOyAgIFxuICAgIH1cbiAgICBcbn1cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcFRyYW5zYWN0aW9uJylcbiAgICAuY29uZmlnKGNvbmZpZ3VyZVRyYW5zYWN0aW9uU3RyaW5ncyk7XG4iLCJhbmd1bGFyLm1vZHVsZSgncGlwVHJhbnNhY3Rpb24nLCBbXSk7XG5cbmltcG9ydCAnLi9UcmFuc2FjdGlvblN0cmluZ3MnO1xuaW1wb3J0ICcuL1RyYW5zYWN0aW9uRXJyb3InO1xuaW1wb3J0ICcuL1RyYW5zYWN0aW9uJztcbmltcG9ydCAnLi9UcmFuc2FjdGlvblNlcnZpY2UnO1xuXG5leHBvcnQgKiBmcm9tICcuL1RyYW5zYWN0aW9uRXJyb3InO1xuZXhwb3J0ICogZnJvbSAnLi9UcmFuc2FjdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL1RyYW5zYWN0aW9uU2VydmljZSc7XG4iLCJpbXBvcnQgeyBJVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJy4uL3RyYW5zbGF0ZS9UcmFuc2xhdGVTZXJ2aWNlJztcblxuZnVuY3Rpb24gdHJhbnNsYXRlRGlyZWN0aXZlKHBpcFRyYW5zbGF0ZSk6IG5nLklEaXJlY3RpdmUge1xuICAgIFwibmdJbmplY3RcIjtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAga2V5MTogJ0BwaXBUcmFuc2xhdGUnLFxuICAgICAgICAgICAga2V5MjogJ0BrZXknXG4gICAgICAgIH0sXG4gICAgICAgIGxpbms6IChzY29wZTogbmcuSVNjb3BlLCBlbGVtZW50OiBuZy5JQXVnbWVudGVkSlF1ZXJ5LCBhdHRyczogbmcuSUF0dHJpYnV0ZXMpID0+IHtcbiAgICAgICAgICAgIGxldCBrZXk6IHN0cmluZyA9IHNjb3BlLmtleTEgfHwgc2NvcGUua2V5MjtcbiAgICAgICAgICAgIGxldCB2YWx1ZTogc3RyaW5nID0gcGlwVHJhbnNsYXRlLnRyYW5zbGF0ZShrZXkpO1xuICAgICAgICAgICAgZWxlbWVudC50ZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUh0bWxEaXJlY3RpdmUocGlwVHJhbnNsYXRlOiBJVHJhbnNsYXRlU2VydmljZSk6IG5nLklEaXJlY3RpdmUge1xuICAgIFwibmdJbmplY3RcIjtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAga2V5MTogJ0BwaXBUcmFuc2xhdGVIdG1sJyxcbiAgICAgICAgICAgIGtleTI6ICdAa2V5J1xuICAgICAgICB9LFxuICAgICAgICBsaW5rOiAoc2NvcGU6IGFueSwgZWxlbWVudDogbmcuSUF1Z21lbnRlZEpRdWVyeSwgYXR0cnM6IG5nLklBdHRyaWJ1dGVzKSA9PiB7XG4gICAgICAgICAgICBsZXQga2V5OiBzdHJpbmcgPSBzY29wZS5rZXkxIHx8IHNjb3BlLmtleTI7XG4gICAgICAgICAgICBsZXQgdmFsdWU6IHN0cmluZyA9IHBpcFRyYW5zbGF0ZS50cmFuc2xhdGUoa2V5KTtcbiAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgncGlwVHJhbnNsYXRlJylcbiAgICAuZGlyZWN0aXZlKCdwaXBUcmFuc2xhdGUnLCB0cmFuc2xhdGVEaXJlY3RpdmUpXG4gICAgLmRpcmVjdGl2ZSgncGlwVHJhbnNsYXRlSHRtbCcsIHRyYW5zbGF0ZUh0bWxEaXJlY3RpdmUpO1xuIiwiaW1wb3J0IHsgSVRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICcuL1RyYW5zbGF0ZVNlcnZpY2UnO1xuXG5mdW5jdGlvbiB0cmFuc2xhdGVGaWx0ZXIocGlwVHJhbnNsYXRlOiBJVHJhbnNsYXRlU2VydmljZSkge1xuICAgIFwibmdJbmplY3RcIjtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHBpcFRyYW5zbGF0ZS50cmFuc2xhdGUoa2V5KSB8fCBrZXk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBvcHRpb25hbFRyYW5zbGF0ZUZpbHRlcigkaW5qZWN0b3I6IG5nLmF1dG8uSUluamVjdG9yU2VydmljZSkge1xuICAgIFwibmdJbmplY3RcIjtcblxuICAgIGxldCBwaXBUcmFuc2xhdGU6IElUcmFuc2xhdGVTZXJ2aWNlID0gJGluamVjdG9yLmhhcygncGlwVHJhbnNsYXRlJykgXG4gICAgICAgID8gPElUcmFuc2xhdGVTZXJ2aWNlPiRpbmplY3Rvci5nZXQoJ3BpcFRyYW5zbGF0ZScpIDogbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHBpcFRyYW5zbGF0ZSAgPyBwaXBUcmFuc2xhdGUudHJhbnNsYXRlKGtleSkgfHwga2V5IDoga2V5O1xuICAgIH1cbn1cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcFRyYW5zbGF0ZScpXG4gICAgLmZpbHRlcigndHJhbnNsYXRlJywgdHJhbnNsYXRlRmlsdGVyKTtcbiIsIu+7v2ltcG9ydCB7IFRyYW5zbGF0aW9uIH0gZnJvbSAnLi9UcmFuc2xhdGlvbic7XG5pbXBvcnQgeyBSZXNldFBhZ2VFdmVudCB9IGZyb20gJy4uL3V0aWxpdGllcy9QYWdlUmVzZXRTZXJ2aWNlJztcblxuZXhwb3J0IGxldCBMYW5ndWFnZVJvb3RWYXIgPSBcIiRsYW5ndWFnZVwiO1xuZXhwb3J0IGxldCBMYW5ndWFnZUNoYW5nZWRFdmVudCA9IFwicGlwTGFuZ3VhZ2VDaGFuZ2VkXCI7ICAgIFxuXG5leHBvcnQgaW50ZXJmYWNlIElUcmFuc2xhdGVTZXJ2aWNlIHtcbiAgICBsYW5ndWFnZTogc3RyaW5nO1xuXG4gICAgdXNlKGxhbmd1YWdlOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgc2V0VHJhbnNsYXRpb25zKGxhbmd1YWdlOiBzdHJpbmcsIHRyYW5zbGF0aW9uczogYW55KTogdm9pZDtcbiAgICB0cmFuc2xhdGlvbnMobGFuZ3VhZ2U6IHN0cmluZywgdHJhbnNsYXRpb25zOiBhbnkpOiB2b2lkO1xuXG4gICAgdHJhbnNsYXRlKGtleTogc3RyaW5nKTogc3RyaW5nO1xuICAgIHRyYW5zbGF0ZUFycmF5KGtleXM6IHN0cmluZ1tdKTogc3RyaW5nW107XG4gICAgdHJhbnNsYXRlU2V0KGtleXM6IHN0cmluZ1tdLCBrZXlQcm9wOiBzdHJpbmcsIHZhbHVlUHJvcDogc3RyaW5nKTogYW55W107XG4gICAgdHJhbnNsYXRlT2JqZWN0cyhpdGVtczogYW55W10sIGtleVByb3A6IHN0cmluZywgdmFsdWVQcm9wOiBzdHJpbmcpOiBhbnlbXTtcbiAgICB0cmFuc2xhdGVXaXRoUHJlZml4KHByZWZpeDogc3RyaW5nLCBrZXk6IHN0cmluZyk7XG4gICAgdHJhbnNsYXRlU2V0V2l0aFByZWZpeChwcmVmaXg6IHN0cmluZywga2V5czogc3RyaW5nW10sIGtleVByb3A6IHN0cmluZywgdmFsdWVQcm9wOiBzdHJpbmcpO1xuICAgIHRyYW5zbGF0ZVNldFdpdGhQcmVmaXgyKHByZWZpeDogc3RyaW5nLCBrZXlzOiBzdHJpbmdbXSwga2V5UHJvcDogc3RyaW5nLCB2YWx1ZVByb3A6IHN0cmluZyk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRyYW5zbGF0ZVByb3ZpZGVyIGV4dGVuZHMgSVRyYW5zbGF0ZVNlcnZpY2UsIG5nLklTZXJ2aWNlUHJvdmlkZXIge1xufVxuXG5jbGFzcyBUcmFuc2xhdGVTZXJ2aWNlIGltcGxlbWVudHMgSVRyYW5zbGF0ZVNlcnZpY2Uge1xuICAgIHByaXZhdGUgX3RyYW5zbGF0aW9uOiBUcmFuc2xhdGlvbjtcbiAgICBwcml2YXRlIF9zZXRSb290VmFyOiBib29sZWFuO1xuICAgIHByaXZhdGUgX3BlcnNpc3Q6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZTtcbiAgICBwcml2YXRlIF9sb2c6IG5nLklMb2dTZXJ2aWNlO1xuICAgIHByaXZhdGUgX3dpbmRvdzogbmcuSVdpbmRvd1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBfbWREYXRlTG9jYWxlOiBhbmd1bGFyLm1hdGVyaWFsLklEYXRlTG9jYWxlUHJvdmlkZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvbixcbiAgICAgICAgc2V0Um9vdFZhcjogYm9vbGVhbixcbiAgICAgICAgcGVyc2lzdDogYm9vbGVhbixcbiAgICAgICAgJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UsXG4gICAgICAgICRsb2c6IG5nLklMb2dTZXJ2aWNlLFxuICAgICAgICAkd2luZG93OiBuZy5JV2luZG93U2VydmljZSxcbiAgICAgICAgJG1kRGF0ZUxvY2FsZTogYW5ndWxhci5tYXRlcmlhbC5JRGF0ZUxvY2FsZVByb3ZpZGVyLFxuICAgICkge1xuICAgICAgICB0aGlzLl9zZXRSb290VmFyID0gc2V0Um9vdFZhcjtcbiAgICAgICAgdGhpcy5fcGVyc2lzdCA9IHBlcnNpc3Q7XG4gICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uID0gdHJhbnNsYXRpb247XG4gICAgICAgIHRoaXMuX3Jvb3RTY29wZSA9ICRyb290U2NvcGU7XG4gICAgICAgIHRoaXMuX2xvZyA9ICRsb2c7XG4gICAgICAgIHRoaXMuX3dpbmRvdyA9ICR3aW5kb3c7XG4gICAgICAgIHRoaXMuX21kRGF0ZUxvY2FsZSA9ICRtZERhdGVMb2NhbGU7XG5cbiAgICAgICAgaWYgKHRoaXMuX3BlcnNpc3QgJiYgdGhpcy5fd2luZG93LmxvY2FsU3RvcmFnZSlcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uLmxhbmd1YWdlID0gdGhpcy5fd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZScpIHx8IHRoaXMuX3RyYW5zbGF0aW9uLmxhbmd1YWdlO1xuXG4gICAgICAgIHRoaXMuX2xvZy5kZWJ1ZyhcIlNldCBsYW5ndWFnZSB0byBcIiArIHRoaXMuX3RyYW5zbGF0aW9uLmxhbmd1YWdlKTtcblxuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNoYW5nZUxvY2FsZShsb2NhbGU6IHN0cmluZykge1xuICAgICAgICBpZiAoIWxvY2FsZSkgcmV0dXJuO1xuXG4gICAgICAgIC8vIHZhciBsb2NhbGVEYXRlOiBtb21lbnQuTW9tZW50TGFuZ3VhZ2VEYXRhO1xuICAgICAgICB2YXIgbG9jYWxlRGF0ZTogYW55O1xuXG4gICAgICAgIG1vbWVudC5sb2NhbGUobG9jYWxlKTtcbiAgICAgICAgbG9jYWxlRGF0ZSA9IG1vbWVudC5sb2NhbGVEYXRhKCk7XG5cbiAgICAgICAgdGhpcy5fbWREYXRlTG9jYWxlLm1vbnRocyA9IGFuZ3VsYXIuaXNBcnJheShsb2NhbGVEYXRlLl9tb250aHMpID8gbG9jYWxlRGF0ZS5fbW9udGhzIDogbG9jYWxlRGF0ZS5fbW9udGhzLmZvcm1hdDtcbiAgICAgICAgdGhpcy5fbWREYXRlTG9jYWxlLnNob3J0TW9udGhzID0gYW5ndWxhci5pc0FycmF5KGxvY2FsZURhdGUuX21vbnRoc1Nob3J0KSA/IGxvY2FsZURhdGUuX21vbnRoc1Nob3J0IDogbG9jYWxlRGF0ZS5fbW9udGhzU2hvcnQuZm9ybWF0O1xuICAgICAgICB0aGlzLl9tZERhdGVMb2NhbGUuZGF5cyA9IGFuZ3VsYXIuaXNBcnJheShsb2NhbGVEYXRlLl93ZWVrZGF5cykgPyBsb2NhbGVEYXRlLl93ZWVrZGF5cyA6IGxvY2FsZURhdGUuX3dlZWtkYXlzLmZvcm1hdDtcbiAgICAgICAgdGhpcy5fbWREYXRlTG9jYWxlLnNob3J0RGF5cyA9IGxvY2FsZURhdGUuX3dlZWtkYXlzTWluO1xuICAgICAgICB0aGlzLl9tZERhdGVMb2NhbGUuZmlyc3REYXlPZldlZWsgPSBsb2NhbGVEYXRlLl93ZWVrLmRvdztcbiAgICB9XG5cbiAgICBwcml2YXRlIHNhdmUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9zZXRSb290VmFyKVxuICAgICAgICAgICAgdGhpcy5fcm9vdFNjb3BlW0xhbmd1YWdlUm9vdFZhcl0gPSB0aGlzLl90cmFuc2xhdGlvbi5sYW5ndWFnZTtcblxuICAgICAgICBpZiAodGhpcy5fcGVyc2lzdCAmJiB0aGlzLl93aW5kb3cubG9jYWxTdG9yYWdlICE9IG51bGwpXG4gICAgICAgICAgICB0aGlzLl93aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xhbmd1YWdlJywgdGhpcy5fdHJhbnNsYXRpb24ubGFuZ3VhZ2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgbGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0aW9uLmxhbmd1YWdlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgbGFuZ3VhZ2UodmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAodmFsdWUgIT0gdGhpcy5fdHJhbnNsYXRpb24ubGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uLmxhbmd1YWdlID0gdmFsdWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2xvZy5kZWJ1ZyhcIkNoYW5naW5nIGxhbmd1YWdlIHRvIFwiICsgdmFsdWUpO1xuXG4gICAgICAgICAgICB0aGlzLmNoYW5nZUxvY2FsZSh0aGlzLl90cmFuc2xhdGlvbi5sYW5ndWFnZSk7XG4gICAgICAgICAgICB0aGlzLnNhdmUoKTsgICBcblxuICAgICAgICAgICAgdGhpcy5fcm9vdFNjb3BlLiRlbWl0KExhbmd1YWdlQ2hhbmdlZEV2ZW50LCB2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLl9yb290U2NvcGUuJGVtaXQoUmVzZXRQYWdlRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHVzZShsYW5ndWFnZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGxhbmd1YWdlICE9IG51bGwpXG4gICAgICAgICAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2U7XG4gICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRUcmFuc2xhdGlvbnMobGFuZ3VhZ2U6IHN0cmluZywgdHJhbnNsYXRpb25zOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0aW9uLnNldFRyYW5zbGF0aW9ucyhsYW5ndWFnZSwgdHJhbnNsYXRpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhbnNsYXRpb25zKGxhbmd1YWdlOiBzdHJpbmcsIHRyYW5zbGF0aW9uczogYW55KTogdm9pZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2xhdGlvbi5zZXRUcmFuc2xhdGlvbnMobGFuZ3VhZ2UsIHRyYW5zbGF0aW9ucyk7XG4gICAgfVxuXG4gICAgcHVibGljIHRyYW5zbGF0ZShrZXk6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2xhdGlvbi50cmFuc2xhdGUoa2V5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhbnNsYXRlQXJyYXkoa2V5czogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2xhdGlvbi50cmFuc2xhdGVBcnJheShrZXlzKTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHRyYW5zbGF0ZVNldChrZXlzOiBzdHJpbmdbXSwga2V5UHJvcDogc3RyaW5nLCB2YWx1ZVByb3A6IHN0cmluZyk6IGFueVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0aW9uLnRyYW5zbGF0ZVNldChrZXlzLCBrZXlQcm9wLCB2YWx1ZVByb3ApO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFuc2xhdGVPYmplY3RzKGl0ZW1zOiBhbnlbXSwga2V5UHJvcDogc3RyaW5nLCB2YWx1ZVByb3A6IHN0cmluZyk6IGFueVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0aW9uLnRyYW5zbGF0ZU9iamVjdHMoaXRlbXMsIGtleVByb3AsIHZhbHVlUHJvcCk7XG4gICAgfVxuXG4gICAgcHVibGljIHRyYW5zbGF0ZVdpdGhQcmVmaXgocHJlZml4OiBzdHJpbmcsIGtleTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2xhdGlvbi50cmFuc2xhdGVXaXRoUHJlZml4KHByZWZpeCwga2V5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJhbnNsYXRlU2V0V2l0aFByZWZpeChwcmVmaXg6IHN0cmluZywga2V5czogc3RyaW5nW10sIGtleVByb3A6IHN0cmluZywgdmFsdWVQcm9wOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0aW9uLnRyYW5zbGF0ZVNldFdpdGhQcmVmaXgocHJlZml4LCBrZXlzLCBrZXlQcm9wLCB2YWx1ZVByb3ApO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFuc2xhdGVTZXRXaXRoUHJlZml4MihwcmVmaXg6IHN0cmluZywga2V5czogc3RyaW5nW10sIGtleVByb3A6IHN0cmluZywgdmFsdWVQcm9wOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zbGF0aW9uLnRyYW5zbGF0ZVNldFdpdGhQcmVmaXgyKHByZWZpeCwga2V5cywga2V5UHJvcCwgdmFsdWVQcm9wKTtcbiAgICB9XG59XG5cbmNsYXNzIFRyYW5zbGF0ZVByb3ZpZGVyIGV4dGVuZHMgVHJhbnNsYXRpb24gaW1wbGVtZW50cyBJVHJhbnNsYXRlUHJvdmlkZXIge1xuICAgIHByaXZhdGUgX3RyYW5zbGF0aW9uOiBUcmFuc2xhdGlvbjtcbiAgICBwcml2YXRlIF9zZXRSb290VmFyOiBib29sZWFuID0gdHJ1ZTtcbiAgICBwcml2YXRlIF9wZXJzaXN0OiBib29sZWFuID0gdHJ1ZTtcbiAgICBwcml2YXRlIF9zZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlO1xuICAgIFxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNldFJvb3RWYXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXRSb290VmFyOyAgXG4gICAgfVxuXG4gICAgcHVibGljIHNldCBzZXRSb290VmFyKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX3NldFJvb3RWYXIgPSAhIXZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcGVyc2lzdCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlcnNpc3Q7ICBcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHBlcnNpc3QodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fcGVyc2lzdCA9ICEhdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljICRnZXQoXG4gICAgICAgICRyb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlLFxuICAgICAgICAkbG9nOiBuZy5JTG9nU2VydmljZSwgXG4gICAgICAgICR3aW5kb3c6IG5nLklXaW5kb3dTZXJ2aWNlLFxuICAgICAgICAkbWREYXRlTG9jYWxlOiBhbmd1bGFyLm1hdGVyaWFsLklEYXRlTG9jYWxlUHJvdmlkZXJcbiAgICApOiBhbnkge1xuICAgICAgICBcIm5nSW5qZWN0XCI7XG5cbiAgICAgICAgaWYgKHRoaXMuX3NlcnZpY2UgPT0gbnVsbCkgXG4gICAgICAgICAgICB0aGlzLl9zZXJ2aWNlID0gbmV3IFRyYW5zbGF0ZVNlcnZpY2UodGhpcywgdGhpcy5fc2V0Um9vdFZhciwgdGhpcy5fcGVyc2lzdCwgJHJvb3RTY29wZSwgJGxvZywgJHdpbmRvdywgJG1kRGF0ZUxvY2FsZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlcnZpY2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0VHJhbnNsYXRlKHBpcFRyYW5zbGF0ZTogSVRyYW5zbGF0ZVNlcnZpY2UpIHtcbiAgICBwaXBUcmFuc2xhdGUubGFuZ3VhZ2U7XG59XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaXBUcmFuc2xhdGUnKVxuICAgIC5wcm92aWRlcigncGlwVHJhbnNsYXRlJywgVHJhbnNsYXRlUHJvdmlkZXIpXG4gICAgLnJ1bihpbml0VHJhbnNsYXRlKTtcbiIsImV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvbiB7XG4gICAgcHJvdGVjdGVkIF9sYW5ndWFnZTogc3RyaW5nID0gJ2VuJztcbiAgICBwcm90ZWN0ZWQgX3RyYW5zbGF0aW9ucyA9IHtcbiAgICAgICAgZW46IHtcbiAgICAgICAgICAgICdlbic6ICdFbmdsaXNoJyxcbiAgICAgICAgICAgICdydSc6ICdSdXNzaWFuJyxcbiAgICAgICAgICAgICdlcyc6ICdTcGFuaXNoJyxcbiAgICAgICAgICAgICdwdCc6ICdQb3J0dWd1ZXNlJyxcbiAgICAgICAgICAgICdkZSc6ICdHZXJtYW4nLFxuICAgICAgICAgICAgJ2ZyJzogJ0ZyZW5jaCdcbiAgICAgICAgfSxcbiAgICAgICAgcnU6IHtcbiAgICAgICAgICAgICdlbic6ICfQkNC90LPQu9C40LnRgdC60LjQuScsXG4gICAgICAgICAgICAncnUnOiAn0KDRg9GB0YHQutC40LknLFxuICAgICAgICAgICAgJ2VzJzogJ9CY0YHQv9Cw0L3RgdC60LjQuScsXG4gICAgICAgICAgICAncHQnOiAn0J/QvtGA0YLRg9Cz0LDQu9GM0YHQutC40LknLFxuICAgICAgICAgICAgJ2RlJzogJ9Cd0LXQvNC10YbQutC40LknLFxuICAgICAgICAgICAgJ2ZyJzogJ9Ck0YDQsNC90YbRg9C30YHQutC40LknXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge31cblxuICAgIHB1YmxpYyBnZXQgbGFuZ3VhZ2UoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX2xhbmd1YWdlOyB9XG4gICAgcHVibGljIHNldCBsYW5ndWFnZSh2YWx1ZTogc3RyaW5nKSB7IHRoaXMuX2xhbmd1YWdlID0gdmFsdWU7IH1cblxuICAgIHB1YmxpYyB1c2UobGFuZ3VhZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGlmIChsYW5ndWFnZSAhPSBudWxsKVxuICAgICAgICAgICAgdGhpcy5fbGFuZ3VhZ2UgPSBsYW5ndWFnZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhbmd1YWdlO1xuICAgIH1cblxuICAgIC8vIFNldCB0cmFuc2xhdGlvbiBzdHJpbmdzIGZvciBzcGVjaWZpYyBsYW5ndWFnZVxuICAgIHB1YmxpYyBzZXRUcmFuc2xhdGlvbnMobGFuZ3VhZ2U6IHN0cmluZywgdHJhbnNsYXRpb25zOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgbGV0IG1hcCA9IHRoaXMuX3RyYW5zbGF0aW9uc1tsYW5ndWFnZV0gfHwge307XG4gICAgICAgIHRoaXMuX3RyYW5zbGF0aW9uc1tsYW5ndWFnZV0gPSBfLmV4dGVuZChtYXAsIHRyYW5zbGF0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8gWWV0IGFub3RoZXIgbWV0aG9kIHRvIHNldCB0cmFuc2xhdGlvbiBzdHJpbmdzIGZvciBzcGVjaWZpYyBsYW5ndWFnZVxuICAgIHB1YmxpYyB0cmFuc2xhdGlvbnMobGFuZ3VhZ2U6IHN0cmluZywgdHJhbnNsYXRpb25zOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRUcmFuc2xhdGlvbnMobGFuZ3VhZ2UsIHRyYW5zbGF0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8gVHJhbnNsYXRlIGEgc3RyaW5nIGJ5IGtleSB1c2luZyBzZXQgbGFuZ3VhZ2VcbiAgICBwdWJsaWMgdHJhbnNsYXRlKGtleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKF8uaXNOdWxsKGtleSkgfHwgXy5pc1VuZGVmaW5lZChrZXkpKSByZXR1cm4gJyc7XG5cbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucyA9IHRoaXMuX3RyYW5zbGF0aW9uc1t0aGlzLl9sYW5ndWFnZV0gfHwge307XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnNba2V5XSB8fCBrZXk7XG4gICAgfVxuXG4gICAgLy8gVHJhbnNsYXRlIGFuIGFycmF5IG9mIHN0cmluZ3NcbiAgICBwdWJsaWMgdHJhbnNsYXRlQXJyYXkoa2V5czogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmIChfLmlzTnVsbChrZXlzKSB8fCBrZXlzLmxlbmd0aCA9PSAwKSByZXR1cm4gW107XG5cbiAgICAgICAgbGV0IHZhbHVlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucyA9IHRoaXMuX3RyYW5zbGF0aW9uc1t0aGlzLl9sYW5ndWFnZV0gfHwge307XG5cbiAgICAgICAgXy5lYWNoKGtleXMsIGZ1bmN0aW9uIChrOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIGxldCBrZXkgPSBrIHx8ICcnO1xuICAgICAgICAgICAgdmFsdWVzLnB1c2godHJhbnNsYXRpb25zW2tleV0gfHwga2V5KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICAvLyBUcmFuc2xhdGUgYW4gYXJyYXkgb2Ygc3RyaW5ncyBpbnRvIGFycmF5IG9mIG9iamVjdHMgKHNldClcbiAgICBwdWJsaWMgdHJhbnNsYXRlU2V0KGtleXM6IHN0cmluZ1tdLCBrZXlQcm9wOiBzdHJpbmcsIHZhbHVlUHJvcDogc3RyaW5nKTogYW55W10ge1xuICAgICAgICBpZiAoXy5pc051bGwoa2V5cykgfHwga2V5cy5sZW5ndGggPT0gMCkgcmV0dXJuIFtdO1xuXG4gICAgICAgIGtleVByb3AgPSBrZXlQcm9wIHx8ICdpZCc7XG4gICAgICAgIHZhbHVlUHJvcCA9IHZhbHVlUHJvcCB8fCAnbmFtZSc7XG5cbiAgICAgICAgbGV0IHZhbHVlczogYW55W10gPSBbXTtcbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucyA9IHRoaXMuX3RyYW5zbGF0aW9uc1t0aGlzLl9sYW5ndWFnZV0gfHwge307XG5cbiAgICAgICAgXy5lYWNoKGtleXMsIGZ1bmN0aW9uIChrZXk6IHN0cmluZykge1xuICAgICAgICAgICAgbGV0IHZhbHVlOiBhbnkgPSB7fTtcbiAgICAgICAgICAgIGtleSA9IGtleSB8fCAnJztcblxuICAgICAgICAgICAgdmFsdWVba2V5UHJvcF0gPSBrZXk7XG4gICAgICAgICAgICB2YWx1ZVt2YWx1ZVByb3BdID0gdHJhbnNsYXRpb25zW2tleV0gfHwga2V5O1xuXG4gICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgLy8gVHJhbnNsYXRlIGEgY29sbGVjdGlvbiBvZiBvYmplY3RzXG4gICAgcHVibGljIHRyYW5zbGF0ZU9iamVjdHMoaXRlbXM6IGFueVtdLCBrZXlQcm9wOiBzdHJpbmcsIHZhbHVlUHJvcDogc3RyaW5nKTogYW55W10ge1xuICAgICAgICBpZiAoXy5pc051bGwoaXRlbXMpIHx8IGl0ZW1zLmxlbmd0aCA9PSAwKSByZXR1cm4gW107XG5cbiAgICAgICAga2V5UHJvcCA9IGtleVByb3AgfHwgJ25hbWUnO1xuICAgICAgICB2YWx1ZVByb3AgPSB2YWx1ZVByb3AgfHwgJ25hbWVMb2NhbCc7XG5cbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucyA9IHRoaXMuX3RyYW5zbGF0aW9uc1t0aGlzLl9sYW5ndWFnZV0gfHwge307XG5cbiAgICAgICAgXy5lYWNoKGl0ZW1zLCBmdW5jdGlvbiAoaXRlbTogYW55KSB7XG4gICAgICAgICAgICBsZXQga2V5ID0gaXRlbVtrZXlQcm9wXSB8fCAnJztcblxuICAgICAgICAgICAgaXRlbVt2YWx1ZVByb3BdID0gdHJhbnNsYXRpb25zW2tleV0gfHwga2V5O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuXG4gICAgLy8gVHJhbnNsYXRlIGEgc3RyaW5nIGJ5IGtleSAgd2l0aCBwcmVmaXggdXNpbmcgc2V0IGxhbmd1YWdlIHRvZG9cbiAgICBwdWJsaWMgdHJhbnNsYXRlV2l0aFByZWZpeChwcmVmaXg6IHN0cmluZywga2V5OiBzdHJpbmcpIHtcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ID8gcHJlZml4ICsgJ18nIDogJyc7XG4gICAgICAgIGtleSA9IChwcmVmaXggKyBrZXkpLnJlcGxhY2UoLyAvZywgJ18nKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBpZiAoa2V5ID09IG51bGwpIHJldHVybiAnJztcbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucyA9IHRoaXMuX3RyYW5zbGF0aW9uc1t0aGlzLl9sYW5ndWFnZV0gfHwge307XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnNba2V5XSB8fCBrZXk7XG4gICAgfTtcblxuICAgIHB1YmxpYyB0cmFuc2xhdGVTZXRXaXRoUHJlZml4KHByZWZpeDogc3RyaW5nLCBrZXlzOiBzdHJpbmdbXSwga2V5UHJvcDogc3RyaW5nLCB2YWx1ZVByb3A6IHN0cmluZykge1xuICAgICAgICBpZiAoXy5pc051bGwoa2V5cykgfHwga2V5cy5sZW5ndGggPT0gMCkgcmV0dXJuIFtdO1xuXG4gICAgICAgIHByZWZpeCA9IHByZWZpeCA/IHByZWZpeC5yZXBsYWNlKC8gL2csICdfJykudG9VcHBlckNhc2UoKSA6ICcnO1xuICAgICAgICBrZXlQcm9wID0ga2V5UHJvcCB8fCAnaWQnO1xuICAgICAgICB2YWx1ZVByb3AgPSB2YWx1ZVByb3AgfHwgJ25hbWUnO1xuXG4gICAgICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucyA9IHRoaXMuX3RyYW5zbGF0aW9uc1t0aGlzLl9sYW5ndWFnZV0gfHwge307XG5cbiAgICAgICAgXy5lYWNoKGtleXMsIGZ1bmN0aW9uIChrZXk6IHN0cmluZykge1xuICAgICAgICAgICAgbGV0IHZhbHVlOiBhbnkgPSB7fTsgXG4gICAgICAgICAgICBrZXkgPSBrZXkgfHwgJyc7XG5cbiAgICAgICAgICAgIHZhbHVlW2tleVByb3BdID0ga2V5O1xuICAgICAgICAgICAgdmFsdWVbdmFsdWVQcm9wXSA9IHRyYW5zbGF0aW9uc1twcmVmaXggKyAnXycgKyBrZXldIHx8IGtleTtcblxuICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cblxuICAgIC8vIFRyYW5zbGF0ZSBhbiBhcnJheSBvZiBzdHJpbmdzLCBhcHBseSB1cHBlcmNhc2UgYW5kIHJlcGxhY2UgJyAnID0+ICdfJ1xuICAgIHB1YmxpYyB0cmFuc2xhdGVTZXRXaXRoUHJlZml4MihwcmVmaXg6IHN0cmluZywga2V5czogc3RyaW5nW10sIGtleVByb3A6IHN0cmluZywgdmFsdWVQcm9wOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKF8uaXNOdWxsKGtleXMpIHx8IGtleXMubGVuZ3RoID09IDApIHJldHVybiBbXTtcblxuICAgICAgICBrZXlQcm9wID0ga2V5UHJvcCB8fCAnaWQnO1xuICAgICAgICB2YWx1ZVByb3AgPSB2YWx1ZVByb3AgfHwgJ25hbWUnO1xuICAgICAgICBwcmVmaXggPSBwcmVmaXggPyBwcmVmaXgucmVwbGFjZSgvIC9nLCAnXycpLnRvVXBwZXJDYXNlKCkgKyAnXyc6ICcnO1xuXG4gICAgICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgbGV0IHRyYW5zbGF0aW9ucyA9IHRoaXMuX3RyYW5zbGF0aW9uc1t0aGlzLl9sYW5ndWFnZV0gfHwge307XG5cbiAgICAgICAgXy5lYWNoKGtleXMsIGZ1bmN0aW9uIChrZXk6IHN0cmluZykge1xuICAgICAgICAgICAgbGV0IHZhbHVlOiBhbnkgPSB7fTtcbiAgICAgICAgICAgIGtleSA9IGtleSB8fCAnJztcblxuICAgICAgICAgICAgdmFsdWVba2V5UHJvcF0gPSBrZXk7XG4gICAgICAgICAgICB2YWx1ZVt2YWx1ZVByb3BdID0gdHJhbnNsYXRpb25zW3ByZWZpeCArIGtleS5yZXBsYWNlKC8gL2csICdfJykudG9VcHBlckNhc2UoKV1cbiAgICAgICAgICAgICAgICB8fCAocHJlZml4ICsga2V5LnJlcGxhY2UoLyAvZywgJ18nKS50b1VwcGVyQ2FzZSgpKTtcblxuICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbn1cbiIsImFuZ3VsYXIubW9kdWxlKCdwaXBUcmFuc2xhdGUnLCBbXSk7XG5cbmltcG9ydCAnLi9UcmFuc2xhdGlvbic7XG5pbXBvcnQgJy4vVHJhbnNsYXRlU2VydmljZSc7XG5pbXBvcnQgJy4vVHJhbnNsYXRlRmlsdGVyJztcbmltcG9ydCAnLi9UcmFuc2xhdGVEaXJlY3RpdmUnO1xuXG5leHBvcnQgKiBmcm9tICcuL1RyYW5zbGF0aW9uJztcbmV4cG9ydCAqIGZyb20gJy4vVHJhbnNsYXRlU2VydmljZSc7XG4iLCJleHBvcnQgaW50ZXJmYWNlIElDb2RlcyB7XG4gICAgLy8gU2ltcGxlIHZlcnNpb24gb2Ygc3RyaW5nIGhhc2hjb2RlXG4gICAgaGFzaCh2YWx1ZTogc3RyaW5nKTogbnVtYmVyO1xuICAgIC8vIEdlbmVyYXRlcyByYW5kb20gYmlnIG51bWJlciBmb3IgdmVyaWZpY2F0aW9uIGNvZGVzXG4gICAgdmVyaWZpY2F0aW9uKCk6IHN0cmluZztcbn1cblxuXG5jbGFzcyBDb2RlcyBpbXBsZW1lbnRzIElDb2RlcyB7XG4gICAgLy8gU2ltcGxlIHZlcnNpb24gb2Ygc3RyaW5nIGhhc2hjb2RlXG4gICAgcHVibGljIGhhc2godmFsdWU6IHN0cmluZyk6IG51bWJlciB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gMDtcbiAgICAgICAgXG4gICAgICAgIGxldCByZXN1bHQ6IG51bWJlciA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICByZXN1bHQgKz0gdmFsdWUuY2hhckNvZGVBdChpKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlcyByYW5kb20gYmlnIG51bWJlciBmb3IgdmVyaWZpY2F0aW9uIGNvZGVzXG4gICAgcHVibGljIHZlcmlmaWNhdGlvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDEwKS50b1VwcGVyQ2FzZSgpOyAvLyByZW1vdmUgYDAuYFxuICAgIH1cbn1cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcENvZGVzJywgW10pXG4gICAgLnNlcnZpY2UoJ3BpcENvZGVzJywgQ29kZXMpO1xuIiwiZXhwb3J0IGludGVyZmFjZSBJRm9ybWF0IHtcbiAgICAvLyBDcmVhdGVzIGEgc2FtcGxlIGxpbmUgZnJvbSBhIHRleHRcbiAgICBzYW1wbGUodmFsdWU6IHN0cmluZywgbWF4TGVuZ3RoOiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgICBzcHJpbnRmKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pOiBzdHJpbmc7XG59XG5cblxuY2xhc3MgRm9ybWF0IGltcGxlbWVudHMgSUZvcm1hdCB7XG4gICAgLy8gQ2FjaGVkIGZvciBwYXJzZWQgZm9ybWF0c1xuICAgIHByaXZhdGUgY2FjaGUgPSB7fTtcblxuICAgIC8vIENyZWF0ZXMgYSBzYW1wbGUgbGluZSBmcm9tIGEgdGV4dFxuICAgIHB1YmxpYyBzYW1wbGUodmFsdWU6IHN0cmluZywgbWF4TGVuZ3RoOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGVuZ3RoOiBudW1iZXIgPSB2YWx1ZS5pbmRleE9mKCdcXG4nKTtcbiAgICAgICAgbGVuZ3RoID0gbGVuZ3RoID49IDAgPyBsZW5ndGggOiB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIGxlbmd0aCA9IGxlbmd0aCA8IG1heExlbmd0aCA/IHZhbHVlLmxlbmd0aCA6IG1heExlbmd0aDtcblxuICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdHJSZXBlYXQoc3RyOiBzdHJpbmcsIHF0eTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHF0eSA8IDEpIHsgXG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdDogc3RyaW5nID0gJyc7XG4gICAgICAgIHdoaWxlIChxdHkgPiAwKSB7XG4gICAgICAgICAgICBpZiAocXR5ICYgMSkgcmVzdWx0ICs9IHN0cjtcbiAgICAgICAgICAgIHF0eSA+Pj0gMSwgc3RyICs9IHN0cjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VHlwZSh2YXJpYWJsZSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhcmlhYmxlKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlRm9ybWF0KGZtdDogc3RyaW5nKTogYW55IHtcbiAgICAgICAgbGV0IF9mbXQ6IHN0cmluZyA9IGZtdCwgbWF0Y2ggPSBbXSwgcGFyc2VfdHJlZSA9IFtdLCBhcmdfbmFtZXM6IG51bWJlciA9IDA7XG4gICAgICAgIHdoaWxlIChfZm10KSB7XG4gICAgICAgICAgICBpZiAoKG1hdGNoID0gL15bXlxceDI1XSsvLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKG1hdGNoWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IC9eXFx4MjV7Mn0vLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKCclJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSAvXlxceDI1KD86KFsxLTldXFxkKilcXCR8XFwoKFteXFwpXSspXFwpKT8oXFwrKT8oMHwnW14kXSk/KC0pPyhcXGQrKT8oPzpcXC4oXFxkKykpPyhbYi1mb3N1eFhdKS8uZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnX25hbWVzIHw9IDE7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWVsZF9saXN0OiBzdHJpbmdbXSA9IFtdLCByZXBsYWNlbWVudF9maWVsZDogc3RyaW5nID0gbWF0Y2hbMl0sIGZpZWxkX21hdGNoOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGZpZWxkX21hdGNoID0gL14oW2Etel9dW2Etel9cXGRdKikvaS5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKHJlcGxhY2VtZW50X2ZpZWxkID0gcmVwbGFjZW1lbnRfZmllbGQuc3Vic3RyaW5nKGZpZWxkX21hdGNoWzBdLmxlbmd0aCkpICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSAvXlxcLihbYS16X11bYS16X1xcZF0qKS9pLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgoZmllbGRfbWF0Y2ggPSAvXlxcWyhcXGQrKVxcXS8uZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSA9IGZpZWxkX2xpc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmdfbmFtZXMgfD0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFyZ19uYW1lcyA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01peGluZyBwb3NpdGlvbmFsIGFuZCBuYW1lZCBwbGFjZWhvbGRlcnMgaXMgbm90ICh5ZXQpIHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2gobWF0Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVycm9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfZm10ID0gX2ZtdC5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VfdHJlZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdChwYXJzZV90cmVlOiBhbnksIGFyZ3Y6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGxldCBjdXJzb3I6IG51bWJlciA9IDA7IFxuICAgICAgICBsZXQgdHJlZV9sZW5ndGg6IG51bWJlciA9IHBhcnNlX3RyZWUubGVuZ3RoOyBcbiAgICAgICAgbGV0IG91dHB1dCA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJlZV9sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IG5vZGVfdHlwZSA9IHRoaXMuZ2V0VHlwZShwYXJzZV90cmVlW2ldKTtcbiAgICAgICAgICAgIGlmIChub2RlX3R5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gocGFyc2VfdHJlZVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlX3R5cGUgPT09ICdhcnJheScpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2ggPSBwYXJzZV90cmVlW2ldOyAvLyBjb252ZW5pZW5jZSBwdXJwb3NlcyBvbmx5XG4gICAgICAgICAgICAgICAgbGV0IGFyZzogYW55O1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaFsyXSkgeyAvLyBrZXl3b3JkIGFyZ3VtZW50XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbY3Vyc29yXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBtYXRjaFsyXS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhcmcuaGFzT3duUHJvcGVydHkobWF0Y2hbMl1ba10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuc3ByaW50ZignUHJvcGVydHkgXCIlc1wiIGRvZXMgbm90IGV4aXN0JywgbWF0Y2hbMl1ba10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ1ttYXRjaFsyXVtrXV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoWzFdKSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGV4cGxpY2l0KVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W21hdGNoWzFdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGltcGxpY2l0KVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcisrXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoL1tec10vLnRlc3QobWF0Y2hbOF0pICYmICh0aGlzLmdldFR5cGUoYXJnKSAhPSAnbnVtYmVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuc3ByaW50ZignRXhwZWN0aW5nIG51bWJlciBidXQgZm91bmQgJXMnLCB0aGlzLmdldFR5cGUoYXJnKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1hdGNoWzhdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOiBhcmcgPSBhcmcudG9TdHJpbmcoMik7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzogYXJnID0gU3RyaW5nLmZyb21DaGFyQ29kZShhcmcpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZCc6IGFyZyA9IHBhcnNlSW50KGFyZywgMTApOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZSc6IGFyZyA9IG1hdGNoWzddID8gYXJnLnRvRXhwb25lbnRpYWwobWF0Y2hbN10pIDogYXJnLnRvRXhwb25lbnRpYWwoKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOiBhcmcgPSBtYXRjaFs3XSA/IHBhcnNlRmxvYXQoYXJnKS50b0ZpeGVkKG1hdGNoWzddKSA6IHBhcnNlRmxvYXQoYXJnKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ28nOiBhcmcgPSBhcmcudG9TdHJpbmcoOCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzogYXJnID0gKChhcmcgPSBTdHJpbmcoYXJnKSkgJiYgbWF0Y2hbN10gPyBhcmcuc3Vic3RyaW5nKDAsIG1hdGNoWzddKSA6IGFyZyk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1JzogYXJnID0gTWF0aC5hYnMoYXJnKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3gnOiBhcmcgPSBhcmcudG9TdHJpbmcoMTYpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnWCc6IGFyZyA9IGFyZy50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFyZyA9ICgvW2RlZl0vLnRlc3QobWF0Y2hbOF0pICYmIG1hdGNoWzNdICYmIGFyZyA+PSAwID8gJysnKyBhcmcgOiBhcmcpOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgcGFkX2NoYXJhY3RlciA9IG1hdGNoWzRdID8gbWF0Y2hbNF0gPT0gJzAnID8gJzAnIDogbWF0Y2hbNF0uY2hhckF0KDEpIDogJyAnO1xuICAgICAgICAgICAgICAgIGxldCBwYWRfbGVuZ3RoID0gbWF0Y2hbNl0gLSBTdHJpbmcoYXJnKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgbGV0IHBhZCA9IG1hdGNoWzZdID8gdGhpcy5zdHJSZXBlYXQocGFkX2NoYXJhY3RlciwgcGFkX2xlbmd0aCkgOiAnJztcbiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChtYXRjaFs1XSA/IGFyZyArIHBhZCA6IHBhZCArIGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHNwcmludGYobWVzc2FnZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IHN0cmluZyB7XG4gICAgICAgIGlmICghdGhpcy5jYWNoZS5oYXNPd25Qcm9wZXJ0eShtZXNzYWdlKSlcbiAgICAgICAgICAgIHRoaXMuY2FjaGVbbWVzc2FnZV0gPSB0aGlzLnBhcnNlRm9ybWF0KG1lc3NhZ2UpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdCh0aGlzLmNhY2hlW21lc3NhZ2VdLCBhcmdzKTtcbiAgICB9XG59XG5cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3BpcEZvcm1hdCcsIFtdKVxuICAgIC5zZXJ2aWNlKCdwaXBGb3JtYXQnLCBGb3JtYXQpO1xuIiwiZXhwb3J0IGxldCBSZXNldFBhZ2VFdmVudDogc3RyaW5nID0gXCJwaXBSZXNldFBhZ2VcIjtcbmV4cG9ydCBsZXQgUmVzZXRBcmVhRXZlbnQ6IHN0cmluZyA9IFwicGlwUmVzZXRBcmVhXCI7XG5cbmV4cG9ydCBsZXQgUmVzZXRSb290VmFyOiBzdHJpbmcgPSBcIiRyZXNldFwiO1xuZXhwb3J0IGxldCBSZXNldEFyZWFSb290VmFyOiBzdHJpbmcgPSBcIiRyZXNldEFyZWFcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJUGFnZVJlc2V0U2VydmljZSB7XG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICByZXNldEFyZWEoYXJlYTogc3RyaW5nKTogdm9pZDtcbn1cblxuXG5jbGFzcyBQYWdlUmVzZXRTZXJ2aWNlIGltcGxlbWVudHMgSVBhZ2VSZXNldFNlcnZpY2Uge1xuICAgIHByaXZhdGUgX3Jvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBfbG9nOiBuZy5JTG9nU2VydmljZTtcbiAgICBwcml2YXRlIF90aW1lb3V0OiBuZy5JVGltZW91dFNlcnZpY2U7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgICRyb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlLFxuICAgICAgICAkbG9nOiBuZy5JTG9nU2VydmljZSwgXG4gICAgICAgICR0aW1lb3V0OiBuZy5JVGltZW91dFNlcnZpY2VcbiAgICApIHtcbiAgICAgICAgdGhpcy5fcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcbiAgICAgICAgdGhpcy5fbG9nID0gJGxvZztcbiAgICAgICAgdGhpcy5fdGltZW91dCA9ICR0aW1lb3V0O1xuXG4gICAgICAgICRyb290U2NvcGVbUmVzZXRSb290VmFyXSA9IGZhbHNlO1xuICAgICAgICAkcm9vdFNjb3BlW1Jlc2V0QXJlYVJvb3RWYXJdID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2xvZy5kZWJ1ZyhcIlJlc2V0dGluZyB0aGUgZW50aXJlIHBhZ2VcIik7XG4gICAgICAgIHRoaXMucGVyZm9ybVJlc2V0KG51bGwpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNldEFyZWEoYXJlYTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2xvZy5kZWJ1ZyhcIlJlc2V0dGluZyB0aGUgYXJlYSBcIiArIGFyZWEpO1xuICAgICAgICB0aGlzLnBlcmZvcm1SZXNldChhcmVhKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBlcmZvcm1SZXNldChhcmVhPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3Jvb3RTY29wZVtSZXNldFJvb3RWYXJdID0gYXJlYSA9PSBudWxsO1xuICAgICAgICB0aGlzLl9yb290U2NvcGVbUmVzZXRBcmVhUm9vdFZhcl0gPSBhcmVhO1xuXG4gICAgICAgIHRoaXMuX3RpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcm9vdFNjb3BlW1Jlc2V0Um9vdFZhcl0gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RTY29wZVtSZXNldEFyZWFSb290VmFyXSA9IG51bGw7XG4gICAgICAgIH0sIDApO1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBob29rUmVzZXRFdmVudHMoXG4gICAgJHJvb3RTY29wZTogbmcuSVJvb3RTY29wZVNlcnZpY2UsIFxuICAgIHBpcFBhZ2VSZXNldDogSVBhZ2VSZXNldFNlcnZpY2Vcbikge1xuICAgICRyb290U2NvcGUuJG9uKFJlc2V0UGFnZUV2ZW50LCAoKSA9PiB7IHBpcFBhZ2VSZXNldC5yZXNldCgpOyB9KTtcbiAgICAkcm9vdFNjb3BlLiRvbihSZXNldEFyZWFFdmVudCwgKGV2ZW50LCBhcmVhKSA9PiB7IHBpcFBhZ2VSZXNldC5yZXNldEFyZWEoYXJlYSk7IH0pO1xufVxuXG5cbmFuZ3VsYXIubW9kdWxlKCdwaXBQYWdlUmVzZXQnLCBbXSlcbiAgICAuc2VydmljZSgncGlwUGFnZVJlc2V0JywgUGFnZVJlc2V0U2VydmljZSlcbiAgICAucnVuKGhvb2tSZXNldEV2ZW50cyk7XG4iLCJleHBvcnQgaW50ZXJmYWNlIElTY3JvbGxTZXJ2aWNlIHtcbiAgICBzY3JvbGxUbyhwYXJlbnRFbGVtZW50LCBjaGlsZEVsZW1lbnQsIGFuaW1hdGlvbkR1cmF0aW9uKTogdm9pZDtcbn1cblxuY2xhc3MgU2Nyb2xsU2VydmljZSBpbXBsZW1lbnRzIElTY3JvbGxTZXJ2aWNlIHtcblxuICAgIHB1YmxpYyBzY3JvbGxUbyhwYXJlbnRFbGVtZW50LCBjaGlsZEVsZW1lbnQsIGFuaW1hdGlvbkR1cmF0aW9uKTogdm9pZCB7XG4gICAgICAgIGlmICghcGFyZW50RWxlbWVudCB8fCAhY2hpbGRFbGVtZW50KSByZXR1cm47XG4gICAgICAgIGlmIChhbmltYXRpb25EdXJhdGlvbiA9PSB1bmRlZmluZWQpIGFuaW1hdGlvbkR1cmF0aW9uID0gMzAwO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEkKGNoaWxkRWxlbWVudCkucG9zaXRpb24oKSkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIG1vZERpZmY9IE1hdGguYWJzKCQocGFyZW50RWxlbWVudCkuc2Nyb2xsVG9wKCkgLSAkKGNoaWxkRWxlbWVudCkucG9zaXRpb24oKS50b3ApO1xuICAgICAgICAgICAgaWYgKG1vZERpZmYgPCAyMCkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHNjcm9sbFRvID0gJChwYXJlbnRFbGVtZW50KS5zY3JvbGxUb3AoKSArICgkKGNoaWxkRWxlbWVudCkucG9zaXRpb24oKS50b3AgLSAyMCk7XG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uRHVyYXRpb24gPiAwKVxuICAgICAgICAgICAgICAgICQocGFyZW50RWxlbWVudCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG8gKyAncHgnXG4gICAgICAgICAgICAgICAgfSwgYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICB9LCAxMDApO1xuICAgIH1cblxufVxuXG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaXBTY3JvbGwnLCBbXSlcbiAgICAuc2VydmljZSgncGlwU2Nyb2xsJywgU2Nyb2xsU2VydmljZSk7XG4iLCJleHBvcnQgaW50ZXJmYWNlIElTeXN0ZW1JbmZvIHtcbiAgICBicm93c2VyTmFtZTogc3RyaW5nO1xuICAgIGJyb3dzZXJWZXJzaW9uOiBzdHJpbmc7XG4gICAgcGxhdGZvcm06IHN0cmluZztcbiAgICBvczogc3RyaW5nO1xuXG4gICAgaXNEZXNrdG9wKCk6IGJvb2xlYW47XG4gICAgaXNNb2JpbGUoKTogYm9vbGVhbjtcbiAgICBpc0NvcmRvdmEoKTogYm9vbGVhbjtcbiAgICBpc1N1cHBvcnRlZChzdXBwb3J0ZWQ/OiBhbnkpOiBib29sZWFuO1xufVxuXG5cbmNsYXNzIFN5c3RlbUluZm8gaW1wbGVtZW50cyBJU3lzdGVtSW5mbyB7XG4gICAgcHJpdmF0ZSBfd2luZG93OiBuZy5JV2luZG93U2VydmljZTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcigkd2luZG93OiBuZy5JV2luZG93U2VydmljZSkge1xuICAgICAgICBcIm5nSW5qZWN0XCI7XG5cbiAgICAgICAgdGhpcy5fd2luZG93ID0gJHdpbmRvdztcbiAgICB9XG5cbiAgICAvLyB0b2RvIGFkZCBzdXBwb3J0IGZvciBpUGhvbmVcbiAgICBwdWJsaWMgZ2V0IGJyb3dzZXJOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIGxldCB1YSA9IHRoaXMuX3dpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gICAgICAgIGlmICh1YS5zZWFyY2goL0VkZ2UvKSA+IC0xKSByZXR1cm4gXCJlZGdlXCI7XG4gICAgICAgIGlmICh1YS5zZWFyY2goL01TSUUvKSA+IC0xKSByZXR1cm4gXCJpZVwiO1xuICAgICAgICBpZiAodWEuc2VhcmNoKC9UcmlkZW50LykgPiAtMSkgcmV0dXJuIFwiaWVcIjtcbiAgICAgICAgaWYgKHVhLnNlYXJjaCgvRmlyZWZveC8pID4gLTEpIHJldHVybiBcImZpcmVmb3hcIjtcbiAgICAgICAgaWYgKHVhLnNlYXJjaCgvT3BlcmEvKSA+IC0xKSByZXR1cm4gXCJvcGVyYVwiO1xuICAgICAgICBpZiAodWEuc2VhcmNoKC9PUFIvKSA+IC0xKSByZXR1cm4gXCJvcGVyYVwiO1xuICAgICAgICBpZiAodWEuc2VhcmNoKC9ZYUJyb3dzZXIvKSA+IC0xKSByZXR1cm4gXCJ5YWJyb3dzZXJcIjtcbiAgICAgICAgaWYgKHVhLnNlYXJjaCgvQ2hyb21lLykgPiAtMSkgcmV0dXJuIFwiY2hyb21lXCI7XG4gICAgICAgIGlmICh1YS5zZWFyY2goL1NhZmFyaS8pID4gLTEpIHJldHVybiBcInNhZmFyaVwiO1xuICAgICAgICBpZiAodWEuc2VhcmNoKC9NYXh0aG9uLykgPiAtMSkgcmV0dXJuIFwibWF4dGhvblwiO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIFwidW5rbm93blwiO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgYnJvd3NlclZlcnNpb24oKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHZlcnNpb247XG4gICAgICAgIGxldCB1YSA9IHRoaXMuX3dpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgICBsZXQgYnJvd3NlciA9IHRoaXMuYnJvd3Nlck5hbWU7XG5cbiAgICAgICAgc3dpdGNoIChicm93c2VyKSB7XG4gICAgICAgICAgICBjYXNlIFwiZWRnZVwiOlxuICAgICAgICAgICAgICAgIHZlcnNpb24gPSAodWEuc3BsaXQoXCJFZGdlXCIpWzFdKS5zcGxpdChcIi9cIilbMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaWVcIjpcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gKHVhLnNwbGl0KFwiTVNJRSBcIilbMV0pLnNwbGl0KFwiO1wiKVswXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJpZTExXCI6XG4gICAgICAgICAgICAgICAgYnJvd3NlciA9IFwiaWVcIjtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gKHVhLnNwbGl0KFwiOyBydjpcIilbMV0pLnNwbGl0KFwiKVwiKVswXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJmaXJlZm94XCI6XG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9IHVhLnNwbGl0KFwiRmlyZWZveC9cIilbMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwib3BlcmFcIjpcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gdWEuc3BsaXQoXCJWZXJzaW9uL1wiKVsxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJvcGVyYVdlYmtpdFwiOlxuICAgICAgICAgICAgICAgIHZlcnNpb24gPSB1YS5zcGxpdChcIk9QUi9cIilbMV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwieWFicm93c2VyXCI6XG4gICAgICAgICAgICAgICAgdmVyc2lvbiA9ICh1YS5zcGxpdChcIllhQnJvd3Nlci9cIilbMV0pLnNwbGl0KFwiIFwiKVswXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaHJvbWVcIjpcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gKHVhLnNwbGl0KFwiQ2hyb21lL1wiKVsxXSkuc3BsaXQoXCIgXCIpWzBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInNhZmFyaVwiOlxuICAgICAgICAgICAgICAgIHZlcnNpb24gPSAodWEuc3BsaXQoXCJWZXJzaW9uL1wiKVsxXSkuc3BsaXQoXCIgXCIpWzBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1heHRob25cIjpcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gdWEuc3BsaXQoXCJNYXh0aG9uL1wiKVsxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2ZXJzaW9uO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0IHBsYXRmb3JtKCk6IHN0cmluZyB7XG4gICAgICAgIGxldCB1YSA9IHRoaXMuX3dpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gICAgICAgIGlmICgvaXBob25lfGlwYWR8aXBvZHxhbmRyb2lkfGJsYWNrYmVycnl8bWluaXx3aW5kb3dzXFxzY2V8cGFsbS9pLnRlc3QodWEudG9Mb3dlckNhc2UoKSkpIFxuICAgICAgICAgICAgcmV0dXJuICdtb2JpbGUnO1xuXG4gICAgICAgIHJldHVybiAnZGVza3RvcCc7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBvcygpOiBzdHJpbmcge1xuICAgICAgICBsZXQgdWEgPSB0aGlzLl93aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IG9zQWxsID0gKC8od2luZG93c3xtYWN8YW5kcm9pZHxsaW51eHxibGFja2JlcnJ5fHN1bm9zfHNvbGFyaXN8aXBob25lKS8uZXhlYyh1YS50b0xvd2VyQ2FzZSgpKSB8fCBbdWFdKVswXS5yZXBsYWNlKCdzdW5vcycsICdzb2xhcmlzJyk7XG4gICAgICAgICAgICBsZXQgb3NBbmRyb2lkID0gKC8oYW5kcm9pZCkvLmV4ZWModWEudG9Mb3dlckNhc2UoKSkgfHwgJycpO1xuICAgICAgICAgICAgcmV0dXJuIG9zQW5kcm9pZCAmJiAob3NBbmRyb2lkID09ICdhbmRyb2lkJyB8fCAob3NBbmRyb2lkWzBdID09ICdhbmRyb2lkJykpID8gJ2FuZHJvaWQnIDogb3NBbGw7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuICd1bmtub3duJ1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGlzRGVza3RvcCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGxhdGZvcm0gPT0gJ2Rlc2t0b3AnO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc01vYmlsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGxhdGZvcm0gPT0gJ21vYmlsZSc7XG4gICAgfVxuXG4gICAgLy8gVG9kbzogY29tcGxldGUgaW1wbGVtZW50YXRpb25cbiAgICBwdWJsaWMgaXNDb3Jkb3ZhKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVG9kbzogTW92ZSB0byBlcnJvcnNcbiAgICBwdWJsaWMgaXNTdXBwb3J0ZWQoc3VwcG9ydGVkPzogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghc3VwcG9ydGVkKSBcbiAgICAgICAgICAgIHN1cHBvcnRlZCA9IHtcbiAgICAgICAgICAgICAgICBlZGdlOiAxMSxcbiAgICAgICAgICAgICAgICBpZTogMTEsXG4gICAgICAgICAgICAgICAgZmlyZWZveDogNDMsIC8vNCwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgICAgICBvcGVyYTogMzUsXG4gICAgICAgICAgICAgICAgY2hyb21lOiA0N1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBsZXQgYnJvd3NlciA9IHRoaXMuYnJvd3Nlck5hbWU7XG4gICAgICAgIGxldCB2ZXJzaW9uID0gdGhpcy5icm93c2VyVmVyc2lvbjtcbiAgICAgICAgdmVyc2lvbiA9IHZlcnNpb24uc3BsaXQoXCIuXCIpWzBdXG5cbiAgICAgICAgaWYgKGJyb3dzZXIgJiYgc3VwcG9ydGVkW2Jyb3dzZXJdICYmIHZlcnNpb24gPj0gc3VwcG9ydGVkW2Jyb3dzZXJdKSBcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgncGlwU3lzdGVtSW5mbycsIFtdKVxuICAgIC5zZXJ2aWNlKCdwaXBTeXN0ZW1JbmZvJywgU3lzdGVtSW5mbyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRhZ3Mge1xuICAgIG5vcm1hbGl6ZU9uZSh0YWc6IHN0cmluZyk6IHN0cmluZztcbiAgICBjb21wcmVzc09uZSh0YWc6IHN0cmluZyk6IHN0cmluZztcbiAgICBlcXVhbCh0YWcxOiBzdHJpbmcsIHRhZzI6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgbm9ybWFsaXplQWxsKHRhZ3M6IGFueSk6IHN0cmluZ1tdO1xuICAgIGNvbXByZXNzQWxsKHRhZ3M6IGFueSk6IHN0cmluZ1tdO1xuICAgIGV4dHJhY3QoZW50aXR5OiBhbnksIHNlYXJjaEZpZWxkcz86IHN0cmluZ1tdKTogc3RyaW5nW107XG59XG5cblxuY2xhc3MgVGFncyBpbXBsZW1lbnRzIElUYWdzIHtcblxuICAgIHB1YmxpYyBub3JtYWxpemVPbmUodGFnOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGFnIFxuICAgICAgICAgICAgPyBfLnRyaW0odGFnLnJlcGxhY2UoLyhffCMpKy9nLCAnICcpKVxuICAgICAgICAgICAgOiBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb21wcmVzc09uZSh0YWc6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0YWdcbiAgICAgICAgICAgID8gdGFnLnJlcGxhY2UoLyggfF98IykvZywgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZXF1YWwodGFnMTogc3RyaW5nLCB0YWcyOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRhZzEgPT0gbnVsbCAmJiB0YWcyID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHRhZzEgPT0gbnVsbCB8fCB0YWcyID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXByZXNzT25lKHRhZzEpID09IHRoaXMuY29tcHJlc3NPbmUodGFnMik7XG4gICAgfVxuXG4gICAgcHVibGljIG5vcm1hbGl6ZUFsbCh0YWdzOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmIChfLmlzU3RyaW5nKHRhZ3MpKVxuICAgICAgICAgICAgdGFncyA9IHRhZ3Muc3BsaXQoLyggfCx8OykrLyk7XG5cbiAgICAgICAgdGFncyA9IF8ubWFwKHRhZ3MsICh0YWc6IHN0cmluZykgPT4gdGhpcy5ub3JtYWxpemVPbmUodGFnKSk7XG5cbiAgICAgICAgcmV0dXJuIHRhZ3M7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbXByZXNzQWxsKHRhZ3M6IGFueSk6IHN0cmluZ1tdIHtcbiAgICAgICAgaWYgKF8uaXNTdHJpbmcodGFncykpXG4gICAgICAgICAgICB0YWdzID0gdGFncy5zcGxpdCgvKCB8LHw7KSsvKTtcblxuICAgICAgICB0YWdzID0gXy5tYXAodGFncywgKHRhZzogc3RyaW5nKSA9PiB0aGlzLmNvbXByZXNzT25lKHRhZykpO1xuXG4gICAgICAgIHJldHVybiB0YWdzO1xuICAgIH1cblxuICAgIHB1YmxpYyBleHRyYWN0KGVudGl0eTogYW55LCBzZWFyY2hGaWVsZHM/OiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IHRhZ3MgPSB0aGlzLm5vcm1hbGl6ZUFsbChlbnRpdHkudGFncyk7XG5cbiAgICAgICAgXy5lYWNoKHNlYXJjaEZpZWxkcywgKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICBsZXQgdGV4dCA9IGVudGl0eVtmaWVsZF0gfHwgJyc7XG5cbiAgICAgICAgICAgIGlmICh0ZXh0ICE9ICcnKSB7XG4gICAgICAgICAgICAgICAgbGV0IGhhc2hUYWdzID0gdGV4dC5tYXRjaCgvI1xcdysvZyk7XG4gICAgICAgICAgICAgICAgdGFncyA9IHRhZ3MuY29uY2F0KHRoaXMubm9ybWFsaXplQWxsKGhhc2hUYWdzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBfLnVuaXEodGFncyk7XG4gICAgfVxufVxuXG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdwaXBUYWdzJywgW10pXG4gICAgLnNlcnZpY2UoJ3BpcFRhZ3MnLCBUYWdzKTtcbiIsImV4cG9ydCBpbnRlcmZhY2UgSVRpbWVyU2VydmljZSB7XG4gICAgaXNTdGFydGVkKCk6IGJvb2xlYW47XG5cbiAgICBhZGRFdmVudChldmVudDogc3RyaW5nLCB0aW1lb3V0OiBudW1iZXIpOiB2b2lkO1xuICAgIHJlbW92ZUV2ZW50KGV2ZW50OiBzdHJpbmcpOiB2b2lkO1xuICAgIGNsZWFyRXZlbnRzKCk6IHZvaWQ7XG5cbiAgICBzdGFydCgpOiB2b2lkO1xuICAgIHN0b3AoKTogdm9pZDtcbn1cblxuXG5jbGFzcyBUaW1lckV2ZW50IHtcbiAgICBwdWJsaWMgZXZlbnQ6IHN0cmluZztcbiAgICBwdWJsaWMgdGltZW91dDogbnVtYmVyO1xuICAgIHB1YmxpYyBpbnRlcnZhbDogYW55O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGV2ZW50OiBzdHJpbmcsIHRpbWVvdXQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgfVxufVxuXG5cbmxldCBEZWZhdWx0RXZlbnRzOiBUaW1lckV2ZW50W10gPSBbXG4gICAgbmV3IFRpbWVyRXZlbnQoJ3BpcEF1dG9QdWxsQ2hhbmdlcycsIDYwMDAwKSwgLy8gMSBtaW5cbiAgICBuZXcgVGltZXJFdmVudCgncGlwQXV0b1VwZGF0ZVBhZ2UnLCAxNTAwMCksIC8vIDE1IHNlY1xuICAgIG5ldyBUaW1lckV2ZW50KCdwaXBBdXRvVXBkYXRlQ29sbGVjdGlvbicsIDMwMDAwMCkgLy8gNSBtaW5cbl07XG5cblxuY2xhc3MgVGltZXJTZXJ2aWNlIGltcGxlbWVudHMgSVRpbWVyU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZTtcbiAgICBwcml2YXRlIF9sb2c6IG5nLklMb2dTZXJ2aWNlO1xuICAgIHByaXZhdGUgX2ludGVydmFsOiBuZy5JSW50ZXJ2YWxTZXJ2aWNlOyAgICAgICAgXG4gICAgcHJpdmF0ZSBfc3RhcnRlZCA9IGZhbHNlO1xuICAgIHByaXZhdGUgX2V2ZW50czogVGltZXJFdmVudFtdID0gXy5jbG9uZURlZXAoRGVmYXVsdEV2ZW50cyk7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgICRyb290U2NvcGU6IG5nLklSb290U2NvcGVTZXJ2aWNlLFxuICAgICAgICAkbG9nOiBuZy5JTG9nU2VydmljZSwgXG4gICAgICAgICRpbnRlcnZhbDogbmcuSUludGVydmFsU2VydmljZVxuICAgICkge1xuICAgICAgICBcIm5nSW5qZWN0XCI7XG5cbiAgICAgICAgdGhpcy5fcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcbiAgICAgICAgdGhpcy5fbG9nID0gJGxvZztcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSAkaW50ZXJ2YWw7XG4gICAgfVxuXG4gICAgcHVibGljIGlzU3RhcnRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0ZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEV2ZW50KGV2ZW50OiBzdHJpbmcsIHRpbWVvdXQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB2YXIgZXhpc3RpbmdFdmVudCA9IF8uZmluZCh0aGlzLl9ldmVudHMsIChlKSA9PiBlLmV2ZW50ID09IGV2ZW50KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nRXZlbnQgIT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICAgIGxldCBuZXdFdmVudCA9IDxUaW1lckV2ZW50PiB7XG4gICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2V2ZW50cy5wdXNoKG5ld0V2ZW50KTtcblxuICAgICAgICBpZiAodGhpcy5fc3RhcnRlZClcbiAgICAgICAgICAgIHRoaXMuc3RhcnRFdmVudChuZXdFdmVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZUV2ZW50KGV2ZW50OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX2V2ZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgbGV0IGV4aXN0aW5nRXZlbnQgPSB0aGlzLl9ldmVudHNbaV07XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdFdmVudC5ldmVudCA9PSBldmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcEV2ZW50KGV4aXN0aW5nRXZlbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYXJFdmVudHMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBbXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXJ0RXZlbnQoZXZlbnQ6IFRpbWVyRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgZXZlbnQuaW50ZXJ2YWwgPSB0aGlzLl9pbnRlcnZhbChcbiAgICAgICAgICAgICgpID0+IHsgXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nLmRlYnVnKCdHZW5lcmF0ZWQgdGltZXIgZXZlbnQgJyArIGV2ZW50LmV2ZW50KTsgXG4gICAgICAgICAgICAgICAgdGhpcy5fcm9vdFNjb3BlLiRlbWl0KGV2ZW50LmV2ZW50KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV2ZW50LnRpbWVvdXRcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RvcEV2ZW50KGV2ZW50OiBUaW1lckV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmIChldmVudC5pbnRlcnZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVydmFsLmNhbmNlbChldmVudC5pbnRlcnZhbCk7XG4gICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50LmludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGFydCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXJ0ZWQpIHJldHVybjtcblxuICAgICAgICBfLmVhY2godGhpcy5fZXZlbnRzLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRFdmVudChldmVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdG9wKCk6IHZvaWQge1xuICAgICAgICBfLmVhY2godGhpcy5fZXZlbnRzLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RvcEV2ZW50KGV2ZW50KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuXG5hbmd1bGFyLm1vZHVsZSgncGlwVGltZXInLCBbXSlcbiAgICAuc2VydmljZSgncGlwVGltZXInLCBUaW1lclNlcnZpY2UpO1xuIiwiaW1wb3J0ICcuL0Zvcm1hdCc7XG5pbXBvcnQgJy4vVGltZXJTZXJ2aWNlJztcbmltcG9ydCAnLi9TY3JvbGxTZXJ2aWNlJztcbmltcG9ydCAnLi9UYWdzJztcbmltcG9ydCAnLi9Db2Rlcyc7XG5pbXBvcnQgJy4vU3lzdGVtSW5mbyc7XG5pbXBvcnQgJy4vUGFnZVJlc2V0U2VydmljZSc7XG5cbmV4cG9ydCAqIGZyb20gJy4vRm9ybWF0JztcbmV4cG9ydCAqIGZyb20gJy4vVGltZXJTZXJ2aWNlJztcbmV4cG9ydCAqIGZyb20gJy4vU2Nyb2xsU2VydmljZSc7XG5leHBvcnQgKiBmcm9tICcuL1RhZ3MnO1xuZXhwb3J0ICogZnJvbSAnLi9Db2Rlcyc7XG5leHBvcnQgKiBmcm9tICcuL1N5c3RlbUluZm8nO1xuZXhwb3J0ICogZnJvbSAnLi9QYWdlUmVzZXRTZXJ2aWNlJzsiXX0="}