{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/common/ButtonsUpload.ts","src/dependencies/translate.ts","src/fail/FileFailController.ts","src/fail/index.ts","src/files.ts","src/select/FileSelectController.ts","src/service/FileUploadService.ts","src/start/FileStartController.ts","src/start/index.ts","src/success/FileSuccessController.ts","src/success/index.ts","src/upload/FileUploadController.ts","src/upload/index.ts","temp/pip-webui-files-html.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pip","files","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ButtonsUpload","filerTranslate","$injector","has","get","key","pipTranslate","translate","$inject","filter","Object","defineProperty","value","FileFailController","$scope","_this","$watch","error","FileFailController_1","FileFailBindings","buttons","name","type","FileFailChanges","fileFailComponent","controller","bindings","templateUrl","FileSelectController_1","FileUploadService_1","fileModelDirective","$parse","scope","element","attrs","model","fileModel","assign","bind","$apply","modelSetter","fileSelectDirective","localFile","FileSelectController","controllerAs","directive","./fail/index","./select/FileSelectController","./service/FileUploadService","./start/index","./success/index","./upload/index","6","item","prototype","onUploadButtonClick","$","click","onDeleteButtonClick","forml","document","getElementById","reset","7","FileUploadState","All","Start","Upload","Fail","FileUploadService","$http","upload","url","file","callback","fd","FormData","progress","lengthComputable","loaded","total","headers","Content-Type","undefined","success","response","state","8","FileStartController","9","fileStartDirective","FileStartController_1","10","FileSuccessController","11","FileSuccessController_1","FileSuccessBindings","fileSuccessDirective","restrict","replace","12","FileUploadButtons","FileUploadController","buttonFunction","uploadButtons","failButtons","title","onCancel","onRetry","startButtons","onAbort","$onChanges","changes","currentValue","cancel","retry","13","FileUploadController_1","FileUploadBindings","FileUploadChanges","fileUploadDirective","angular","component","./FileUploadController","14","run","$templateCache","put"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,MAAAJ,EAAAK,MAAAL,EAAAK,SAAAC,MAAAX,MAAA,WAAA,MAAA,SAAAY,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAjB,GAAA,GAAAsB,OAAA,uBAAAL,EAAA,IAAA,MAAAjB,GAAAuB,KAAA,mBAAAvB,EAAA,GAAAwB,GAAAV,EAAAG,IAAAhB,WAAAY,GAAAI,GAAA,GAAAQ,KAAAD,EAAAvB,QAAA,SAAAW,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAvB,QAAAW,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAhB,QAAA,IAAA,GAAAoB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAlB,EAAAD,gECAA,IAAA2B,GAAA,WAAA,QAAAA,MAGA,MAAAA,KAHa3B,GAAA2B,cAAAA,2BCOb,WACI,qBAEQC,GAAoBC,SACLA,EAACC,IAAA,gBAEdD,EAACE,IAAY,gBAAA,WACf,UAAOC,GACV,MAAAC,GAAAA,EAAAC,UAAAF,IAAAA,EAAAA,GANLJ,EAAAO,SAAwB,qBAUnBlC,OAAO,yBAEXmC,OAAA,YAAAR,0CCJLS,QAAAC,eAAAtC,EAAA,cAAAuC,OAAA,OAMIC,GAAA,mBAAAA,GAQCC,GAHG,cACIC,GAAKlC,IACTiC,GAAEE,OAAA,QAAA,SAAAC,GACLF,EAAAE,MAAAA,IAdQ,SAOMT,SAAA,UAPNK,oDChBb,YAYAH,QAAMC,eAAgBtC,EAAsB,cAAAuC,OAAA,OACxCM,GAAuB1B,EAAA,wBACvB2B,GACAC,QAAM,eACNC,KAAK,WACRC,KAAA,YAEDL,MAAA,aAOAM,EAAC,WAAD,QAAAA,MAPa,MAAAA,QAUTA,gBAAYA,KACZC,IACAC,WAAWP,EAAsBL,mBACnCa,SAAAP,EAGDQ,YAAA,0CAOIrD,OAAA,0GC1CL,YACAoC,QAAAC,eAAAtC,EAAA,cAAAuC,OAAA,GAEA,IAAAgB,GAAyBpC,EAAA,iCACzBqC,EAAwBrC,EAAA,8BACxBA,GAAA,mBACAA,EAAA,kBAEAA,EAAC,mBACG,mCAIQsC,GAAaC,8BAGL,SAEJ,SAAYC,EAACC,EAAUC,MACnBC,GAAMJ,EAAOG,EAAAE,aACTD,EAAYE,SACbC,KAAA,SAAA,WACJN,EAAAO,OAAA,WACNC,EAAAR,EAAAC,EAAA,GAAAlD,MAAA,kBAOD0D,qBAEI,aACH,EACDT,OACAU,UAAc,KAEhBjB,WAAAG,EAAAe,qBACLC,aAAA,KAEMjB,YAAA,4BA5BInB,SAAA,kBAgCHlC,OAAA,YACA,yBACF,qEAOLuE,UAAA,YAAAf,kFChDLgB,eAAA,EAAAC,gCAAA,EAAAC,8BAAA,EAAAC,gBAAA,EAAAC,kBAAA,GAAAC,iBAAA,KAAAC,GAAA,SAAA5D,EAAAlB,EAAAD,sCAImBA,EAAA,cAAAuC,OAAA,UACM,mBAEb+B,GAAsB7B,GAC1B,UACHjC,MAAA6D,UAAA5B,EAAA,UAEMA,EAAAE,OAAA,eAAA,SAAAqC,GACDvC,EAAoB,UAACuC,aANT7C,SAAc,YAUX8C,UAAKC,oBAAA,WACtBC,EAAA,aAAYC,SAGhBd,EAACW,UAAAI,oBAAA,WACL7E,KAAA6D,UAAA,IAAC,IAAAiB,GAAAC,SAAAC,eAAA,WArBYF,GAAAG,4CCNbC,GAAA,SAAAvE,EAAAlB,EAAAD,uBAKAsC,eAAAtC,EAAC,cAAAuC,OAAA,GAAD,IALAoD,GAAA,WACkB,QAAAA,MAEA,MAAAA,KAHLA,GAAAC,KAAA,QAAA,SAAe,QAc5BD,EAAAE,MAAA,UAKIC,OAAA,WAA4BC,KAAA,SAFrBJ,gBAAqBA,KAEyBK,GAAC,WAE/C,QAAAA,GAAAC,GAAPzF,KAAAyF,MAAAA,EAEIzF,KAAIoC,MAAmB,cAGVqC,UAAKiB,OAAA,SAAAC,EAAAC,EAAAC,GAClB,GAAI3D,GAAMlC,KACN8F,EAAC,GAAMC,mBACP,OAAAH,iBACY,aACJT,EAAME,sBACFM,EAAIG,wBAEZE,SAAC,SAAA7F,GACJA,EAAA8F,mBACU/D,EAAA8D,SAAgB7F,EAAA+F,OAAW/F,EAAAgG,MAAA,OAKtCC,SAAIC,eAASC,UACfC,QAAA,SAAAC,KACIC,MAACtB,EAAcG,OACjBO,GACAA,EAAUW,EAAY,cAER,SAAaA,GAC5BtE,EAAAuE,MAAAtB,EAAAI,KACNrD,EAAAE,MAAAoE,EAAA3F,OAAA2F,EACLX,GAACA,EAAA,KAAAW,sCChCGE,GAAA,SAAA/F,EAAAlB,EAAYD,sCAAZA,EAQC,cAAAuC,OAAA,UAZ2B,mBAUpB4E,GAAgB1E,GACpB,UACH,IAAAC,GAAAlC,IACLA,MAAAgG,SAAA,EAAC/D,EAAAE,OAAA,WAAA,SAAA6D,GAfY9D,EAAA8D,SAAAA,aAWSrE,SAAY,cCtBlCnC,GAAAmH,oBAAAA,OAIIC,GAAM,SAAAjG,EAAkBlB,EAAGD,sCAEVA,EAAA,cAAAuC,OAAA,UACDpB,EAAA,wCAEZkG,aACI,aACI,aACEC,EAAWH,iCACP,eAEdpE,QAAa,eACfC,KAAA,WAEKC,KAAA,YACFuD,SAAO,iBAIXlD,YAAA,6HCT4B,IAAAiE,IAAA,SAAApG,EAAAlB,EAAAD,uBAKtBsC,eAAAtC,EAAA,cAAUuC,OAAjB,OACJiF,GAAA,WARA,QAQCA,KARYhH,KAAAyC,KAAA,uDCZbjD,GAAAwH,sBAAAA,OAWIC,IAAA,SAAStG,EAAclB,EAAAD,uBAEvBsC,eAAiBtC,EAAA,cAAAuC,OAAA,OACnBmF,GAAAvG,EAAA,2BAEDwG,GAEI5E,QAAM,oBACC,gBACA,4BAGA6E,IACAC,SAAA,IACPC,SAAA,EAGD1E,WAAOsE,EAAAF,mCACK,cACEG,EAGbrE,YAAA,sICPJ,KAAAyE,IAAA,SAAA5G,EAAAlB,EAAAD,eAADqC,QAACC,eAAAtC,EAAA,cAAAuC,OAAA,GAJY,IAAAyF,GAAA,WAMb,QAAAA,YAcQA,QAHGA,kBAAqBA,QAMf,mBAELC,GAAmBxF,oBAEdjC,UACJoC,MAAC,KACFpC,KAAK0H,sBACDC,sBACFC,cACLC,MAAA,SAAAjD,MAAA,WAAA1C,EAAA4F,cACJD,MAAA,QAAAjD,MAAA,WAAA1C,EAAA6F,aAIO/H,KAAAgI,eACKH,MAAQ,QAAQjD,MAAM,WAAa1C,EAAA+F,uBAdnCtG,SAAmB,YAmB3B8C,UAAAyD,WAAA,SAAAC,GAEGA,EAAQ1B,QACRzG,KAAKyG,MAAQ0B,EAAQ1B,MAAM2B,cAGlCD,EAAAnC,WAEMhG,KAAAgG,SAAAmC,EAAAnC,SAAQoC,cACqBD,EAAK/F,QACxCpC,KAAAoC,MAAA+F,EAAA/F,MAAAgG,iBAGuC3D,UAAeqD,SAAQ,WAC9D9H,KAAA0H,eAAAW,QAEMrI,KAAA0H,eAAAW,YACiC5D,UAAesD,QAAQ,WAC9D/H,KAAA0H,eAAAY,OAELtI,KAAA0H,eAACY,SAzDYb,EAAAhD,UAAAwD,QAAA,uECdbzI,GAAMiI,qBAA0CA,OAE5Cc,IAAA,SAAS5H,EAAclB,EAAAD,uBAEvBsC,eAAgBtC,EAAA,cAAAuC,OAAA,OAChByG,GAAkB7H,EAAA,0BAClB8H,GACAf,eAAU,uBACbnF,QAAA,eAEDH,MAAA,aAAAI,KAAA,WAUAiE,MAAC,YAADhE,KAAA,YAVAuD,SAUC,gBAEK0C,EAAmB,WACrB,QAAAA,MAEA,MAAAA,KAIJlJ,GAACkJ,kBAAAA,KAEGC,eACYH,EAAuBf,8BAC9BgB,EAEL3F,YAAC,sCClDL8F,QACAnJ,OAAA,0BACAoJ,UAAA,gBAAAF,QAGAG,yBAAA,KAAAC,IAAA,SAAApI,EAAAlB,EAAAD,IACA,SAAAC,GACA,IACAA,EAAAmJ,QAAAnJ,OAAA,sBACA,MAAAU,GACAV,EAAAmJ,QAAAnJ,OAAA,yBAEAA,EAAAuJ,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,qBACA,6sBAIA,SAAAzJ,GACA,IACAA,EAAAmJ,QAAAnJ,OAAA,sBACA,MAAAU,GACAV,EAAAmJ,QAAAnJ,OAAA,yBAEAA,EAAAuJ,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,yBACA,wwBAIA,SAAAzJ,GACA,IACAA,EAAAmJ,QAAAnJ,OAAA,sBACA,MAAAU,GACAV,EAAAmJ,QAAAnJ,OAAA,yBAEAA,EAAAuJ,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,uBACA,k1BAIA,SAAAzJ,GACA,IACAA,EAAAmJ,QAAAnJ,OAAA,sBACA,MAAAU,GACAV,EAAAmJ,QAAAnJ,OAAA,yBAEAA,EAAAuJ,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA,2BACA,4nBAIA,SAAAzJ,GACA,IACAA,EAAAmJ,QAAAnJ,OAAA,sBACA,MAAAU,GACAV,EAAAmJ,QAAAnJ,OAAA,yBAEAA,EAAAuJ,KAAA,iBAAA,SAAAC,GACAA,EAAAC,IAAA","file":"pip-webui-files.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export class ButtonsUpload {\n    public title: string;\n    public click: Function;\n}","/**\n * @file Optional filter to translate string resources\n * @copyright Digital Living Software Corp. 2014-2016\n */\n \n/* global angular */\n\n(() => {\n    'use strict';\n    function filerTranslate($injector: angular.auto.IInjectorService) {\n        let pipTranslate: any = $injector.has('pipTranslate') \n            ? $injector.get('pipTranslate') : null;\n\n        return (key: string) => {\n            return pipTranslate  ? pipTranslate.translate(key) || key : key;\n        }\n    }\n\n    angular.module('pipFiles.Translate', [])\n        .filter('translate', filerTranslate);\n\n})();","\nimport {\n    ButtonsUpload\n} from \"../common/ButtonsUpload\";\n\nimport {\n    FileFailChanges,\n    IFileFailBindings\n} from \"./index\";\n\nexport interface IFileFailController {\n    name: string;\n    type: string;\n    error: string;\n    buttons: ButtonsUpload[];\n}\n\nexport class FileFailController implements IFileFailController, IFileFailBindings {\n    public name: string;\n    public type: string;\n    public error: string;\n    public buttons: ButtonsUpload[];\n\n    constructor($scope: ng.IScope) {\n        \"ngInject\";\n        \n        // Init parameters\n        \n        $scope.$watch('error', (error: string) => {\n            this.error = error;\n        })\n    }\n}","\nimport { FileFailController } from './FileFailController';\nimport { ButtonsUpload } from '../common/ButtonsUpload';\n\nexport interface IFileFailBindings {\n    [key: string]: any;\n\n    buttons: any,\n    name: any,\n    type: any,\n    error: any\n}\n\nconst FileFailBindings: IFileFailBindings = {\n    buttons: '<?pipButtons',\n    name: '<pipName',\n    type: '<?pipType',\n    error: '<pipError'\n}\n\nexport class FileFailChanges implements ng.IOnChangesObject, IFileFailBindings {\n    [key: string]: ng.IChangesObject<any>;\n\n    buttons: ng.IChangesObject<ButtonsUpload[]>;\n    error: ng.IChangesObject<string>;\n    name: ng.IChangesObject<string>;\n    type: ng.IChangesObject<string>;\n}\n\nconst fileFailComponent: ng.IComponentOptions = {\n    controller: FileFailController,\n    bindings: FileFailBindings,\n    templateUrl: 'fail/FileFail.html'\n};\n\n\n(() => {\n\n    angular\n        .module('pipFiles.FailUpload', [])\n        .component('pipFailUpload', fileFailComponent)\n\n\n})();\n","﻿\nimport {FileSelectController} from './select/FileSelectController';\nimport {FileUploadService} from './service/FileUploadService';\n\nimport './success/index';\nimport './upload/index';\nimport './start/index';\nimport './fail/index';\n\n(() => {\n    function fileModelDirective($parse: any) {\n        \"ngInject\";\n\n        return {\n            restrict: 'A',\n            link: (scope, element, attrs) => {\n                let model = $parse(attrs.fileModel);\n                let modelSetter = model.assign;\n                \n                element.bind('change', () => {\n                    scope.$apply(() => {\n                        modelSetter(scope, element[0].files[0]);\n                    });\n                });\n            }\n        };\n    }\n\n    function fileSelectDirective() {\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                localFile: '='\n            },\n            controller: FileSelectController,\n            controllerAs: 'vm',\n            templateUrl: 'select/FileSelect.html'\n        };\n    }\n\n    angular\n        .module('pipFiles', [\n            'pipFiles.SuccessUpload',\n            'pipFiles.FileUpload',\n            'pipFiles.StartUpload',\n            'pipFiles.FailUpload'\n        ])\n        .directive('fileModel', fileModelDirective)\n        .directive('pipFileSelect', fileSelectDirective)\n       //.directive('pipFailUpload', fileFailDirective)\n        .service('pipFileUpload', FileUploadService);\n\n\n})();\n","export interface IFileSelectController {\n    localFile: any;\n    onUploadButtonClick(): void ;\n    onDeleteButtonClick(): void;\n}\n\nexport class FileSelectController implements IFileSelectController {\n    public localFile: any;\n    \n    constructor($scope: ng.IScope) {\n        \"ngInject\";\n        this.localFile = $scope['localFile'];\n        $scope.$watch('vm.localFile', (item) => {\n            $scope['localFile'] = item;\n        }) \n    }\n\n    public onUploadButtonClick(): void {\n        $('#inp_file').click();\n    }\n\n    public onDeleteButtonClick(): void {\n        this.localFile = null;\n        let forml = document.getElementById('inp_form');\n        (<any>forml).reset();\n\n    }\n}","export class FileUploadState {\n    public static All: string[] = ['start', 'upload', 'fail'];\n    public static Start: string = 'start';\n    public static Upload: string = 'upload';\n    public static Fail: string = 'fail';\n}\n\nexport interface IFileUploadService {\n    progress: number;\n    state: string;\n    error: string;\n    upload(url: string, file: any, transaction: any, callback?: (data: any, err: any) => void): void;\n}\n\nexport class FileUploadService implements IFileUploadService {\n    public progress: number;\n    public state: string;\n    public error: string = null;\n\n    public constructor( private $http: ng.IHttpService) {}\n\n    public upload(url: string, file: any, callback?: (data: any, err: any) => void): void {\n        \n        let fd: FormData = new FormData();\n        fd.append('file', file);\n        \n        this.progress = 0;\n        this.state = FileUploadState.Start;\n        this.$http.post(url, fd, <any>{\n            uploadEventHandlers: {\n                progress: (e: any) => {\n                    if (e.lengthComputable) {\n                        this.progress = (e.loaded / e.total) * 100;\n                    }\n                }\n            },\n            headers: { 'Content-Type': undefined }\n        })    \n        .success((response: any) => {\n            this.state = FileUploadState.Upload;\n\n            if (callback) callback(response, null);\n        })    \n        .error((response: any) => {\n            this.state = FileUploadState.Fail;\n            this.error = response.Error || response;\n\n            if (callback) callback(null, response);\n        });\n    }\n}","\nimport {\n    ButtonsUpload\n} from \"../common/ButtonsUpload\";\n\nexport interface IFileStartController {\n    name: string;\n    type: string;\n    progress: number;\n    buttons: ButtonsUpload[];\n}\n\nexport class FileStartController implements IFileStartController {\n    public name: string;\n    public progress: number = 0;\n    public type: string;\n    public buttons: ButtonsUpload[];\n\n    constructor($scope: ng.IScope) {\n        \"ngInject\";\n        \n        // Init parameters\n      \n        $scope.$watch('progress', (progress: number) => {\n            this.progress = progress;\n        })\n    }\n}","\nimport {FileStartController} from './FileStartController';\n\n(() => {\n \n    const fileStartDirective = {\n        restrict: 'E',\n        replace: true,\n        controller: FileStartController,\n        controllerAs: 'vm',\n        bindings: {\n            buttons: '=?pipButtons',\n            name: '=pipName',\n            type: '=?pipType',\n            progress: '=?pipProgress'\n        },\n        templateUrl: 'start/FileStart.html'\n    };\n\n    angular\n        .module('pipFiles.StartUpload', [])\n        .component('pipStartUpload', fileStartDirective)\n\n\n})();\n","\nimport {\n    ButtonsUpload\n} from \"../common/ButtonsUpload\";\n\nimport { IFileSuccessBindings} from './index';\n\nexport interface IFileSuccessController {\n    name: string;\n    type: string;\n    buttons: ButtonsUpload[];\n}\n\nexport class FileSuccessController implements IFileSuccessController, IFileSuccessBindings {\n    public name: string;\n    public type: string = 'file';\n    public buttons: ButtonsUpload[];\n\n    constructor() {}\n\n    public $onChanges(changes) {}\n}","\nimport {FileSuccessController} from './FileSuccessController';\n\nexport interface IFileSuccessBindings {\n    [key: string]: any;\n\n    type: any\n    buttons: any,\n    name: any\n}\n\nconst FileSuccessBindings: IFileSuccessBindings = {\n    buttons: '=?pipButtons',\n    name: '=pipName',\n    type: '=?pipType',\n};\n\n(() => {\n \n     const fileSuccessDirective = {\n            restrict: 'E',\n            replace: true,\n            controller: FileSuccessController,\n            controllerAs: 'vm',\n            bindings: FileSuccessBindings,\n            templateUrl: 'success/FileSuccess.html'\n    }\n\n\n    angular\n        .module('pipFiles.SuccessUpload', [])\n        .component('pipSuccesUpload', fileSuccessDirective)\n\n\n})();\n","\nimport {\n    IFileUploadService\n} from \"../service/FileUploadService\";\n\nimport {\n    ButtonsUpload\n} from \"../common/ButtonsUpload\";\n\nimport {\n    FileUploadChanges\n} from \"./index\";\n\nexport interface IFileUploadController {\n    name: string;\n    type: string;\n    state: string;\n    progress: number;\n    onCancel(): void;\n    onRetry(): void;\n    onAbort(): void;\n}\n\nexport class FileUploadButtons {\n    retry: Function;\n    cancel: Function;\n    abort: Function;\n}\n\nexport class FileUploadController implements IFileUploadController {\n    public buttonFunction: FileUploadButtons;\n    public uploadButtons: ButtonsUpload[];\n    public failButtons: ButtonsUpload[];\n    public startButtons: ButtonsUpload[];\n\n    public name: string;\n    public type: string;\n    public state: string;\n    public progress: number;\n    public buttons: boolean;\n    public error: string = null;\n\n    constructor( $scope: ng.IScope ) {\n        \"ngInject\";\n        \n        // Init parameters\n        if (this.buttonFunction) {\n            this.uploadButtons = [];\n            this.failButtons = [\n                {title: 'Cancel', click: () => { this.onCancel()}},\n                {title: 'Retry', click: () => { this.onRetry()}}\n            ];\n            this.startButtons = [\n                {title: 'Abort', click: () => { this.onAbort() }}\n            ];\n        }\n    }\n\n    \n    public $onChanges(changes: FileUploadChanges) {\n        if (changes.state) {\n            this.state = changes.state.currentValue;\n        }\n\n        if (changes.progress) {\n            this.progress = changes.progress.currentValue;\n        }\n\n        if (changes.error) {\n            this.error = changes.error.currentValue;\n        }\n\n    }\n\n    public onCancel(): void {\n        if (this.buttonFunction.cancel) this.buttonFunction.cancel();\n    }\n\n    public onRetry(): void {\n        if (this.buttonFunction.retry) this.buttonFunction.retry();\n    }\n\n    public onAbort() {\n        if (this.buttonFunction.abort) this.buttonFunction.abort();\n    }\n\n}","\nimport {FileUploadController, FileUploadButtons} from './FileUploadController';\n\nexport interface IFileUploadBindings {\n    [key: string]: any;\n\n    buttonFunction: any,\n    buttons: any,\n    error: any,\n    name: any,\n    state: any,\n    type: any,\n    progress: any\n}\n\nconst FileUploadBindings: IFileUploadBindings = {\n    buttonFunction: '<?pipButtonFunctions',\n    buttons: '<?pipButtons',\n    error: '<?pipError',\n    name: '<pipName',\n    state: '<pipState',\n    type: '<?pipType',\n    progress: '<pipProgress'\n}\n\nexport class FileUploadChanges implements ng.IOnChangesObject, IFileUploadBindings {\n    [key: string]: ng.IChangesObject<any>;\n\n    buttonFunction: ng.IChangesObject<FileUploadButtons>;\n    buttons: ng.IChangesObject<boolean>;\n    error: ng.IChangesObject<string>;\n    name: ng.IChangesObject<string>;\n    state: ng.IChangesObject<string>;\n    type: ng.IChangesObject<string>;\n    progress: ng.IChangesObject<number>;\n}\n\nconst fileUploadDirective = {\n    controller: FileUploadController,\n    bindings: FileUploadBindings,\n    templateUrl: 'upload/FileUpload.html'\n};\n\n\n(() => {\n\n    angular\n        .module('pipFiles.FileUpload', [])\n        .component('pipFileUpload', fileUploadDirective)\n       \n})();\n","(function(module) {\ntry {\n  module = angular.module('pipFiles.Templates');\n} catch (e) {\n  module = angular.module('pipFiles.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('fail/FileFail.html',\n    '<div class=\"pip-files pip-progress-files\"><div class=\"pip-body pip-scroll pip-progress-body\"><div class=\"layout-row\"><div class=\"pip-progress-icon color-badge-bg\"><md-icon md-svg-icon=\"icons:cross\"></md-icon></div><div class=\"pip-progress-content\"><h3 class=\"pip-title\">Uploading {{$ctrl.type}} failed with errors!</h3><div class=\"color-secondary-text pip-subtitle\">{{$ctrl.name}}</div><div class=\"color-error pip-error\">{{$ctrl.error}}</div></div></div></div><div class=\"pip-footer layout-row layout-align-end-center\" ng-if=\"$ctrl.buttons && $ctrl.buttons.length > 0\"><div><md-button class=\"md-accent\" ng-repeat=\"fail in $ctrl.buttons\" ng-click=\"fail.click()\">{{::fail.title}}</md-button></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipFiles.Templates');\n} catch (e) {\n  module = angular.module('pipFiles.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('select/FileSelect.html',\n    '<div class=\"pip-file-select\"><form id=\"inp_form\" class=\"pip-hidden-form\"><input type=\"file\" file-model=\"vm.localFile\" id=\"inp_file\" ng-model=\"vm.localFile\"></form><md-button class=\"md-raised md-accent pip-button\" ng-click=\"vm.onUploadButtonClick()\" ng-if=\"!vm.localFile\">Choose File</md-button><div ng-if=\"vm.localFile.name\" class=\"pip-file layout-row layout-align-start-center\"><md-icon md-svg-icon=\"icons:document\" class=\"pip-icon\"></md-icon><div class=\"flex\"><div class=\"text-body2 text-overflow\">{{vm.localFile.name}}</div><div ng-if=\"vm.localFile.size\" class=\"color-secondary-text\">{{vm.localFile.size}}</div></div><md-button ng-click=\"vm.onDeleteButtonClick()\" class=\"md-icon-button\"><md-icon md-svg-icon=\"icons:cross-circle\"></md-icon></md-button></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipFiles.Templates');\n} catch (e) {\n  module = angular.module('pipFiles.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('start/FileStart.html',\n    '<div class=\"pip-files pip-progress-files\"><div class=\"pip-body pip-scroll pip-progress-body\"><div class=\"layout-row\"><div class=\"pip-progress-icon bb-orange\"><md-icon md-svg-icon=\"icons:play\"></md-icon></div><div class=\"pip-progress-content\"><h3 class=\"pip-title\">Uploading {{::vm.type}}</h3><div class=\"color-secondary-text pip-subtitle\">{{vm.name}}</div><div><md-progress-linear md-mode=\"determinate\" class=\"md-accent\" value=\"{{vm.progress}}\" ng-if=\"vm.progress < 100\"></md-progress-linear><md-progress-linear md-mode=\"indeterminate\" class=\"md-accent\" ng-if=\"vm.progress == 100\"></md-progress-linear></div></div></div></div><div class=\"pip-footer layout-row layout-align-end-center\" ng-if=\"vm.buttons\"><div><md-button class=\"md-accent\" ng-repeat=\"start in vm.buttons\" ng-click=\"start.click()\">{{start.title}}</md-button></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipFiles.Templates');\n} catch (e) {\n  module = angular.module('pipFiles.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('success/FileSuccess.html',\n    '<div class=\"pip-files pip-progress-files\"><div class=\"pip-body pip-scroll pip-progress-body\"><div class=\"layout-row\"><div class=\"pip-progress-icon bb-green\"><md-icon md-svg-icon=\"icons:check\"></md-icon></div><div class=\"pip-progress-content\"><h3 class=\"pip-title\">Uploaded {{::vm.type}} successfully!</h3><div class=\"color-secondary-text pip-subtitle\">{{vm.name}}</div></div></div></div><div class=\"pip-footer layout-row layout-align-end-center\" ng-if=\"vm.buttons && vm.buttons.length > 0\"><div><md-button class=\"md-accent\" ng-repeat=\"start in vm.buttons\" ng-click=\"start.click()\">{{start.title}}</md-button></div></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipFiles.Templates');\n} catch (e) {\n  module = angular.module('pipFiles.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('upload/FileUpload.html',\n    '<div><pip-succes-upload ng-if=\"$ctrl.state == \\'upload\\'\" pip-name=\"$ctrl.name\" pip-type=\"$ctrl.type\" pip-buttons=\"$ctrl.buttons\"></pip-succes-upload><pip-fail-upload ng-if=\"$ctrl.state == \\'fail\\'\" pip-name=\"$ctrl.name\" pip-type=\"$ctrl.type\" pip-error=\"$ctrl.error\" pip-buttons=\"$ctrl.failButtons\"></pip-fail-upload><pip-start-upload ng-if=\"$ctrl.state == \\'start\\'\" pip-name=\"$ctrl.name\" pip-type=\"$ctrl.type\" pip-progress=\"$ctrl.progress\" pip-buttons=\"$ctrl.startButtons\"></pip-start-upload></div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-files-html.min.js.map\n"]}